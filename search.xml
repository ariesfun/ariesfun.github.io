<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++ 算法刷题 - 常用技巧汇总</title>
      <link href="/posts/8b7.html"/>
      <url>/posts/8b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-算法刷题-常用技巧汇总"><a href="#C-算法刷题-常用技巧汇总" class="headerlink" title="C++ 算法刷题 - 常用技巧汇总"></a>C++ 算法刷题 - 常用技巧汇总</h2><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><h3 id="自带的宏常量"><a href="#自带的宏常量" class="headerlink" title="自带的宏常量"></a>自带的宏常量</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> N = INT_MAX; <span class="comment">// 2147483647</span></span><br><span class="line"><span class="type">int</span> M = INT_MIN; <span class="comment">// -2147483648</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3</span>; INF: <span class="comment">// 66319347，在图论中通常用来代替最大值，防止运算过程中溢出</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;N: &quot;</span> &lt;&lt; N &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;M: &quot;</span> &lt;&lt; M &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;INF: &quot;</span> &lt;&lt; INF &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><hr><h2 id="字符串及字符处理"><a href="#字符串及字符处理" class="headerlink" title="字符串及字符处理"></a>字符串及字符处理</h2><h3 id="字符串初始化"><a href="#字符串初始化" class="headerlink" title="字符串初始化"></a>字符串初始化</h3><p>让字符串重复，利用构造函数来初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">str</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;h&#x27;</span>)</span></span>; </span><br><span class="line">std::cout &lt;&lt; str &lt;&lt; std::endl; <span class="comment">// 会输出10个h</span></span><br></pre></td></tr></table></figure><hr><h3 id="字符串判断函数"><a href="#字符串判断函数" class="headerlink" title="字符串判断函数"></a>字符串判断函数</h3><blockquote><p><code>isdigit(c)</code> // 判断给定字符是否是数字字符</p><p><code>isalpha(c)</code> // 判断字符是否是字母</p><p><code>isalnum(c)</code> // 判断字符是否是字符或数字</p><p><code>tolower(c)</code>// 转为小写</p><p><code>toupper(c)</code> // 转为大写    </p><p><code>transform(str.begin(), str.end(), str.begin(), ::tolower;</code> // 所有字符转为小写</p></blockquote><p><strong>代码示例</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">char</span>&gt; res = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>&#125;;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : res) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isdigit</span>(x)) &#123;</span><br><span class="line">        std::cout &lt;&lt; (x - <span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 字符数字转整数,5,6,7</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(std::<span class="built_in">isalnum</span>(x)) &#123; <span class="comment">// 是否是字母数字，res=6</span></span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;cnt: &quot;</span> &lt;&lt; cnt &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x : res) &#123; <span class="comment">//使用 &amp;x 可以通过引用修改原始容器中的元素</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isalpha</span>(x)) &#123;</span><br><span class="line">        x = <span class="built_in">toupper</span>(x); <span class="comment">// x是引用</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// x: A B C 5 6 7</span></span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> t : res) std::cout &lt;&lt; t &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 变为大写</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">std::string str1 = <span class="string">&quot;TOM, jack&quot;</span>;</span><br><span class="line"><span class="built_in">transform</span>(str1.<span class="built_in">begin</span>(), str1.<span class="built_in">end</span>(), str1.<span class="built_in">begin</span>(), ::uplower); <span class="comment">// 加头文件&lt;algorithm&gt;</span></span><br><span class="line">std::cout &lt;&lt; str1; <span class="comment">// 都变为小写: tom, jack</span></span><br></pre></td></tr></table></figure><hr><h3 id="字符串和数字间的转化"><a href="#字符串和数字间的转化" class="headerlink" title="字符串和数字间的转化"></a>字符串和数字间的转化</h3><h4 id="00-字符串转整数（秦九韶算法）"><a href="#00-字符串转整数（秦九韶算法）" class="headerlink" title="00.字符串转整数（秦九韶算法）"></a>00.字符串转整数（秦九韶算法）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">std::string str = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    res = res * <span class="number">10</span> + str[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;res: &quot;</span> &lt;&lt; res &lt;&lt; std::endl; <span class="comment">// int: 123456</span></span><br></pre></td></tr></table></figure><p><strong>应用题型：</strong></p><p><a href="https://www.acwing.com/problem/content/4948/">【AcWing 4945. 比大小 - 进位制、秦九韶】</a>    <a href="https://www.acwing.com/activity/content/code/content/6125715/">题解</a></p><p><a href="https://leetcode.cn/problems/string-to-integer-atoi/description/">【LeetCode 8. 字符串转换整数 (类atoi)】</a>    <a href="https://www.acwing.com/file_system/file/content/whole/index/content/9598807/">题解</a></p><p>Ps:相关函数: <code>to_string(num)</code> <strong>整型转字符串</strong></p><hr><h4 id="01-stoi-字符串转整数"><a href="#01-stoi-字符串转整数" class="headerlink" title="01.stoi() 字符串转整数"></a>01.stoi() 字符串转整数</h4><p><code>int stoi( const std::string&amp; str, std::size_t* pos = 0, int base = 10 );</code></p><p>pos: 可选参数，指向第一个无效字符位置的指针    base: 进制数, 默认是10</p><p><code>std::to_string(num)</code>数字转字符串，包含double</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line">std::string str = std::<span class="built_in">to_string</span>(num); <span class="comment">// 数字转字符串</span></span><br><span class="line"><span class="type">int</span> n = <span class="built_in">stoi</span>(str); <span class="comment">// 字符串转整型，stol()转长整型</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;str: &quot;</span> &lt;&lt; str &lt;&lt; <span class="string">&#x27;\n&#x27;</span> &lt;&lt; <span class="string">&quot;n: &quot;</span>  &lt;&lt; n &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><hr><h4 id="02-atoi-C风格字符串转整数"><a href="#02-atoi-C风格字符串转整数" class="headerlink" title="02.atoi() C风格字符串转整数"></a>02.atoi() C风格字符串转整数</h4><p><code>int atoi(const char* str);</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot; 41.9999&quot;</span>;</span><br><span class="line"><span class="type">int</span> n  = std::<span class="built_in">atoi</span>(str); <span class="comment">// 只能处理简单的整数转换</span></span><br><span class="line">std::cout &lt;&lt; n &lt;&lt; std::endl; <span class="comment">// n: 41</span></span><br></pre></td></tr></table></figure><hr><h4 id="03-atof-C风格字符串转浮点数"><a href="#03-atof-C风格字符串转浮点数" class="headerlink" title="03.atof() C风格字符串转浮点数"></a>03.atof() C风格字符串转浮点数</h4><p><code>double atof(const char* str);</code></p><p><code>atof()</code>会从字符串中解析出有效的浮点数，无法解析时，会返回0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;  -2.45x6&quot;</span>;</span><br><span class="line"><span class="type">double</span> f = std::<span class="built_in">atof</span>(str);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;f: &quot;</span> &lt;&lt; f &lt;&lt; std::endl; <span class="comment">// f: 2.45</span></span><br></pre></td></tr></table></figure><p>Ps:</p><p><code>atof()</code>（只能处理以null结尾的C风格字符串（<em><em>const char</em> str</em>*), </p><p>若是处理C++里的<code>std::string</code>，需要使用<code>.c_str()</code>方法获取其地址，然后在进行转换</p><p><strong>代码示例，</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::string str = <span class="string">&quot; -3.141/5&quot;</span>;</span><br><span class="line"><span class="type">double</span> f = std::<span class="built_in">atof</span>(str.<span class="built_in">c_str</span>());</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;f: &quot;</span> &lt;&lt; f &lt;&lt; std::endl; <span class="comment">// f: 3.141</span></span><br></pre></td></tr></table></figure><hr><h4 id="04-str-c-str-用法"><a href="#04-str-c-str-用法" class="headerlink" title="04.str.c_str()用法"></a>04.<code>str.c_str()</code>用法</h4><p><code>const CharT* c_str() const;</code></p><p>返回值，指向底层字符存储的指针。</p><p><code>s.c_str()</code>函数,返回一<strong>个指向C字符串的指针常量</strong>, 内容与本string串相同.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">std::string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* s = &#123;&#125;;</span><br><span class="line">s = str.<span class="built_in">c_str</span>(); <span class="comment">// const char* 类型</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;s: &quot;</span> &lt;&lt; s &lt;&lt; std::endl; <span class="comment">// s: hello</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, str.<span class="built_in">c_str</span>()); <span class="comment">// 使用C风格的printf输出 </span></span><br></pre></td></tr></table></figure><p><code>c_str()</code>返回的是一个临时指针，不能对其进行操作</p><p><strong>代码示例，</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确用法</span></span><br><span class="line"><span class="type">char</span> c[<span class="number">10</span>];</span><br><span class="line">std::string str = <span class="string">&quot;good morning&quot;</span>;</span><br><span class="line"><span class="comment">// &lt;cstring&gt; 头文件</span></span><br><span class="line"><span class="built_in">strcpy</span>(c, str.<span class="built_in">c_str</span>());<span class="comment">// 这样才不会出错，c_str()返回的是一个临时指针，不能对其进行操作</span></span><br><span class="line">std::cout &lt;&lt; c &lt;&lt; std::endl; <span class="comment">// c: good morning</span></span><br></pre></td></tr></table></figure><p><a href="https://www.acwing.com/blog/content/27673/">【s.c_str()使用详情】</a></p><hr><h4 id="相关拓展-取出数字的每一位"><a href="#相关拓展-取出数字的每一位" class="headerlink" title="相关拓展: 取出数字的每一位"></a>相关拓展: 取出数字的每一位</h4><blockquote><p>int t = x % 10; // 循环，从低位到高位取每一位数字<br>x /= 10; </p></blockquote><p><strong>代码示例，</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">45678</span>;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"><span class="keyword">while</span>(x) &#123; <span class="comment">// 取出x的每位数字 ( 从低位到高位取)</span></span><br><span class="line">    <span class="type">int</span> t = x % <span class="number">10</span>;</span><br><span class="line">    res.<span class="built_in">push_back</span>(t);</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> n : res) &#123;</span><br><span class="line">    std::cout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 45678</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**应用题型：</p><p><a href="https://www.acwing.com/problem/content/description/1247/">蓝桥杯 1245. 特别数的和</a>    <a href="https://www.acwing.com/activity/content/code/content/6726140/">题解</a></p><p><a href="https://haicoder.net/cpp/cpp-string-reverse.html">知识点：【reserve() 字符串反转】</a></p><hr><h3 id="字符串按空格分隔"><a href="#字符串按空格分隔" class="headerlink" title="字符串按空格分隔"></a>字符串按空格分隔</h3><p>将字符串按空格进行分割，类似其他语言的<code>split()</code>方法</p><p><strong>代码示例，</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要引入头文件 &lt;sstream&gt;</span></span><br><span class="line">std::string str = <span class="string">&quot;hello I  am fine  hhh&quot;</span>;</span><br><span class="line"><span class="function">std::stringstream <span class="title">ss</span><span class="params">(str)</span></span>;</span><br><span class="line">std::string s;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ss &gt;&gt; s) &#123; <span class="comment">// 可忽略多个空格</span></span><br><span class="line">    cnt++; <span class="comment">// 统计分隔的数量</span></span><br><span class="line">    std::cout &lt;&lt; s &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; cnt &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// 输出结果为，</span></span><br><span class="line">hello</span><br><span class="line">I</span><br><span class="line">am</span><br><span class="line">fine</span><br><span class="line">hhh</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>相关题型，</strong></p><p><a href="https://www.acwing.com/problem/content/772/">【AcWing 770. 单词替换 】</a>    <a href="https://www.acwing.com/activity/content/code/content/5815055/">【题解】</a></p><hr><h3 id="字符串按格式拆分"><a href="#字符串按格式拆分" class="headerlink" title="字符串按格式拆分"></a>字符串按格式拆分</h3><p><strong>可以按自定义格式进行拆分</strong></p><p><code>void* memcpy(void* dest, const void* src, std::size_t count);</code></p><p>用于将<code>src</code>指针指向的内存区域的数据复制到<code>dest</code>指针指向的内存区域，复制的字节数由<code>count</code>指定。注意<code>memcpy</code>不会添加末尾空字符</p><p><code>int sscanf(const char* str, const char* format, ...);</code></p><p>从一个字符串中读取数据并根据指定的格式进行解析。</p><p><strong>代码示例，</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">std::string a = <span class="string">&quot;12:36:40&quot;</span>;</span><br><span class="line">std::string b = <span class="string">&quot;45s67,55&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">memcpy</span>(str, a.<span class="built_in">c_str</span>(), <span class="built_in">strlen</span>(a.<span class="built_in">c_str</span>())); <span class="comment">// strlen() 需引入&lt;cstring&gt;</span></span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line"><span class="built_in">sscanf</span>(str, <span class="string">&quot;%d:%d:%d&quot;</span>, &amp;u, &amp;v, &amp;w); <span class="comment">// 按指定格式从字符数组中来读</span></span><br><span class="line">std::cout &lt;&lt; u &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; v &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; w &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 12 36 40</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str1[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">memcpy</span>(str1, b.<span class="built_in">c_str</span>(), <span class="built_in">strlen</span>(b.<span class="built_in">c_str</span>()));</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="built_in">sscanf</span>(str1, <span class="string">&quot;%ds%d,%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; z &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 45 67 55</span></span><br></pre></td></tr></table></figure><p><strong>另外一种写法，</strong></p><p>``istringstream` <strong>自动截取分隔符号</strong></p><p>需要注意的是，将<code>std::string</code>类型的字符串转换成<code>char</code>类型的字符数组</p><p>并使用<code>sscanf</code>的方式不是C++中推荐的做法。C++提供了更加安全和便捷的方式来解析字符串，</p><p>例如使用<code>std::istringstream</code>，这样可以避免手动内存管理和潜在的缓冲区溢出问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">std::string c = <span class="string">&quot;1s2-4,5?99&quot;</span>;</span><br><span class="line"><span class="function">std::istringstream <span class="title">iss</span><span class="params">(c)</span></span>; <span class="comment">// 需引入&lt;sstream&gt;</span></span><br><span class="line"><span class="type">char</span> delimiter;</span><br><span class="line"><span class="type">int</span> x,y,m,n,q;</span><br><span class="line">iss &gt;&gt; x &gt;&gt; delimiter &gt;&gt; y &gt;&gt; delimiter &gt;&gt; m &gt;&gt; delimiter &gt;&gt; n &gt;&gt; delimiter &gt;&gt; q; <span class="comment">// iss会自动截取分隔符号(空格不行)</span></span><br><span class="line">std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; m &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; q &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 1 2 4 5 99</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">std::string str = <span class="string">&quot;hello I am fine hhh&quot;</span>;</span><br><span class="line"><span class="function">std::stringstream <span class="title">ss</span><span class="params">(str)</span></span>; <span class="comment">// 需引入头文件 &lt;sstream&gt;</span></span><br><span class="line">std::string s;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ss &gt;&gt; s) &#123;</span><br><span class="line">    cnt++; <span class="comment">// 统计读取串的数量</span></span><br><span class="line">    std::cout &lt;&lt; s &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; cnt &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果为</span></span><br><span class="line">hello</span><br><span class="line">I</span><br><span class="line">am</span><br><span class="line">fine</span><br><span class="line">hhh</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><hr><h3 id="利用字符串四舍五入保留小数"><a href="#利用字符串四舍五入保留小数" class="headerlink" title="利用字符串四舍五入保留小数"></a>利用字符串四舍五入保留小数</h3><p>在C++语言中，**<code>printf</code>函数本身并不提供四舍五入的功能。**</p><p><code>printf</code>是一个格式化输出函数，用于将数据按照指定格式输出到标准输出或其他输出流中，但它并不会对数据进行四舍五入操作。</p><p><strong>方法一：</strong>利用字符串</p><p><code>sprintf()</code>函数是C语言标准库中的一个函数，用于将格式化的数据写入到字符串中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="type">double</span> num = <span class="number">123.456</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(str, <span class="string">&quot;%.2f&quot;</span>, num);</span><br><span class="line">std::string s = str; <span class="comment">// 转为字符串，会有自动的隐式类型转换：string(const char* s);</span></span><br><span class="line">std::cout &lt;&lt; s &lt;&lt; std::endl; <span class="comment">// 结果：123.3</span></span><br></pre></td></tr></table></figure><p><strong>方法二：</strong>利用库函数</p><p>使用头文件中的<code>std::fixed </code>和 <code>std::setprecision</code> ,来指定保留的小数位</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要引入头文件 &lt;iomanip&gt;</span></span><br><span class="line"><span class="type">double</span> num = <span class="number">3.14159</span>;</span><br><span class="line"><span class="type">int</span> k = <span class="number">3</span>; <span class="comment">// 设置要保留的小数位数</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(k) &lt;&lt; num &lt;&lt; std::endl; <span class="comment">// 结果： 3.142</span></span><br></pre></td></tr></table></figure><hr><h2 id="迭代器的二分"><a href="#迭代器的二分" class="headerlink" title="迭代器的二分"></a>迭代器的二分</h2><blockquote><p>// 一般升序使用</p><p><code>lower_bound(nums.begin(), nums.end(), 44) - nums.begin();</code> // 用于查找大于等于给定值的第一个元素</p><p><code>upper_bound(nums.begin(), nums.end(), 55) - nums.begin();</code> // 用于查找大于给定值的第一个元素</p></blockquote><p><strong>代码示例，</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; nums&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;;</span><br><span class="line"><span class="comment">// 第一个大于等于目标值的迭代器位置</span></span><br><span class="line"><span class="type">int</span> k = <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">44</span>) - nums.<span class="built_in">begin</span>(); <span class="comment">// 下标为3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到第一个大于目标值的迭代器位置</span></span><br><span class="line"><span class="type">int</span> m = <span class="built_in">upper_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">55</span>) - nums.<span class="built_in">begin</span>(); <span class="comment">// 下标为5 ， 查66小标为6</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;k: &quot;</span> &lt;&lt; k &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;m: &quot;</span> &lt;&lt; m &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><hr><h2 id="大根堆和小根堆"><a href="#大根堆和小根堆" class="headerlink" title="大根堆和小根堆"></a>大根堆和小根堆</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt; pq; <span class="comment">// 默认是大根堆</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; pq; <span class="comment">// 定义成小根堆的方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可支持以下操作</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span> <span class="comment">// 引入头文件</span></span></span><br><span class="line"><span class="built_in">size</span>()</span><br><span class="line"><span class="built_in">empty</span>()</span><br><span class="line"><span class="built_in">push</span>()  插入一个元素</span><br><span class="line"><span class="built_in">top</span>()  返回堆顶元素</span><br><span class="line"><span class="built_in">pop</span>()  弹出堆顶元素</span><br><span class="line">q = <span class="built_in">queue</span>&lt;<span class="type">int</span>&gt;(); 初始化队列 相当于clear</span><br></pre></td></tr></table></figure><p><strong>代码示例，</strong></p><p><a href="https://www.luogu.com.cn/problem/P3378">【洛谷 模拟堆操作 - 模板题】</a>，<strong>STL实现小根堆的增删改</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; heap; <span class="comment">// 定义小根堆</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n, op;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--) &#123; </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            heap.<span class="built_in">push</span>(x); <span class="comment">// 插入元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, heap.<span class="built_in">top</span>()); <span class="comment">// 输出堆顶元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            heap.<span class="built_in">pop</span>(); <span class="comment">// 弹出栈顶元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>相关应用，</strong></p><p><a href="https://www.luogu.com.cn/problem/P3378">【洛谷 模拟堆操作 - 模板题】</a></p><p><a href="https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof/">【剑指 - Offer 40. 最小的k个数】</a>    <a href="https://www.acwing.com/activity/content/code/content/6185450/">【题解】</a></p><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/description/">【LeetCode 47. 前 K 个高频元素】</a>    <a href="https://www.acwing.com/activity/content/code/content/6614070/">【题解】</a></p><p><a href="https://www.acwing.com/problem/content/840/">【AcWing 堆排序 - 模板题】</a>    <a href="https://www.acwing.com/activity/content/code/content/6729882/">【题解】</a></p><p><a href="https://www.acwing.com/problem/content/841/">【AcWing 模拟堆 - 模板题】</a>    <a href="https://www.acwing.com/activity/content/code/content/6731326/">【题解】</a></p><hr><h2 id="快速初始化数组"><a href="#快速初始化数组" class="headerlink" title="快速初始化数组"></a>快速初始化数组</h2><p><code>memset()</code>, <strong>按字节来初始化元素的值或清空数组，常用于图论题</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意需要包含头文件 &lt;cstring&gt;</span></span><br><span class="line"><span class="built_in">memset</span>(nums, <span class="number">0</span>, <span class="keyword">sizeof</span> nums); </span><br><span class="line"><span class="built_in">memset</span>(nums, <span class="number">-1</span>, <span class="keyword">sizeof</span> nums);</span><br><span class="line"><span class="built_in">memset</span>(nums, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> nums);</span><br></pre></td></tr></table></figure><hr><h2 id="bitset-压位"><a href="#bitset-压位" class="headerlink" title="bitset 压位"></a>bitset 压位</h2><p>自己目前还没遇到过这类题型，可能是考察的少(应该是刷题少了)，后续有做到类似的题再补充</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的功能是将给定的32位无符号整数（uint32_t）表示的数字的二进制位反转，并返回反转后的新数字。</span></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">reverseBits</span><span class="params">(<span class="type">uint32_t</span>)</span> </span>&#123;</span><br><span class="line">    string s = <span class="built_in">bitset</span>&lt;<span class="number">32</span>&gt;(n).<span class="built_in">to_string</span>();</span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">32</span>&gt;(s).<span class="built_in">to_ulong</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="一些C-11新特性"><a href="#一些C-11新特性" class="headerlink" title="一些C++11新特性"></a>一些C++11新特性</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(); <span class="comment">// auto，会自动推断返回的类型</span></span><br><span class="line">Node* pre = <span class="literal">nullptr</span>; <span class="comment">// 用nullptr代替NULL</span></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map; <span class="comment">// 哈希表， 内部无序</span></span><br><span class="line">unordered_set&lt;<span class="type">int</span>&gt; st; <span class="comment">// 无序集合</span></span><br></pre></td></tr></table></figure><hr><h2 id="自定义排序规则"><a href="#自定义排序规则" class="headerlink" title="自定义排序规则"></a>自定义排序规则</h2><h4 id="结构体排序"><a href="#结构体排序" class="headerlink" title="结构体排序"></a>结构体排序</h4><p><strong>代码示例，</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node &amp;_node) <span class="type">const</span> &#123; <span class="comment">// 重载小于号，自定义升序排列</span></span><br><span class="line">        <span class="keyword">if</span>(a != _node.a) <span class="keyword">return</span> a &lt; _node.a; <span class="comment">// 按第一关键排</span></span><br><span class="line">        <span class="keyword">return</span> b &lt; _node.b; <span class="comment">// 第一关键字相等按第二关键字排</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;node&gt; arr;</span><br><span class="line">    arr.<span class="built_in">push_back</span>(&#123;<span class="number">1</span>,<span class="number">3</span>&#125;);</span><br><span class="line">    arr.<span class="built_in">push_back</span>(&#123;<span class="number">1</span>,<span class="number">2</span>&#125;);</span><br><span class="line">    arr.<span class="built_in">push_back</span>(&#123;<span class="number">2</span>,<span class="number">5</span>&#125;);</span><br><span class="line">    arr.<span class="built_in">push_back</span>(&#123;<span class="number">2</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>()); <span class="comment">// 按照自定义排序规则</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> node : arr) &#123;</span><br><span class="line">       std::cout &lt;&lt; node.a &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; node.b &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果为</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>类似用法，</strong></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/6685680/">【文档 结构体排序的四种方法】</a></p><hr><h4 id="优先队列自定义排序"><a href="#优先队列自定义排序" class="headerlink" title="优先队列自定义排序"></a>优先队列自定义排序</h4><p><strong>代码示例，</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="comment">// 注意，优先队列的排序是相反的，这里指a大的排在前面，a相同时，b大的排前面</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node &amp;_node) <span class="type">const</span> &#123; <span class="comment">// 重载小于号，这里实际是一个降序序列</span></span><br><span class="line">        <span class="keyword">if</span>(a != _node.a) <span class="keyword">return</span> a &lt; _node.a; <span class="comment">// 按第一关键排</span></span><br><span class="line">        <span class="keyword">return</span> b &lt; _node.b; <span class="comment">// 第一关键字相等按第二关键字排</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    std::priority_queue&lt;node&gt; heap; <span class="comment">// （优先队列默认是大根堆）自定义排序规则，这里维护的是一个大根堆</span></span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">1</span>,<span class="number">3</span>&#125;);</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">1</span>,<span class="number">2</span>&#125;);</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">2</span>,<span class="number">5</span>&#125;);</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">2</span>,<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!heap.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; heap.<span class="built_in">top</span>().a &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; heap.<span class="built_in">top</span>().b &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 这样输出的结果是降序排列的，是大根堆</span></span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果为，</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>类似题型，</strong></p><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/description/">【LeetCode 47. 前 K 个高频元素】</a>    <a href="https://www.acwing.com/activity/content/code/content/6614070/">【题解】</a></p><hr><h4 id="pair二元组关键字排序"><a href="#pair二元组关键字排序" class="headerlink" title="pair二元组关键字排序"></a>pair二元组关键字排序</h4><p>pair 默认对first升序，当first相同时对second升序</p><p><strong>相关题型，</strong></p><p><a href="https://www.acwing.com/problem/content/3428/">【AcWing 3425. 小白鼠排队】</a>    <a href="https://www.acwing.com/file_system/file/content/whole/index/content/9155751/">【题解】</a></p><p><a href="https://www.acwing.com/problem/content/3454/">【AcWing 3451. 字符串排序II】</a>    <a href="https://www.acwing.com/file_system/file/content/whole/index/content/9155991/">【题解】</a></p><hr><h4 id="sort-自定义排序，需重载比较函数"><a href="#sort-自定义排序，需重载比较函数" class="headerlink" title="sort()自定义排序，需重载比较函数"></a>sort()自定义排序，需重载比较函数</h4><p><strong>sort()常规用法，</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; res = &#123;<span class="number">4</span>,<span class="number">92</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>()); <span class="comment">// 默认升序排列</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : res) &#123;</span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种降序排列写法</span></span><br><span class="line"><span class="built_in">sort</span>(res.<span class="built_in">rbegin</span>(), res.<span class="built_in">rend</span>()); <span class="comment">// 降序排列写法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : res) &#123;</span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>(), std::<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;()); <span class="comment">// 另一种写法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : res) &#123;</span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果为：</span></span><br><span class="line"><span class="number">-1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">4</span> <span class="number">92</span></span><br><span class="line"><span class="number">92</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">92</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p><strong>其他用法，</strong></p><p><a href="https://blog.csdn.net/liguojie12/article/details/113800426#sort__2">【文档 C++ 二维vector排序(sort用法)】</a></p><hr><h2 id="其他一些常用库函数"><a href="#其他一些常用库函数" class="headerlink" title="其他一些常用库函数"></a>其他一些常用库函数</h2><h3 id="求最值，max-min"><a href="#求最值，max-min" class="headerlink" title="求最值，max,min"></a>求最值，max,min</h3><p>需要引入``<algorithm>`头文件, 使用初始化列表形式来传参</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ma = std::<span class="built_in">max</span>(&#123;<span class="number">99</span>,<span class="number">1</span>,<span class="number">30</span>,<span class="number">0</span>&#125;); <span class="comment">// 比较多个数大小，可以采用初始化列表的方式</span></span><br><span class="line"><span class="type">int</span> mi = std::<span class="built_in">min</span>(&#123;<span class="number">1</span>,<span class="number">-33</span>,<span class="number">10</span>&#125;);</span><br><span class="line">std::cout &lt;&lt; ma &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; mi &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><hr><h3 id="查找最值元素下标，max-element-min-element"><a href="#查找最值元素下标，max-element-min-element" class="headerlink" title="查找最值元素下标，max_element min_element"></a>查找最值元素下标，max_element min_element</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">99</span>&#125;;</span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">max_element</span>(a,a+<span class="number">5</span>)-a &lt;&lt; std::endl; <span class="comment">// index: 4</span></span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">min_element</span>(a,a+<span class="number">5</span>)-a &lt;&lt; std::endl; <span class="comment">// index: 0</span></span><br></pre></td></tr></table></figure><hr><h3 id="求排列，prev-permutation-next-permutation"><a href="#求排列，prev-permutation-next-permutation" class="headerlink" title="求排列，prev_permutation next_permutation"></a>求排列，prev_permutation next_permutation</h3><p><code>prev_permutation</code>函数是生成给定序列的上一个较小的排列。</p><p><code>next_permutation</code>函数是求下一个全排列。</p><p><strong>相关应用，</strong></p><p><a href="https://blog.csdn.net/bettle_king/article/details/117607173">【prev_permutation函数】</a></p><p><a href="https://www.acwing.com/activity/content/code/content/6185851/">【AcWing 51. 数字排列】</a></p><hr><p>好了，暂时先收录这些，有新内容了在抽空更新整理吧</p><p>….</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.yuque.com/jackyao/ifeq8i/vyigt9">【文档 C++ 刷题常用技巧】</a></p><p><a href="https://www.bilibili.com/video/BV1pv4y1w7GY/?share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">【视频 C/C++常用刷题技巧】</a></p><p><a href="https://www.bilibili.com/video/BV1JL4y1h76U/?spm_id_from=333.999.0.0&vd_source=e9f1ced96b267a4bc02ec41ca31d850a">【视频 C++ 那些写起来简单方便的函数】</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 常用STL及用法 - 速查文档</title>
      <link href="/posts/8b87.html"/>
      <url>/posts/8b87.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-常用STL及用法-速查文档"><a href="#C-常用STL及用法-速查文档" class="headerlink" title="C++ 常用STL及用法 - 速查文档"></a>C++ 常用STL及用法 - 速查文档</h2><p><strong>具体使用方法，先用现查即可！！！</strong></p><p><strong>相关文档推荐，</strong></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3598249/">【文档：C++语法基础 第8讲 常用STL】</a></p><p><a href="https://blog.csdn.net/m0_73896521/article/details/128153203">【文档：从c语言到c++（stl容器/stl函数总结）】</a></p><hr><h3 id="stirng-字符串"><a href="#stirng-字符串" class="headerlink" title="stirng 字符串"></a><code>stirng</code> 字符串</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>()/<span class="built_in">length</span>()  返回字符串长度</span><br><span class="line"><span class="built_in">empty</span>() 返回<span class="type">bool</span>类型</span><br><span class="line"><span class="built_in">clear</span>()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">substr</span>(起始下标，(子串长度))  返回子串</span><br><span class="line"><span class="built_in">c_str</span>()  返回字符串所在字符数组的起始地址</span><br></pre></td></tr></table></figure><hr><h3 id="vector-变长数组"><a href="#vector-变长数组" class="headerlink" title="vector 变长数组"></a><code>vector</code> <strong>变长数组</strong></h3><p><strong>倍增的思想</strong></p><p>特点：系统为某一程序分配空间时，<strong>所需时间</strong>与空间大小无关，只与申请的次数有关。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>()  返回元素个数</span><br><span class="line"><span class="built_in">empty</span>()  返回是否为空</span><br><span class="line"><span class="built_in">clear</span>()   将清空</span><br><span class="line"></span><br><span class="line"><span class="built_in">front</span>()/<span class="built_in">back</span>() <span class="comment">// back()是返回最后一个元素</span></span><br><span class="line"><span class="built_in">push_back</span>()/<span class="built_in">pop_back</span>() <span class="comment">// 元素的增删，在末尾进行</span></span><br><span class="line"><span class="built_in">begin</span>()/<span class="built_in">end</span>() 迭代器</span><br><span class="line">[] <span class="comment">// 支持随机寻址</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>()); <span class="comment">// 数组元素翻转</span></span><br><span class="line"></span><br><span class="line">支持比较运算，按字典序</span><br></pre></td></tr></table></figure><p><strong>代码示例，</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>, <span class="number">3</span>)</span></span>; <span class="comment">// 数组初始化，指定元素个数及值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 10个3</span></span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// vector的另外两种遍历方式</span></span><br><span class="line">    std::cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(std::vector&lt;<span class="type">int</span>&gt;::iterator i = a.<span class="built_in">begin</span>(); i != a.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">    std::cout &lt;&lt; *i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><hr><h3 id="pair-lt-int-int-gt-二元组"><a href="#pair-lt-int-int-gt-二元组" class="headerlink" title="pair&lt;int, int&gt; 二元组"></a><code>pair&lt;int, int&gt;</code> 二元组</h3><p>类似结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first, 第一个元素</span><br><span class="line">second, 第二个元素</span><br><span class="line"></span><br><span class="line">支持比较运算，以first为第一关键字，以second为第二关键字（字典序）（帮我们实现了排序）</span><br></pre></td></tr></table></figure><hr><h3 id="queue-队列"><a href="#queue-队列" class="headerlink" title="queue, 队列"></a><code>queue</code>, 队列</h3><p>(没有清空函数)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>()</span><br><span class="line"><span class="built_in">empty</span>()</span><br><span class="line"><span class="built_in">push</span>()  向队尾插入一个元素</span><br><span class="line"><span class="built_in">front</span>()  返回队头元素</span><br><span class="line"><span class="built_in">back</span>()  返回队尾元素</span><br><span class="line"><span class="built_in">pop</span>()  弹出队头元素</span><br></pre></td></tr></table></figure><hr><h3 id="priority-queue-优先队列"><a href="#priority-queue-优先队列" class="headerlink" title="priority_queue, 优先队列"></a><code>priority_queue</code>, <strong>优先队列</strong></h3><p>默认是大根堆(用堆；来实现的)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span> <span class="comment">// 引入头文件</span></span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; pq; <span class="comment">// 默认是大根堆</span></span><br><span class="line"><span class="built_in">size</span>()</span><br><span class="line"><span class="built_in">empty</span>()</span><br><span class="line"><span class="built_in">push</span>()  插入一个元素</span><br><span class="line"><span class="built_in">top</span>()  返回堆顶元素</span><br><span class="line"><span class="built_in">pop</span>()  弹出堆顶元素</span><br><span class="line">    </span><br><span class="line">定义成小根堆的方式：</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;</span><br></pre></td></tr></table></figure><hr><h3 id="stack-栈"><a href="#stack-栈" class="headerlink" title="stack, 栈"></a><code>stack</code>, 栈</h3><p> (优先队列跟栈类似)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>()</span><br><span class="line"><span class="built_in">empty</span>()</span><br><span class="line"><span class="built_in">push</span>()  向栈顶插入一个元素</span><br><span class="line"><span class="built_in">top</span>()  返回栈顶元素</span><br><span class="line"><span class="built_in">pop</span>()  弹出栈顶元素</span><br></pre></td></tr></table></figure><hr><h3 id="deque-双端队列"><a href="#deque-双端队列" class="headerlink" title="deque, 双端队列"></a><code>deque</code>, 双端队列</h3><p>(加强版的vector)，但效率较低</p><p>头尾都可以插入或删除</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>()</span><br><span class="line"><span class="built_in">empty</span>()</span><br><span class="line"><span class="built_in">clear</span>()</span><br><span class="line"><span class="built_in">front</span>()/<span class="built_in">back</span>()</span><br><span class="line"><span class="built_in">push_back</span>()/<span class="built_in">pop_back</span>()</span><br><span class="line"><span class="built_in">push_front</span>()/<span class="built_in">pop_front</span>()</span><br><span class="line"><span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">[] <span class="comment">// 支持随机访问</span></span><br></pre></td></tr></table></figure><hr><h3 id="set-map-multiset-multimap-哈希表"><a href="#set-map-multiset-multimap-哈希表" class="headerlink" title="set, map, multiset, multimap 哈希表"></a><code>set, map, multiset, multimap</code> 哈希表</h3><p> 基于平衡二叉树（红黑树实现），动态维护有序序列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>()</span><br><span class="line"><span class="built_in">empty</span>()</span><br><span class="line"><span class="built_in">clear</span>()</span><br><span class="line"><span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">++, -- 返回前驱和后继，时间复杂度 <span class="built_in">O</span>(logn)</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">### `set/multiset`</span><br><span class="line"></span><br><span class="line"> 区别：set不能有重复元素</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line"><span class="built_in">insert</span>()  插入一个数</span><br><span class="line"><span class="built_in">find</span>()  查找一个数</span><br><span class="line"><span class="built_in">count</span>()  返回某一个数的个数</span><br><span class="line">    </span><br><span class="line"><span class="built_in">erase</span>() </span><br><span class="line">两种参数：</span><br><span class="line">(<span class="number">1</span>) 输入是一个数x，删除所有<span class="function">x   <span class="title">O</span><span class="params">(k + logn)</span>， k是x的个数</span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">2</span>)</span> 输入一个迭代器，删除这个迭代器</span></span><br></pre></td></tr></table></figure><hr><h3 id="lower-bound-upper-bound"><a href="#lower-bound-upper-bound" class="headerlink" title="lower_bound()/upper_bound()"></a><code>lower_bound()/upper_bound()</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lower_bound</span>(x)  返回大于等于x的最小的数的迭代器  <span class="comment">// 一般升序使用</span></span><br><span class="line"><span class="built_in">upper_bound</span>(x)  返回大于x的最小的数的迭代器</span><br></pre></td></tr></table></figure><hr><h3 id="map-multimap"><a href="#map-multimap" class="headerlink" title="map/multimap"></a><code>map/multimap</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">insert</span>()  插入的数是一个pair,两个数</span><br><span class="line"><span class="built_in">erase</span>()  输入的参数是pair或者迭代器</span><br><span class="line"><span class="built_in">find</span>()</span><br><span class="line">[]  注意multimap不支持此操作。 时间复杂度是 <span class="built_in">O</span>(logn)</span><br><span class="line"><span class="built_in">lower_bound</span>()/<span class="built_in">upper_bound</span>()</span><br></pre></td></tr></table></figure><hr><h3 id="unordered-set-unordered-map-unordered-multiset-unordered-multimap-哈希表"><a href="#unordered-set-unordered-map-unordered-multiset-unordered-multimap-哈希表" class="headerlink" title="unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表"></a><code>unordered_set, unordered_map, unordered_multiset, unordered_multimap</code>, 哈希表</h3><p><strong>好处：和上面类似，增删改查的时间复杂度是 O(1)</strong></p><p>区别：不支持 lower_bound()/upper_bound() 的排序操作， 迭代器的++，–</p><hr><h3 id="bitset-圧位"><a href="#bitset-圧位" class="headerlink" title="bitset, 圧位"></a><code>bitset</code>, 圧位</h3><p>（位存储，状态压缩），可以省存储空间（省8位空间，节省1/8存储）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bitset&lt;10000&gt; s;</span><br><span class="line">~, &amp;, |, ^</span><br><span class="line">&gt;&gt;, &lt;&lt;</span><br><span class="line">==, !=</span><br><span class="line">[] <span class="comment">// 取出来每一位</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">count</span>()  返回有多少个<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">any</span>()  判断是否至少有一个<span class="number">1</span></span><br><span class="line"><span class="built_in">none</span>()  判断是否全为<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>()  把所有位置成<span class="number">1</span></span><br><span class="line"><span class="built_in">set</span>(k, v)  将第k位变成v</span><br><span class="line"><span class="built_in">reset</span>()  把所有位变成<span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">flip</span>()  等价于~</span><br><span class="line"><span class="built_in">flip</span>(k) 把第k位取反</span><br></pre></td></tr></table></figure><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3598249/">【文档：C++语法基础 第8讲 常用STL】</a></p><p><a href="https://blog.csdn.net/m0_73896521/article/details/128153203">【文档：从c语言到c++（stl容器/stl函数总结）】</a></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/488704/">【视频：1.8 STL、位运算、常用库函数 - 49min左右】</a></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/4799/">【视频：第二章 数据结构（三）常用STL 1h10min左右】</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础 第五讲 Git</title>
      <link href="/posts/43cd.html"/>
      <url>/posts/43cd.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux基础-第五讲-Git"><a href="#Linux基础-第五讲-Git" class="headerlink" title="Linux基础 第五讲 Git"></a>Linux基础 第五讲 Git</h2><h2 id="1-Git教程"><a href="#1-Git教程" class="headerlink" title="1.Git教程"></a>1.Git教程</h2><p><a href="git.acwing.com">AcWing代码托管平台</a></p><p><a href="https://learngitbranching.js.org/?locale=zh_CN">Git可视化学习网站-游戏</a></p><p><a href="https://gitee.com/all-about-git">Git大全 - 教程综合</a></p><hr><h3 id="1-1-Git基本概念"><a href="#1-1-Git基本概念" class="headerlink" title="1.1 Git基本概念"></a>1.1 Git基本概念</h3><p>Git 是一个版本控制工具，可以记录我们每次提交到 Git 中的版本，便于版本控制；上传到云端可以对本地的Git版本进行存档，以及进行多人协作开发。</p><p><strong>Git是用树的结构来维护所有的版本记录，最开始节点是一个空的根节点。</strong></p><p><strong>HEAD根节点会始终指向最新提交的那个节点</strong>。</p><p>概念</p><p><strong>工作区：仓库的目录</strong>。</p><p><strong>暂存区</strong>：<strong>数据暂时存放的区域</strong>，<strong>类似于工作区写入版本库前的缓存区</strong>。</p><p>工作区、暂存区都是独立于各个分支的。</p><p><strong>版本库：存放所有已经提交到本地仓库的代码版本。</strong></p><p><strong>版本结构：树结构，树中每个节点代表一个代码版本。</strong></p><hr><h3 id="1-2-Git常用命令"><a href="#1-2-Git常用命令" class="headerlink" title="1.2 Git常用命令"></a>1.2 Git常用命令</h3><p><strong>个人开发最最最最常用的4个git命令！！！</strong>只使用<code>master</code>分支即可</p><p><code>git pull</code>        <code>git add .</code>          <code>git commit -m &quot;xxx&quot;</code>        <code>git push</code></p><hr><p><strong>协作开发会用到的命令！！</strong></p><h4 id="Git全局配置"><a href="#Git全局配置" class="headerlink" title="Git全局配置"></a>Git全局配置</h4><p>在使用Git服务之前，你需要进行全局配置</p><p><code>git config --global user.name xxx</code>：设置全局用户名</p><p><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址</p><p>设置的信息记录会存储在<code>~/.gitconfig</code>文件中</p><p><strong>开始使用的流程，</strong></p><p>注意！！！<code>github</code>的默认分支名为<code>main</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -M main # 修改本地的分支名(master --&gt; main)</span><br><span class="line">git push -u origin main # 将本地分支上传至云端</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230708003343580.png" alt="image-20230708003343580" style="zoom: 60%;" /><hr><h4 id="Git常用操作"><a href="#Git常用操作" class="headerlink" title="Git常用操作"></a>Git常用操作</h4><p>你需要新建一个项目目录 eg. <code>project/</code>，</p><p><code>git init</code>：将当前目录配置成git仓库，信息记录在隐藏的<code>.git</code>文件夹中</p><p>目录里的文件被修改后，<strong>需要将文件从工作区添加到暂存区并进行持久化</strong></p><p><code>git add XXX</code>：单独将XXX文件添加到暂存区,可添加多个文件或目录，用空格隔开</p><p>这两个命令，通常一起使用</p><p><code>git add .</code>：<strong>将所有待加入暂存区的文件加入暂存区</strong></p><p><code>git commit -m &quot;这次提交的备注信息&quot;</code>：<strong>将暂存区的内容提交到当前分支,进行持久化</strong></p><p><code>git status</code>：<strong>查看当前仓库状态</strong></p><p><code>git diff XXX</code>：查看XXX文件的工作区相对于暂存区对应的文件的差异</p><p><code>git diff HEAD</code>:  显示工作区与当前分支最新commit提交之间的差异</p><p><code>git log</code>：<strong>查看当前分支的所有版本</strong>，按<code>q</code>退出查看状态</p><p><code>git log --oneline</code> 或 <code>git log --pretty=oneline</code>：让日志格式化显示在一行</p><p>HEAD会指向最后一次持久化操作的节点，<strong>即HEAD指向最新的版本</strong></p><p><code>git log --stat</code>：显示 commit 历史，以及每次 commit 发生变更的文件</p><hr><h4 id="删除-撤销命令"><a href="#删除-撤销命令" class="headerlink" title="删除/撤销命令"></a>删除/撤销命令</h4><p><code>git rm --cached XXX</code>：<strong>将文件从仓库索引目录中删掉</strong>，不希望管理这个文件</p><p>（将本地文件删除的话，<code>git rm XXX</code>,提交<code>commit</code>后，再<code>git push</code>）</p><p><code>git restore --staged XXX</code>：<strong>将XXX从暂存区里移除，文件内容不会被修改</strong></p><p><code>git restore XXX</code>：<strong>可将暂存区的文件回滚</strong></p><p><code>git checkout — XXX</code> 或 <code>git restore XXX</code>：将XXX文件<strong>尚未加入暂存区的修改全部撤销，类似ctrl+z</strong></p><hr><h4 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a>代码回滚</h4><p><code>git reflog</code>：查看HEAD指针的移动历史（包括被回滚的版本）</p><p><code>git reset --hard HEAD^ </code> 或 <code>git reset --hard HEAD~</code>：将代码库回滚到上一个版本</p><ul><li><p><code>git reset --hard HEAD^^</code>：往上回滚两次”^^”，以此类推</p></li><li><p><code>git reset --hard HEAD~100</code>：往上回滚100个版本</p></li><li><p><code>git reset --hard 版本号</code>：回滚到某一特定版本(版本号是用<code>git log</code> 看到的commit前7位字符)</p></li></ul><hr><h4 id="创建-合并分支"><a href="#创建-合并分支" class="headerlink" title="创建/合并分支"></a>创建/合并分支</h4><p><code>git checkout -b branch_name</code>：<strong>创建并切换到<code>branch_name</code>这个分支</strong></p><p><code>git branch branch_name</code>：<strong>创建新分支<code>branch_name</code></strong></p><p><code>git checkout branch_name</code>：<strong>切换到<code>branch_name</code>这个分支</strong></p><p><code>git branch</code>：查看所有分支和当前所处分支</p><p><code>git branch -r </code>： -r，remote 查看所有远程分支</p><p><code>git branch -a</code>： -a，all 查看所有分支，包括本地分支和远程分支</p><p><code>git merge branch_name</code>：<strong>将分支<code>branch_name</code>合并到当前分支上</strong></p><p><strong>(若分支合并后有冲突，需要自己手动解决)</strong></p><p><code>git branch -d branch_name</code>：<strong>删除本地仓库的<code>branch_name</code>分支</strong></p><p><code>git pull</code>：<strong>将远程仓库的当前分支与本地仓库的当前分支合并，从云端拉回本地</strong></p><ul><li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li></ul><p>ps: 多人协作开发同一个分支时，<br>第一个人push提交后，第二个人也push提交了会有冲突，需要第二人先pull新版本后，合并本地修改冲突后，再push自己的代码。</p><hr><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>你需要再远程仓库创建一个仓库，并配置SSH将主机的公钥填写至远程仓库中。</p><p><code>git remote add origin SSH克隆的地址 </code>：将本地仓库关联到远程仓库</p><p>连接gitlab时，进行<code>git clone</code>时，出现<u>fatal: remote origin already exists.</u></p><p>需要先<code>git remote remove origin</code>，然后再关联远程仓库</p><p><code>git push -u </code>：(第一次需要-u，upstream上传流，以后不需要)，<code>git push</code><strong>将当前分支推送到远程仓库</strong></p><ul><li><code>git push origin branch_name</code>：<strong>将本地的某个分支推送到远程仓库</strong></li></ul><p><code>git clone git@git.acwing.com:xxx/XXX.git</code>：<strong>将远程仓库XXX下载到本地，比如用另一台电脑开发</strong></p><p><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</p><p><code>git push -d origin branch_name</code>：<strong>删除远程仓库的<code>branch_name</code>分支</strong></p><p>(<code>git branch -d branch_name</code>：<strong>删除本地仓库的<code>branch_name</code>分支</strong>)</p><p>​    </p><p><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：</p><p>将远程的<code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应，<strong>两分支名最好相同</strong></p><p><code>git checkout -t origin/branch_name </code>将远程的<code>branch_name</code>分支拉取到本地</p><hr><h4 id="Stash栈操作"><a href="#Stash栈操作" class="headerlink" title="Stash栈操作"></a>Stash栈操作</h4><p>使用 <code>Stash</code> 将我们目前工作区和暂存区中未提交的修改添加进去。等处理完一些线上的问题再把刚才的工作的文件从 <code>Stash</code> 中弹出来继续开发，</p><p><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</p><p><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</p><p><code>git stash drop</code>：删除栈顶存储的修改</p><p><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</p><p><code>git stash list</code>：查看栈中所有元素</p><hr><h3 id="1-3-其他"><a href="#1-3-其他" class="headerlink" title="1.3 其他"></a>1.3 其他</h3><p>小Tips:</p><p><strong>让vscode不显示git修改的文件</strong></p><p>问题所在：在项目最外层文件夹<code>git init</code>了，产生了一个<code>.git</code>文件。<br>解决方法：在终端进入最外层文件夹，输入命令：<code>rm -rf .git </code>，删除git相关配置文件</p><hr><h2 id="2-作业"><a href="#2-作业" class="headerlink" title="2.作业"></a>2.作业</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">homework 5 create  # 可以重新创建所有lesson_5的作业</span><br><span class="line">homework 5 test  # 可以评测lesson_5的所有作业</span><br></pre></td></tr></table></figure><p>注意： 本次作业的10个题目不是独立的，每个题目会依赖于前一个题目，因此评测时如果当前题目错误，则不再评测后续题目。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">创建好作业后，先进入文件夹/home/acs/homework/lesson_5/，然后：</span><br><span class="line"></span><br><span class="line">(0) 在当前目录下创建文件夹homework，并将homework目录配置成git仓库。后续作业均在homework目录下操作；</span><br><span class="line"></span><br><span class="line">(1) 创建文件readme.txt，内容包含一行：111；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line"></span><br><span class="line">(2) 在readme.txt文件末尾新增一行：222；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line"></span><br><span class="line">(3) 创建文件夹：problem1和problem2；</span><br><span class="line">创建文件problem1/main.cpp。文件内容为下述链接中的代码：https://www.acwing.com/problem/content/submission/code_detail/7834813/；</span><br><span class="line">创建文件problem2/main.cpp。文件内容为下述链接中的代码：https://www.acwing.com/problem/content/submission/code_detail/7834819/；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line"></span><br><span class="line">(4) 删除文件夹problem2；</span><br><span class="line">创建文件夹problem3；</span><br><span class="line">创建文件problem3/main.cpp。文件内容为下述链接中的代码：https://www.acwing.com/problem/content/submission/code_detail/7834841/；</span><br><span class="line">将readme.txt中最后一行222删掉，然后添加一行333；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line"></span><br><span class="line">(5) 在https://git.acwing.com/上注册账号并创建仓库，仓库名称为homework；</span><br><span class="line">将本地git仓库上传到AC Git云端仓库；</span><br><span class="line"></span><br><span class="line">(6) 创建并切换至新分支dev；</span><br><span class="line">在readme.txt文件中添加一行444；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line">将dev分支推送至AC Git远程仓库；</span><br><span class="line"></span><br><span class="line">(7) 切换回master分支；</span><br><span class="line">在readme.txt文件中添加一行555；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line"></span><br><span class="line">(8) 将dev分支合并到master分支；</span><br><span class="line">手动处理冲突，使readme文件最终内容包含4行：111、333、555、444；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line"></span><br><span class="line">(9) 将master分支的版本库push到AC Git云端仓库；</span><br><span class="line">登录myserver服务器（4. ssh作业中配置的服务器）；</span><br><span class="line">创建并清空文件夹：~/homework/lesson_5/；</span><br><span class="line">将AC Git云端仓库clone到~/homework/lesson_5/中；</span><br></pre></td></tr></table></figure><hr><h4 id="作业打卡地址"><a href="#作业打卡地址" class="headerlink" title="作业打卡地址"></a>作业打卡地址</h4><p>待完成~~</p><hr><h2 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3.参考资料"></a>3.参考资料</h2><p><a href="https://www.acwing.com/activity/content/57/">Linux基础课及讲义 - AcWing</a></p><p><a href="https://tonngw.com/2022/04/03/AcWing/%E7%AC%AC%205%20%E8%AE%B2%20Git/#10-Stash-%E6%93%8D%E4%BD%9C">Linux基础课 - 第 5 讲 Git - by Toggle</a></p><p><a href="https://www.acwing.com/blog/content/33309/">Linux笔记 5 - Git - by 溯光</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习与数据挖掘 刷题练习(复习版)</title>
      <link href="/posts/b9aa.html"/>
      <url>/posts/b9aa.html</url>
      
        <content type="html"><![CDATA[<h2 id="机器学习与数据挖掘-刷题练习-复习版"><a href="#机器学习与数据挖掘-刷题练习-复习版" class="headerlink" title="机器学习与数据挖掘 刷题练习(复习版)"></a>机器学习与数据挖掘 刷题练习(复习版)</h2><p>闲言碎语：</p><p>本文是自己在准备数据挖掘结课考试时，自己整理的学习笔记，放在这存个档。</p><p>这门课我只是较为浅显的知道了一些理论概念，不过这门课的知识实践需要花费较多的时间和精力，是我本专业必</p><p>学的一门核心课，以后我可能还能用上哈~~</p><h2 id="一、单选题及判断"><a href="#一、单选题及判断" class="headerlink" title="一、单选题及判断"></a>一、单选题及判断</h2><hr><h3 id="1-数据"><a href="#1-数据" class="headerlink" title="1.数据"></a><strong>1.数据</strong></h3><p>1.不属于<u>数据的属性类型</u>的是，<strong>相异</strong></p><p>数据的属性类型包括<u>标称、序数、区间和比率等四种</u></p><p>2.原始数据<u>存在的几个问题</u>不包括，<strong>不重复</strong></p><p><strong>数据挖掘(Data Mining)就是从大量的、不完全的、有噪声的、模糊的</strong>、随机的实际应用数据中,提取隐含在其中的、人们事先不知道的、但又是潜在有用的信息和知识的过程</p><p><strong>对于数据挖掘中的原始数据，存在的问题有</strong>？ABCD</p><p><strong>A. 不一致    B. 重复    C. 不完整    D. 含噪声</strong></p><p>3.数据挖掘中使用的数据的原则不包括，<strong>保留唯一性</strong></p><p>4.<strong>数据预处理的效果</strong>直接决定了机器学习的结果质量</p><p>5.噪声数据的产生原因主要有？ABC</p><ul><li><strong>A. 数据采集设备有问题</strong></li><li><strong>B. 在数据录入过程中发生了人为或计算机错误</strong></li><li><strong>C. 数据传输过程中发生错误</strong></li></ul><p>6.数据挖掘的任务包含（ ABCDE）</p><ul><li><strong>A. 关联分析</strong></li><li><strong>B. 时序模式分析</strong></li><li><strong>C. 聚类</strong></li><li><strong>D. 分类</strong></li><li><strong>E. 偏差检测</strong> </li></ul><p>7.在数据集成时，来自多个数据源的现实世界实体的表达形式是不一样的，不一定是匹配的，<u>要考虑实体识别问题和属性冗余问题，从而把源数据在最低层上加以转换、提炼和集成。</u> <strong>A. 对</strong></p><p>8.给定 n 个数据点，如果其中一半用于训练，另一半用于测试，则训练误差和测试误差之间的差别会<strong>随着 n的增加而减小</strong>。 <strong>A. 对</strong></p><p>9.知识发现（KDD）包含<u>数据准备、数据挖掘、结果评价</u>三个阶段。 <strong>对的</strong></p><p>10.<u>通过数据规约</u>，可以达到（  ABC ） </p><ul><li><strong>A. 降低无效、错误数据对建模的影响，提高建模的准确性</strong></li><li><strong>B. 少量且具代表性的数据将大幅缩减数据挖掘所需的时间</strong></li><li><strong>C. 降低储存数据的成本</strong></li></ul><p>11.<strong>数据预处理方法</strong>主要有？ABCD</p><ul><li><strong>A. 数据清洗</strong></li><li><strong>B. 数据集成</strong></li><li><strong>C. 数据变换</strong></li><li><strong>D. 数据归约</strong></li></ul><p>11.1数据挖掘的<u>数据准备阶段</u>的主要工作包含（ ABCDE）。</p><ul><li><strong>A. 消除噪声</strong></li><li><strong>B. 推导计算缺值数据</strong></li><li><strong>C. 消除重复记录</strong></li><li><strong>D. 数据转换</strong></li><li><strong>E. 消减数据维数或降维</strong></li></ul><p>13.<strong>特征选择可以？****ABC</strong></p><ul><li><strong>A. 选择区分能力强的数据</strong></li><li><strong>B. 降低模型分析的时间复杂度</strong></li><li><strong>C. 减少无效特征</strong></li></ul><p>14.<strong>信息增益度量</strong>偏向具有许多输出的测试，也就是说它<strong>倾向于选择具有大量值的属性</strong>。 <strong>A. 对</strong></p><hr><h3 id="2-数据仓库"><a href="#2-数据仓库" class="headerlink" title="2.数据仓库"></a><strong>2.数据仓库</strong></h3><p>1.以下各项均是针对数据仓库的不同说法,你<strong>认为正确的有</strong>，ABCD</p><ul><li><u>B. 数据仓库是一切商业智能系统的基础</u></li><li><u>C. 数据仓库是面向业务的,支持联机事务处理(OLTP)</u></li><li><u>D. 数据仓库支持决策而非事务处理</u></li><li><u>E. 数据仓库的主要目标就是帮助分析,做长期性的战略制定</u></li></ul><p>2.关于OLAP和OLTP的说法,<strong>下列不正确的是</strong>(   A   ) </p><ul><li><strong>A.  OLAP事务量大,但事务内容比较简单且重复率高.</strong></li><li>B. OLAP的最终数据来源与OLTP不一样.</li><li>C. OLTP面对的是决策人员和高层管理人员.</li><li>D. OLTP以应用为核心,是应用驱动的.</li></ul><p>3.<strong>OLAP技术的核心是，多维分析</strong></p><p>4<u>.数据仓库是随着时间变化的,下面的描述不正确的是</u>(  C   ) </p><ul><li><p>A. 数据仓库随时间的变化不断增加新的数据内容;</p></li><li><p>B. 捕捉到的新数据会覆盖原来的快照;</p></li><li><p><strong>C. 数据仓库随事件变化不断删去旧的数据内容;</strong></p></li><li><p>D. 数据仓库中包含大量的综合数据,这些综合数据会随着时间的变化不断地进行重新综合</p></li></ul><hr><h3 id="3-机器学习方法"><a href="#3-机器学习方法" class="headerlink" title="3.机器学习方法"></a><strong>3.机器学习方法</strong></h3><p>1.<strong>移动运营商对客户的流失进行预测</strong>,可以使用下面哪种机器学习方法比较合适 ,   <strong>多层前馈网络</strong></p><p>2.下列哪些模型可以用来判断特征的重要性？（ <strong>ABDE</strong>   ） </p><ul><li><strong>A. 随机森林（Random Forest）</strong></li><li><strong>B. 线性回归（Linear Regression）</strong></li><li>C. 支持向量机（SVM）</li><li><strong>D. 方差分析（ANOVA）</strong></li><li><strong>E. 逻辑回归（LogisticRegression）</strong></li></ul><p>​                                            </p><p>3.<strong>机器学习</strong>是<u>人工智能里面一个非常重要的<strong>技术</strong></u>，<strong>深度学习</strong>是<u>机器学习里面的一种方法</u>。 <strong>A. 对</strong></p><p>4.下列哪些<strong>机器学习算法不需要做归一化处理</strong>(  CE    )</p><ul><li><strong>C. DecisionTree 决策树</strong></li><li><strong>E. Naive Bayes classifier 贝叶斯</strong></li></ul><p>5.<u>泛化能力是机器学习中衡量学习机性能好坏的一个重要指标</u>，主要是指学习机对预测样本<strong>进行正确预测的能力</strong>。<strong>A. 对</strong></p><hr><h3 id="4-装袋"><a href="#4-装袋" class="headerlink" title="4.装袋"></a><strong>4.装袋</strong></h3><p>1.<strong>Bagging</strong>的主要特点有，   ABD</p><p> <strong>A. 各基础分类器并行生成   B. 各基础分类器权重相同  D. 基于Bootstrap采样生成训练集</strong></p><p>2.对<strong>Boosting模型</strong>的描述正确的是，</p><p><strong>A.  采用串行训练模式    C.  通过改变训练集进行有针对性的学习</strong></p><p>3.<u>装袋法中每个样本被选中概率相同</u>,所以噪声数据的影响下降,<u>容易受过拟合的影响</u>( ) <strong>错误</strong></p><hr><h3 id="5-决策树"><a href="#5-决策树" class="headerlink" title="5.决策树"></a><strong>5.决策树</strong></h3><p>1.决策树中属性选择的方法有？BCD</p><p><strong>B. 信息增益 C. 信息增益率 D. GINI系数</strong></p><p>2.下面的决策树中，不能解决回归问题的是？ABC</p><p><strong>A. ID3 B. C4.5 C. C5.0</strong></p><p>3.0决策树模型<strong>不适合</strong>训练集数据量较大的情况。<strong>错的</strong></p><p>3.1<u>决策树不擅长处理非数值型数据</u>。<strong>错的</strong></p><p>3.2<u>逻辑回归分析需要对离散值做预处理</u>，决策树则不需要。( ）<strong>A. 对</strong></p><p>3.3决策树算法<strong>只能处理二分类</strong>，不能处理多分类。 <strong>错的</strong></p><p>4.DecisionTreeClassifier实现了决策树的构建，下列说法正确的有（ <strong>ABCD</strong> ） </p><ul><li><strong>A. 参数criterion的取值有gini，entropy两种。</strong></li><li><strong>B. 参数max_depth限定了决策树的最大深度，对于防止过拟合非常有用。</strong></li><li><strong>C. 参数min_samples_leaf 限定了叶子结点包含的最小样本数。</strong></li><li><strong>D. gini越小，表示纯度越高。</strong></li></ul><p>5.<u>有关决策树的分类方法</u>正确的是( B )。</p><p><strong>B.决策树可以用于发现多种样本的特征</strong></p><p>6.逻辑回归分析需要<strong>对离散值做预处理</strong>，决策树则不需要。( ）    <strong>A. 对</strong></p><hr><h3 id="6-随机森林"><a href="#6-随机森林" class="headerlink" title="6.随机森林"></a><strong>6.随机森林</strong></h3><p>1.下面哪些<u>超参数的增加可能会造成随机森林数据过拟合</u>？<strong>A. 树的数量  B. 树的深度</strong></p><p>2.下列关于**<u>随机森林的描述正确</u>**的是(ABCD)。</p><ul><li><strong>A.  与袋装法采用相同样本抽取方式</strong></li><li><strong>B.  每次从所有属性中随机抽取t个属性来训练分类器</strong></li><li><strong>C.  每次从所有样本中选取一定比例的样本来训练分类器</strong></li><li><strong>D.  可以使用不同的决策树的组合来构建分类模型</strong></li></ul><hr><h3 id="7-分类"><a href="#7-分类" class="headerlink" title="7.分类"></a><strong>7.分类</strong></h3><p>1.<strong>分类算法有C4.5</strong></p><p><strong>常用的分类算法包括</strong>（  ABCD），</p><p><strong>A. 决策树 B. 支持向量机 C. 贝叶斯网络 D. 神经网络</strong></p><p><u>解决分类问题的方法</u>包括？ <strong>ABCD</strong></p><p><strong>A. 决策树    B. 贝叶斯    C. 人工神经网络    D. 支持向量机</strong></p><p>2.以下属于<u>分类器评价或比较尺度</u>的有:     </p><p>​    <strong>A.预测准确度</strong><br>​    <strong>C.模型描述的简洁度</strong><br>​    <strong>D.计算复杂度</strong></p><p>3.哪些<u>不是最近邻分类器的特点</u>，</p><p><strong>C.  最近邻分类器基于全局信息进行预测</strong></p><p>4.通过<strong>聚集多个分类器的预测</strong>来提高分类准确率的技术称为， <strong>组合(ensemble)</strong></p><p>5.**<u>评估分类器预测能力的度量包括</u>**（      ） </p><ul><li><strong>A. 准确率</strong></li><li><strong>B. 灵敏度(又称为召回率)</strong></li><li><strong>C. 特效性</strong></li><li><strong>D. 精度</strong></li><li><strong>E. F1和Fβ</strong></li></ul><p>6.在评价<strong>不平衡类问题分类的度量方法</strong>有如下几种,( )</p><p><strong>A. F1度量</strong><br><strong>B. 召回率(recall)</strong><br><strong>C. 精度(precision)</strong><br><strong>D. 真正率(ture positive rate,TPR)</strong></p><p>7.一般来说，回归不用在分类问题上，但是也有特殊情况，<u>比如logistic 回归可以用来解决0/1分类问题。（  ）</u> <strong>A. 对</strong></p><p>8.<strong>分类是有监督的学习，聚类是无监督的学习</strong></p><p>9.<strong>受试者操作特征曲线</strong>(Receiver Operating Characteristic Curve，<strong>ROC</strong>)是一种反映分类模型敏感性和特异性连续变量的综合，<u>ROC的横坐标，纵坐标分别表示（        ）</u></p><p><strong>A. 假正例率（FPR），真正例率（TPR）</strong></p><p><strong>E. 假阳率（特异度），真阳率（灵敏度）</strong></p><p>10.<strong>组合方法</strong>可以通过学习和组合一系列个体（基）<strong>分类器模型</strong>来提高总体准确率，主要的组合方法有（   ABC  ）。 </p><p><strong>A. 装袋    B. 提升    C. 随机森林</strong></p><p>11.在谈到分类时，<u>数据元组</u>也称为？ABCD</p><ul><li><p><strong>A. 样本</strong></p></li><li><p><strong>B. 实例</strong></p></li><li><p><strong>C. 数据点</strong></p></li><li><p><strong>D. 对象</strong></p></li></ul><p>12.<u>数据分类是一个两阶段过程</u>，包括（ ）和分类阶段。<strong>学习阶段</strong></p><p>13.<u>分类器的构造与评估需要把标记的数据集划分成训练集和检验集</u>，典型方法包含（   ABCD  ）。 </p><ul><li><strong>A. 保持</strong></li><li><strong>B. 随机抽样</strong></li><li><strong>C. 交叉验证</strong></li><li><strong>D. 自助法</strong></li></ul><p>14.对回归问题和分类问题的评价 <strong>最常用的指标都是准确率和召回率</strong>。<strong>错误</strong></p><p>15.<strong>输出变量为有限个离散变量的预测问题</strong>是回归问题；输出变量<strong>为连续变量的预测问题是</strong>分类问题。<strong>B.错误</strong></p><p>15.1分类和回归都可用于预测，<strong>分类的输出是离散的类别值</strong>，而回归的输出是是连续值。 <strong>A. 对</strong></p><p>16.<strong>朴素贝叶斯算法</strong>是基于贝叶斯定理与特征条件独立假设的<strong>分类方法</strong>。<strong>A.对的</strong></p><p>17.<u>模型选择方法</u>主要有(     <strong>AB</strong>       )。</p><ul><li><strong>A. 正则化（Regularization）</strong></li><li><strong>B. 交叉验证（Cross Validation）</strong></li></ul><p>18.<strong>分类</strong>是预测数据对象的<u>离散类别</u>，<strong>预测</strong>是用于数据对象的<u>连续取值</u>。<strong>A. 对</strong></p><p>19.在分类型机器学习过程中,下面有关分类算法的选择<strong>说法错误的</strong>是( AD)。</p><ul><li><strong>A. 算法参数是默认调好的,分析过程不需要修改</strong></li><li>B. 分类算法的优劣需要通过实验比较才能确定</li><li>C. 分类算法对数据有一定的要求,一种算法不能解决所有的分类问题</li><li><strong>D. 分类算法的结果只要训练样本准确度高就可以使用了</strong></li></ul><hr><h3 id="8-聚类"><a href="#8-聚类" class="headerlink" title="8.聚类"></a><strong>8.聚类</strong></h3><p>1.当不知道数据所带标签时，可以使用哪种技术<strong>促使带同类标签的数据与带其他标签的数据相分离</strong>？<strong>（聚类）</strong></p><p>2.如何衡量聚类质量，<strong>需要考虑数据点间的连通性</strong></p><p>3.哪种聚类方法可以提供聚类树形图，<strong>层次聚类</strong></p><p>4.通过以下哪些指标我们可以<u>在层次聚类中寻找两个集群之间的差异</u>？ABC</p><p><strong>A. 单链 B. 完全链接 C. 平均链接</strong></p><p>5.聚类分析中，<strong>簇间距离可以定义为</strong>（ ABCD）</p><ul><li><u>A. 最短距离法（最大相似度）</u></li><li><u>B. 最长距离法（最小相似度）</u></li><li><u>C. 类平均法</u></li><li><u>D. 中心法（两类的两个中心点的距离为簇间距离）</u></li></ul><p><u>6.聚类系数的外部指标是指将聚类结果</u>和某个“参考模型”进行比较。<strong>A. 对</strong></p><p>7.<em><strong>DBSCAN</strong></em>(Density-Based Spatial Clustering of Applications with Noise)</p><p><strong>DBSCAN是一个比较有代表性的基于密度的聚类算法。</strong></p><p>DBSCAN在最坏情况下的<u>时间复杂度是，**$O(m^2)$**</u></p><p><u>DBSCAN是相对抗噪声的，并且能够处理任意形状和大小的簇</u>。<strong>对的</strong></p><p>7.1 使用Python的sklearn.cluster库中的<strong>DBSCAN算法进行聚类的时候</strong>，<u>参数eps和min_samples的描述正确的是（ ）。</u></p><ul><li><p><strong>B. eps越小，聚出来的类越多</strong></p></li><li><p><strong>C. min_samples越小，一个簇中包含的样本点越少</strong></p></li></ul><p>8.<strong>基于密度的聚类算法代表算法</strong>有（  ABC  ） </p><p><strong>A. DBSCAN算法    B. OPTICS算法    C. DENCLUE算法</strong></p><p>9.Python中<strong>层次聚类的函数</strong>是AgglomerativeClustering，<u>重要的参数包含</u>（  ABC ）。 </p><p><strong>A. n_clusters    B. affinity    C. linkage</strong></p><p>9.1层次聚类的函数AgglomerativeClustering中，<strong>linkage是类间距离的定义</strong>，其取值包含（ ABC） </p><ul><li><strong>A. ward</strong></li><li><strong>B. average</strong></li><li><strong>C. complete</strong></li></ul><p>10.哪些数据特性都是对聚类分析具有很强影响的。(   ABCD   )</p><ul><li><strong>A. 高维性</strong></li><li><strong>B. 规模</strong></li><li><strong>C. 稀疏性</strong></li><li><strong>D. 噪声和离群点</strong></li></ul><p>11.<strong>聚类分析</strong>是一种有监督的学习方法。<strong>B.错的</strong></p><p>12.<strong>影响聚类结果的主要因素有哪些</strong>（ ABCD ） </p><ul><li><strong>A. 分类准则</strong></li><li><strong>B. 相似性测度（度量）</strong></li><li><strong>C. 特征量选择</strong></li><li><strong>D. 量纲</strong></li></ul><p>13.<strong>层次聚类可分为“自顶向下”和“自底向上”</strong>两种策略；<strong>A.对的</strong></p><p>14.下列哪项<strong>不属于聚类分析的算法</strong>(D)</p><ul><li>A. K-Means</li><li>B. K-中心点</li><li>C. 系统聚类</li><li><strong>D. Apriori算法</strong></li></ul><p>15.某电商分析人员希望通过聚类方法定位代商家刷信用级别的违规者，以下哪些操作不应该进行？  BD</p><ul><li><strong>B. 对变量进行百分位秩转换</strong> </li><li><strong>D. 对变量进行分箱处理</strong> </li></ul><hr><h3 id="9-回归模型"><a href="#9-回归模型" class="headerlink" title="9.回归模型"></a><strong>9.回归模型</strong></h3><p>1.有关回归模型的系数,以下<strong>说法错误的是</strong>哪个(  B )。</p><p>A. 一元线性回归模型的系数可以使用最小二乘法求得<br><strong>B. 多元回归模型的系数可以使用梯度下降法求得</strong><br>C. 一元线性回归模型的系数大小和正负说明自变量对因变量的相对影响大小<br>D. 回归分析的目的是计算回归方程的系数,使得样本的输入和输出变量之间的关系能够合理拟合</p><p>2.回归分析中按照自变量和因变量的关系类型可以分为？（ <strong>AB</strong> ） </p><ul><li><strong>A. 线性回归分析</strong></li><li><strong>B. 非线性回归分析</strong></li></ul><p>3.线性模型的优点包括？（  <strong>ABCD</strong> ） </p><ul><li><strong>A. 形式简单、易于建模</strong></li><li><strong>B. 可解释性</strong></li><li><strong>C. 引入层级结构或高维映射</strong></li><li><strong>D. 线性模型中系数直观表达了各属性在预测中的重要性</strong></li></ul><p>4.(单选题)<strong>线性判别分析</strong>是一种（ A）的方法。<strong>A.降维</strong></p><p>5.对于非线性回归问题,以下说法<strong>错误的</strong>是哪个(A )。</p><ul><li><strong>A. 可以分别求单个自变量与因变量的回归方程,然后简单求这些方程的加权和</strong></li><li>B. 非线性回归方程的系数需要把其转化为线性回归方程才方便求解</li><li>C. 非线性回归模型的检验也可以使用R2</li><li>D. Logistic回归是一种典型的广义线性回归模型</li></ul><hr><h3 id="10-支持向量机SVM"><a href="#10-支持向量机SVM" class="headerlink" title="10.支持向量机SVM"></a><strong>10.支持向量机SVM</strong></h3><p>1.<u>线性SVM和一般线性分类器的区别</u>主要是，<strong>是否确保间隔最大化</strong></p><p>2.在SVM领域中，margin的含义是，<strong>间隔</strong></p><p>3.为什么通常要选择margin最大的分类器， <strong>望获得较低的测试误差</strong></p><p><u>4.SVM本身是应用于二分类的</u>，若处理多分类必须进行改进。</p><p>若采用**”one vs all”<strong>解决5分类问题，</strong>需要设计（5）个分类器**。 </p><p>若采用**”one vs one”<strong>解决5分类问题</strong>，需要设计（10）个分类器。**</p><p>4.1<strong>选择Logistic回归</strong>中的<strong>One-Vs-All</strong>方法中的哪个选项是真实的。（n&gt;2）</p><ul><li><strong>A. 需要在n类分类问题中适合n个模型</strong></li></ul><p>5.假设超平面为w<em>x+b=0，其margin的大小为（ ）。*<em>2/|w|</em></em></p><p>6.<u>支持向量</u>（support vectors）指的是（ ）,<strong>决定分类面可以平移的范围的数据点</strong></p><p>7.<u>支持向量机SVM</u>是一种（    ）算法  <strong>小样本下的统计机器学习</strong></p><p>8.在SVM当中，主要的运算形式是（ ）。<strong>向量内积</strong></p><p>9.（  ）是定义在特征空间上的、间隔最大、<u>支持核技巧的分类器</u>。 <strong>SVM支持向量机</strong></p><p>10.对于SVM，<u>在映射后的高维空间直接进行计算的主要问题是</u>，<strong>计算复杂度高</strong></p><p>11.以下关于<u>SVM支持向量机</u>的说法正确的是 （  )。</p><ul><li><strong>C. SVM方法简单，鲁棒性较好</strong></li><li><strong>D. SVM分类面取决于支持向量</strong></li></ul><p>12.<u>支持向量机是一个分类器</u>，超平面上的数据是支持向量，超平面以外的数据可以辅助分类。<strong>错的</strong></p><hr><h3 id="11-K-Means-K均值算法"><a href="#11-K-Means-K均值算法" class="headerlink" title="11.K-Means(K均值算法)"></a><strong>11.K-Means(K均值算法)</strong></h3><p>1.为了在K均值算法中找到簇的最优值，可以使用 <strong>Elbow法</strong>，关注的就是方差百分比</p><p>2.K均值聚类时，<u>初始化不良会导致收敛速度差</u> <strong>A. 对</strong></p><p>3.<u>可以试着运行不同的质心初始化算法</u>，可以获得和全局最小值有关的K均值算法的良好结果。<strong>A. 对</strong></p><p>4.在对数据集执行K均值聚类分析以后，你得到了下面的树形图。从树形图中不能得出那些结论呢？（    ） </p><p><img src="https://p.ananas.chaoxing.com/star3/origin/688fdc316ba97d6a0ca155d7da81a06e.png" alt="img"> </p><ul><li>A. 在聚类分析中有28个数据点</li><li>B. 被分析的数据点里最佳聚类数是4</li><li>C. 使用的接近函数是平均链路聚类</li><li><strong>D. 对于上面树形图的解释不能用于K均值聚类分析</strong></li></ul><p>5.K-means算法的缺点有（  ABCD  ）</p><ul><li><strong>A. 只有当簇均值有定义的情况下，k均值方法才能使用。</strong></li><li><strong>B. 用户必须首先给定簇数目。</strong></li><li><strong>C. 不适合发现非凸形状的簇，或者大小差别很大的簇。</strong></li><li><strong>D. 对噪声和离群点数据敏感。</strong></li></ul><p>6.K-Means聚类算法可大致分为以下几个步骤，步骤中说法错误的是（ C）</p><ul><li>A. 任意选取两个点作为两个簇的初始中心；</li><li>B. 对剩余的每个对象，根据其与各个簇中心的距离，将它赋给最近的簇对；</li><li><strong>C. 继续使用上步获得的簇中心；</strong></li><li>D. 重新计算数据集中每个点到两个簇中心的距离，根据其值进行重新分配。</li></ul><p>7.<u>应用K均值算法之前，特征缩放是一个很重要的步骤</u>。这是为什么呢（  A   ） </p><ul><li><strong>A. 在距离计算中，它为所有特征赋予相同的权重。</strong></li></ul><hr><h2 id="二、填空计算题"><a href="#二、填空计算题" class="headerlink" title="二、填空计算题"></a>二、填空计算题</h2><h3 id="1-相似性计算"><a href="#1-相似性计算" class="headerlink" title="1.相似性计算"></a>1.相似性计算</h3><h4 id="1-二值离散型属性的相似性计算方法（计算样本间的距离）"><a href="#1-二值离散型属性的相似性计算方法（计算样本间的距离）" class="headerlink" title="(1) 二值离散型属性的相似性计算方法（计算样本间的距离）"></a>(1) 二值离散型属性的相似性计算方法（计算样本间的距离）</h4><ol><li><p>10维特征的二值离散型属性样本A,B分别为A=[1 0 0 0 0 0 0 0 0 0],B=[1 0 0 0 0 0 1 0 0 1],A,B 的相似性SMC = （     ）。JC=（       ）</p><p><strong>0.2，2/3</strong></p></li><li><p>10维特征的二值离散型属性样本A,B分别为A=[1 0 0 1 0 0 0 0 0 0],B=[1 0 0 0 0 0 1 0 0 1],A,B 的相似性SMC = （     ）。JC=（       ）</p><p><strong>0.3，0.75</strong></p></li></ol><p>总结，自己画矩阵图计算即可</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230530205142358.png" alt="image-20230530205142358" style="zoom:50%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230530204529248.png" alt="image-20230530204529248" style="zoom:40%;" /><p><strong>SMC</strong>，简单匹配系数，用于对<strong>对称的</strong>二值离散型属性的样本间距离的计算</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230530204828716.png" alt="image-20230530204828716" style="zoom: 45%;" /><p><strong>Jaccard</strong>系数，<strong>不对称的</strong>二值离散型属性的样本间的距离计算</p><hr><h4 id="2-多值离散型属性的相似性计算"><a href="#2-多值离散型属性的相似性计算" class="headerlink" title="(2) 多值离散型属性的相似性计算"></a>(2) 多值离散型属性的相似性计算</h4><p>已知样本如下。<strong>简单匹配法计算x1,x4的相似性</strong>。d(x1,x4)= (             )</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/25250ad2a5a46d2d9b7957333f0cf52c.png" alt="img"></p><p>正确答案：<br>    (1) 1/3   看x1,x4这行，三个字段相同的值占(2/3) , 相似性为1-2/3==1/3</p><hr><h3 id="2-熵的计算"><a href="#2-熵的计算" class="headerlink" title="2.熵的计算"></a>2.熵的计算</h3><p>1.以下是目标变量在训练集上的 8 个实际值 [0,0,0,1,1,1,1,1]，<strong>目标变量的熵是？</strong>（   ） </p><p>A. -(5/8 log(5/8) + 3/8 log(3/8))</p><hr><h3 id="3-混淆矩阵的计算"><a href="#3-混淆矩阵的计算" class="headerlink" title="3.混淆矩阵的计算"></a>3.混淆矩阵的计算</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/bf1d46e5200ef467641431a7666f8aea.png" alt="img"></p><p>1.某分类器的混淆矩阵如上表，该分类器的<strong>误分率</strong>为 <strong>（FP+FN）主对角线</strong>,<strong>9%</strong></p><p>2.该分类器的<strong>查准率（Precision）</strong>为 ，<strong>P=TP/(TP+FP)<strong>，</strong>竖着看  30%</strong></p><p>3.该分类器的<strong>查全率</strong>（Recall）为，<strong>TP/(TP+FN) 查全率</strong>（召回率），<strong>横着看 60%</strong></p><hr><h3 id="4-K均值聚类方法"><a href="#4-K均值聚类方法" class="headerlink" title="4.K均值聚类方法"></a>4.K均值聚类方法</h3><p>1.假设你想用K均值聚类方法将7个观测值聚类到3个簇中，在第一次迭代簇之后，C1、C2、C3具有以下观测值： C1: {(2,2), (4,4), (6,6)} C2: {(0,4), (4,0)} C3: {(5,5), (9,9)} 在第二次迭代中，</p><p>01<strong>观测点（9，9）到集群质心C1的 Manhattan 距离是？A</strong></p><p><strong>C1:((2+4+6)/3, (2+4+6)/3)（4,4）和（9,9）的 Manhattan 距离是：（9-4）+（9-4）= 10。</strong></p><p>02如果继续进行第二次迭代，哪一个将成为集群的质心？A</p><ul><li><strong>A. C1: (4,4), C2: (2,2), C3: (7,7)</strong></li></ul><p>找到集群中数据点的质心 C1 = ((2+4+6)/3,(2+4+6)/3) = (4, 4)</p><p>找到集群中数据点的质心 C2 = ((0+4)/2, (4+0)/2) =(2, 2)</p><p>找到集群中数据点的质心 C3 = ((5+9)/2, (5+9)/2) =(7, 7)</p><p><strong>因此, C1: (4,4), C2: (2,2), C3: (7,7)</strong></p><hr><h3 id="5-分类器的正确率"><a href="#5-分类器的正确率" class="headerlink" title="5.分类器的正确率"></a>5.分类器的正确率</h3><p>1.设测试样本中，A类样本90个，B类样本10个。分类器C1将所有的测试样本都分成了A类。分类器C2将A类的90个样本分对了70个，将B类的样本分对了5个。C1的分类正确率为（　　），C2的分类正确率（    ）。（填写百分数形式，如：１０％）</p><p><strong>(1) ９０％    (2) ７５％</strong></p><p>C1的分类正确率为（　），正确的样本数/总样本数 —&gt;  90/100 == 90%</p><p>C2的分类正确率（    ）,  —&gt; (70+5)/100 == 75%</p><hr><h3 id="6-查准率、查全率计算"><a href="#6-查准率、查全率计算" class="headerlink" title="6.查准率、查全率计算"></a>6.查准率、查全率计算</h3><p>某局域网中有 A 类信息１４００条，B 类信息３００条，C 类信息３００条。科 技人员甲设计了搜索引擎，以搜索 A 类信息为目的，结果返回了 A 类信息７００条，B 类信 息２００条，C 类信息１００条。问该引擎的查准率为（ ），查全率为（ ）。 （填写百分数形式，如：１０％）</p><p><strong>70%，50%</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528175516024.png" alt="image-20230528175516024" style="zoom:50%;" /><p>该搜索引擎的**查准率 (竖着看)**为：70%（计算公式：查准率 = 检索到的相关信息数 / 检索到的全部信息数 × 100% = 700 / (700 + 200 + 100) × 100% = 70%）</p><p>该搜索引擎的**查全率 (横着看)**为：50%（计算公式：查全率 = 检索到的相关信息数 / 相关信息的总数 × 100% = 700 / 1400 × 100% = 50%）</p><hr><h2 id="三、重点大题"><a href="#三、重点大题" class="headerlink" title="三、重点大题"></a>三、重点大题</h2><h3 id="1-混淆矩阵"><a href="#1-混淆矩阵" class="headerlink" title="1.混淆矩阵"></a>1.混淆矩阵</h3><p><strong>题目</strong>：有20个样本，<strong>其中真实正例有10个，用p表示，负例有10个，用n表示</strong>。</p><p>Inst# 代表样本编号，Class代表样本真实的类别，Score表示利用模型得出每个测试样本<u>属于真实样</u></p><p><u>本的概率</u>。依次将Score概率从大到小排序，得到下表：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528174013113.png" alt="image-20230528174013113"></p><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p><u>1.画出Score阈值为0.5时的混淆矩阵，计算此时的F1度量值。</u></p><p><strong>分析：</strong></p><p>（1）Score阈值为0.5时的混淆矩阵</p><p><strong>在左侧：分类器预测为正的情况， 相反右侧是分类器预测为负的情况</strong>，具体值在图中数即可</p><p>要知道混淆矩阵如何写，各个值对应的含义</p><p>TP: 分类器预测为正，真实为正</p><p>FP: 分类器预测为正，真实为负</p><p>FN:分类器预测为负，真实为正</p><p>TN:分类器预测为负，真实为负</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528174335722.png" alt="image-20230528174335722" style="zoom: 80%;" /><hr><p>（2）<strong>F1度量值</strong>，F1是准确率和召回率的调和平均。</p><p>具体推导，</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528175516024.png" alt="image-20230528175516024" style="zoom:50%;" /><p>计算F1记住公式即可，</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528180320715.png" alt="image-20230528180320715" style="zoom: 25%;" /><p>  计算， </p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528180217478.png" alt="image-20230528180217478" style="zoom:60%;" /><p><strong>拓展：</strong></p><p>1的另一种出题方式，<u>不给出具体概率的情况。</u></p><p>现有20个样本，包括10个正例（横着看，真实正例：TP+FN），10个负例。<strong>当阈值为0.5时，分类器预测正例为10只，其中将4个反例预测为正例。</strong></p><p>试求出该分类结果的混淆矩阵和F1值。</p><p>分析：</p><p><u>其中将4个反例预测为正例</u>：（由一个值推出其他三个值）</p><p>预测器为正，真实为负，及FP=4 —-&gt; 其他值</p><p>共有20个样本：TP+FP+TN+FN=20;</p><p>10个正例：TP+FN=10； 10个反例：FP+TN=10；</p><p>预测正例为10：TP+FP=10；预测反例为10：FN+TN=10；</p><p>4个反例预测为正例：FP=4</p><hr><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><p><u>2.画出ROC 曲线。</u></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528181537402.png" alt="image-20230528181537402" style="zoom:80%;" /><p>补充：</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528181828459.png" alt="image-20230528181828459" style="zoom: 67%;" /><p><strong>FP:预测为正，真实为负的数量，  TP:预测为正，真实为正的数量</strong></p><p>ROC 曲线的横坐标为FPR，纵坐标为TPR。</p><p>FPR是错误预测为正确的概率**(假正率)<strong>，TPR是正确预测为正确的概率</strong>(真正率)**。 每个点坐标（FPR, TPR）</p><hr><p>0.9&lt;阈值&lt;=1时，没有样本被预测为正例，所有样本被预测为反例。所以FP=0，TP=0，得ROC坐标**(0,0)**。</p><p>0.8&lt;阈值&lt;=9时，样本1预测为正例，其他样本被预测为反例。其中，样本1为真实正例，所以FP=0，TP=1，得ROC坐标(0,0),**(0,0.1)**。</p><p>0.7&lt;阈值&lt;=8时，样本1-2预测为正例。其中，样本1,2为真实正例，所以FP=0，TP=2，得ROC坐标(0,0),(0,0.1),(0,0.2)。</p><p>0.6&lt;阈值&lt;=7时，样本1-3预测为正例。其中，样本1,2为真实正例，样本3为真实反例，所以FP=1，TP=2，得ROC坐标(0,0),(0,0.1),(0,0.2),**(0.1,0.2)**。</p><p>0.55&lt;阈值&lt;=0.6时，样本1-4预测为正例。其中，样本1,2,4为真实正例，样本3为真实反例，所以FP=1，TP=3，得ROC坐标(0,0),(0,0.1),(0,0.2),(0.1,0.2),**(0.1,0.3)**。</p><p>……</p><p>具体计算图如下：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528182846063.png" alt="image-20230528182846063"></p><p>结果：</p><p>ROC 曲线的<strong>横坐标为FPR，纵坐标为TPR</strong>。FPR是错误预测为正确的概率，TPR是正确预测为正确的概率。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528183035478.png" alt="image-20230528183035478"></p><hr><h3 id="2-决策树"><a href="#2-决策树" class="headerlink" title="2.决策树"></a>2.决策树</h3><p>（使用信息增益的方法）</p><p><strong>题目：</strong></p><p>使用信息增益方法，计算下表中的决策树</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528183238910.png" alt="image-20230528183238910"></p><p>根据类别（是否）这一列来计算，</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528183445889.png" alt="image-20230528183445889"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528183533928.png" alt="image-20230528183533928"></p><p><strong>考试推荐写法</strong></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528183635323.png" alt="image-20230528183635323"></p><p>其他特征信息增益，</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528183811110.png" alt="image-20230528183811110" style="zoom: 80%;" /><p>利用上述结果，由于特征A3（<strong>房子特征</strong>）的信息增益最大，<strong>所以选择特征A3作为根节点的特征</strong>。它将训练数据集D划分为<strong>两个子集D1（A3取值为“是”）</strong>和<strong>D2（A3取值为“否”）</strong>。</p><p><u>“房子特征=是”的样本都对应“类别=是”，达到终止条件</u>，只用计算D2这个分支即可</p><p>然后对D2从特征A1（年龄），特征A2（工作），特征A4（信贷情况）中选择新的特征，计算各个特征信息增益。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528184644145.png" alt="image-20230528184644145"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528184913760.png" alt="image-20230528184913760"></p><p>利用上述结果，<strong>由于特征A2（工作特征）的信息增益最大</strong>，所以选择特征A2作为否分支的根节点。它将训练数据集D2划分为<strong>两个子集D21（A2取值为“是”）和D22（A2取值为“否”）</strong>。<u>且每个分支都只有一种结果，所以决策树划分完毕。</u></p><p> 可以画出决策树，</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528185023821.png" alt="image-20230528185023821"></p><hr><h3 id="3-核函数"><a href="#3-核函数" class="headerlink" title="3.核函数"></a>3.核函数</h3><p><strong>题目：</strong></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528185158910.png" alt="image-20230528185158910"></p><p>带公式计算即可，</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528185223704.png"></p><hr><h3 id="4-SVM"><a href="#4-SVM" class="headerlink" title="4.SVM"></a>4.SVM</h3><p>支持向量机（SVM）的主要思想是<u>建立一个超平面作为决策曲面，使得正例和反例之间的隔离边缘被最大化。更精确说，支持向量机是结构风险最小化方法的近似实现。</u></p><p>题目：</p><p>带公式计算,</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528185526468.png" alt="image-20230528185526468"></p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>练习题整理自学习通的练习题，及桂电的&lt;&lt;机器学习&gt;&gt;课程答疑资料。</p>]]></content>
      
      
      <categories>
          
          <category> 数据挖掘与机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> 机器学习与数据挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23生产实习 大数据开发实训笔记合集 更新中...</title>
      <link href="/posts/5544.html"/>
      <url>/posts/5544.html</url>
      
        <content type="html"><![CDATA[<h2 id="23生产实习-大数据开发实训笔记合集-更新中…"><a href="#23生产实习-大数据开发实训笔记合集-更新中…" class="headerlink" title="23生产实习 大数据开发实训笔记合集 更新中…"></a>23生产实习 大数据开发实训笔记合集 更新中…</h2><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>感谢学校为本专业开展了线下的实训机会，千锋教育的倪讲师也是保姆级别的哈哈，且行且珍惜。</p><p>老师会从环境搭建，到上手完成一个简单的基于亚马逊平台的推荐系统。</p><p>用到的开发框架涉及，Hadoop、Zookeeper、Flume、Kafka、Scala、HBase、Spark、Hive等。</p><p><a href="http://10.200.21.35:8100/s/WJhg">用到的软件资源</a>，注意本实训用到的软件资源文件只对校友开放，如有需要可以联系作者。</p><p><strong>特别鸣谢：</strong>提供上课笔记的<strong>小李同学(LHW)，小王同学(WQK)</strong> 。Respect！！</p><p><strong>笔记正在更新中，如有内容遗漏或错误欢迎随时指正，可在评论区互动交流~</strong></p><hr><h3 id="笔记合集"><a href="#笔记合集" class="headerlink" title="笔记合集"></a>笔记合集</h3><p>点击链接，即可跳转到对应文章</p><p><a href="https://ariesfun.gitee.io/posts/a63b.html">Day01(0529) Hadoop运行环境搭建及配置</a></p><p><a href="https://ariesfun.gitee.io/posts/3d5e.html">Day02(0530) Hadoop核心技术</a></p><p><a href="https://ariesfun.gitee.io/posts/dd24.html">Day03(0531) Zookeeper的安装方式</a></p><p><a href="https://ariesfun.gitee.io/posts/34c8.html">Day04(0601) HDFS的API及字符统计案例 (CharCount)</a></p><p>未完待续。。。</p><p>笔记基本整理完毕，后续考虑会完善放出来…</p><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>笔记整理于千锋教育课堂讲义和代码，部分同学笔记及自己的小总结。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> 大数据框架 </tag>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23生产实习 Day04(06/01) HDFS的API及字符统计案例 (CharCount)</title>
      <link href="/posts/34c8.html"/>
      <url>/posts/34c8.html</url>
      
        <content type="html"><![CDATA[<h2 id="Day04-06-01-HDFS的API及字符统计案例-CharCount"><a href="#Day04-06-01-HDFS的API及字符统计案例-CharCount" class="headerlink" title="Day04(06/01) HDFS的API及字符统计案例 (CharCount)"></a>Day04(06/01) HDFS的API及字符统计案例 (CharCount)</h2><p><strong><a href="https://ariesfun.gitee.io/posts/5544.html">查看笔记合集</a></strong></p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="1-先开启Zookeeper服务"><a href="#1-先开启Zookeeper服务" class="headerlink" title="1.先开启Zookeeper服务"></a>1.先开启Zookeeper服务</h4><p>需要先开启3台虚拟机上的Zookeeper服务和Hadoop服务,你也可使用自动化脚本来执行此操作。</p><p>使用远程连接工具，连接到三台虚拟主机，<strong>先开启Zookeeper服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下命令需要在三台主机上同时执行</span></span><br><span class="line"></span><br><span class="line">cd /home/software/zookeeper-3.4.7/bin/ # 进入bin目录，运行里面的脚本文件</span><br><span class="line">sh zkServer.sh start # 开启zookeeper</span><br><span class="line">sh zkServer.sh status # 查看运行状态</span><br></pre></td></tr></table></figure><p><strong>若出现的Mode里，共有两个<code>follower</code>，一个<code>leader</code>，则说明服务是正常启动的。</strong></p><hr><h4 id="2-在第一个节点上，启动Hadoop服务"><a href="#2-在第一个节点上，启动Hadoop服务" class="headerlink" title="2.在第一个节点上，启动Hadoop服务"></a>2.在第一个节点上，启动Hadoop服务</h4><p><code>start-all.sh </code></p><p><strong>启动成功后，在三台主机上输入<code>jps</code>命令查看运行进行（BigData01，02，03对应的正确进程数应是8，7，6）。</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306022146489.png" alt="image-20230602214656983" style="zoom: 50%;" /><p>若进程数不够需要单独在该结点上进行相应配置，参照下图来启动相应的结点。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306022145996.png" alt="image-20230602214548554"></p><hr><h4 id="3-编写Zookeeper启动脚本"><a href="#3-编写Zookeeper启动脚本" class="headerlink" title="3.编写Zookeeper启动脚本"></a>3.编写Zookeeper启动脚本</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306040117010.png" alt="image-20230603212105722" style="zoom:50%;" /><p>在Linux本地创建 <code>zkServer</code> 文件夹，并编写脚本内容,</p><p>(便于同时启动三个节点上的Zookeeper服务，或者查看状态、关闭)</p><p><code>vim zk_start.sh</code>，完成后保存并退出</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032125134.png" alt="image-20230603212549972"></p><hr><p>复制出来，编写一个查看Zookeeper运行状态的脚本文件，</p><p><code>vim zk_start.sh</code> ，完成后保存并退出</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032128780.png" alt="img-202306032128780"></p><hr><p>进行脚本测试，下次启动Zookeeper就可以在只在一个节点执行脚本文件了，比较方便。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032131492.png" alt="img-202306032131492" style="zoom: 80%;" /><h4 id="4-该案例会用到IDE工具-IDEA"><a href="#4-该案例会用到IDE工具-IDEA" class="headerlink" title="4.该案例会用到IDE工具:IDEA"></a>4.该案例会用到IDE工具:<code>IDEA</code></h4><p>确保你的IDEA可以正常的创建JAVA项目，并且可以运行成功（已经配置好jdk1.8环境）</p><h3 id="一、HDFS的API编写"><a href="#一、HDFS的API编写" class="headerlink" title="一、HDFS的API编写"></a>一、HDFS的API编写</h3><p>打开IDEA，之前需要启动Zookeeper服务和Hadoop服务。</p><p>用IDEA新建一个<strong>Maven</strong>项目,</p><p><strong>用于在本地Windows环境上与HDFS文件系统进行交互。</strong></p><hr><h4 id="0-配置Maven环境依赖"><a href="#0-配置Maven环境依赖" class="headerlink" title="(0)配置Maven环境依赖"></a>(0)配置Maven环境依赖</h4><p>新建一个<code>HDFS-Demo</code>，保证是<strong>Maven项目</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032135410.png" alt="img-202306032135410" style="zoom: 67%;" /><p>右键选择<code>quickstart</code>骨架，进行下一步创建。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032138523.png" alt="img-202306032138523" style="zoom:80%;" /><hr><p>打开IDEA的设置界面，配置Maven的本地路径，(将<code>maven3.6.zip</code>压缩包解压到指定的文件路径下)</p><p>更改Maven的本地安装包路径，</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032142076.png" alt="img-202306032142076" style="zoom:80%;" /><p>编辑，<code>pom.xml</code>文件，添加以下依赖包文件，</p><p>然后点击刷新按钮，等待下载这些依赖文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032148563.png" alt="image-20230603214833970"></p><p>依赖下载完成后，我们就可以正式进入代码编写的环节了。</p><p>新建一个<code>HDFSDemo.java</code>文件，分别编写以下测试集代码，</p><h4 id="1-上传功能"><a href="#1-上传功能" class="headerlink" title="(1)上传功能"></a>(1)上传功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// Configuration代表的是环境配置</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码中的配置要优先于配置文件中的内容</span></span><br><span class="line">    conf.set(<span class="string">&quot;dfs.replication&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接HDFS</span></span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span>FileSystem.get(URI.create(<span class="string">&quot;hdfs://这里填写自己结点状态的为Active的IP:9000&quot;</span>),conf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出流是写，指定HDFS上的存储路径</span></span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> fs.create(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/demo.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定要上传的文件</span></span><br><span class="line">    FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\demo.txt&quot;</span>); <span class="comment">// 确保本地有这个文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件然后利用输出流往HDFS上写数据</span></span><br><span class="line">    IOUtils.copyBytes(in,out,conf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关流用于释放资源</span></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-下载功能"><a href="#2-下载功能" class="headerlink" title="(2)下载功能"></a>(2)下载功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下载</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// Configuration代表的是环境配置</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码中的配置要优先于配置文件中的内容</span></span><br><span class="line">    conf.set(<span class="string">&quot;dfs.replication&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接HDFS</span></span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(<span class="string">&quot;hdfs://XX.XX.XX.XX:9000&quot;</span>), conf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定输入流去读取HDFS上的数据</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> fs.open(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/demo.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建文件出书流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line">    IOUtils.copyBytes(in,out,conf);</span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-删除功能"><a href="#3-删除功能" class="headerlink" title="(3)删除功能"></a>(3)删除功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// Configuration代表的是环境配置</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码中的配置要优先于配置文件中的内容</span></span><br><span class="line">    conf.set(<span class="string">&quot;dfs.replication&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接HDFS</span></span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(<span class="string">&quot;hdfs:XX.XX.XX.XX:9000&quot;</span>), conf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定输入流去读取HDFS上的数据</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> fs.open(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/demo.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    fs.delete(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/demo.txt&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单独运行某个测试类，退出码为<code>exit code 0</code>说明运行成功，</p><p>然后打开浏览器来查看相应操作是否执行成功</p><hr><h3 id="二、MapReduce技术细节"><a href="#二、MapReduce技术细节" class="headerlink" title="二、MapReduce技术细节"></a>二、MapReduce技术细节</h3><p>1.MapReduce是Hadoop提供的一套用于进行<strong>分布式计算的框架</strong> </p><p>2.MapReduce是将整个计算过程拆分为两个阶段</p><p><strong>Map(映射)阶段 和 Reduce(规约)阶段</strong></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306040002563.png" alt="image-20230604000205861"></p><p>3.因为Hadoop对windows系统的兼容性极差,需要进行环境配置</p><hr><h3 id="三、编写字符统计案例"><a href="#三、编写字符统计案例" class="headerlink" title="三、编写字符统计案例"></a>三、编写字符统计案例</h3><p>新建一个MapReduceDemo的<strong>Maven项目</strong>(使用quickstart骨架)，并将前一个项目的<code>pom.xml</code>的依赖配置</p><p>复制过来，刷新Maven配置。</p><h4 id="1-代码编写"><a href="#1-代码编写" class="headerlink" title="1.代码编写"></a>1.代码编写</h4><p>在<code>charcount</code>包下，编写以下三个类</p><p><strong>(1).编写MapReduce程序的驱动类，<code>CharcountDriver.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编写MapReduce程序的驱动类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharcountDriver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 环境参数</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向Yarn申请JOB任务</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置入口类</span></span><br><span class="line">        job.setJarByClass(CharcountDriver.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Mapper类</span></span><br><span class="line">        job.setMapperClass(CharcountMapper.class);</span><br><span class="line">        <span class="comment">// 设置Rudecer类</span></span><br><span class="line">        job.setReducerClass(CharcountReducer.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设定Mapper的输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设定Reducer的输出类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置输入路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;hdfs://这里填写自己结点状态的为Active的IP:9000/words.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置输出路径</span></span><br><span class="line">        <span class="comment">// 注意需要保证，下面的输出目录必须是不存在的，这步会创建一个指定的输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;hdfs://xx.xx.xx.xx:9000/result/wordcount&quot;</span>));</span><br><span class="line">        <span class="comment">// 提交Job任务</span></span><br><span class="line">        job.waitForCompletion(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>(2).编写Mapper类，<code>CharcountMapper.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在MapReduce程序中要求所有的数据都能够被序列化：</span></span><br><span class="line"><span class="comment">// KEYIN, --- 输入的键的类型，如果不指定则默认是行的字节偏移量</span></span><br><span class="line"><span class="comment">// VALUEIN, --- 输入的值的类型，如果不指定则默认就是读取回来的一行数据</span></span><br><span class="line"><span class="comment">// KEYOUT, --- 输出的键的类型，当前案例中输出的字符</span></span><br><span class="line"><span class="comment">// VALUEOUT, --- 输出的值的类型，当前案例中输出的次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharcountMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span> &lt;LongWritable, Text,Text, IntWritable&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// key:键，实际上就是一行的偏移量</span></span><br><span class="line">    <span class="comment">// value:值，实际上就是读取的一行的数据</span></span><br><span class="line">    <span class="comment">// context: 利用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 统计字符</span></span><br><span class="line">        <span class="comment">// 首先将这一行中的数据读取出来进行拆分</span></span><br><span class="line">        <span class="type">char</span>[] cs=value.toString().toCharArray();</span><br><span class="line">        <span class="comment">// hello:&#123;h,e,l,l,o&#125;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : cs)&#123;</span><br><span class="line">            context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(c+<span class="string">&quot;&quot;</span>),<span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>));   <span class="comment">// Map端的代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>(3).编写Reducer类，<code>CharcountReducer.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KEYIN, VALUEIN,--- 输入的键值类型，Reducer的数据来自于Map</span></span><br><span class="line"><span class="comment">// 那么也就意味着Map的输出就是Reduce阶段的输入</span></span><br><span class="line"><span class="comment">// KEYOUT, ALUEOUT --- 输出的键值类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// key，输入的键</span></span><br><span class="line"><span class="comment">// values: 输入的值，这个值已经经过分组，</span></span><br><span class="line"><span class="comment">// context:利用这个参数将数据传递给HDFS上</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharcountReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span> &lt;Text, IntWritable, Text, IntWritable&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符统计</span></span><br><span class="line">        <span class="comment">//        // key:&#x27;a&#x27;</span></span><br><span class="line">        <span class="comment">// values:&#123;1,1,1,1,1,1,1....&#125;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        context.write(key, <span class="keyword">new</span> <span class="title class_">IntWritable</span>(sum));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-Windows上的Hadoop环境配置"><a href="#2-Windows上的Hadoop环境配置" class="headerlink" title="2.Windows上的Hadoop环境配置"></a>2.Windows上的Hadoop环境配置</h4><p>进行系统环境变量配置：</p><p>需要在Windows平台上，解压Hadoop安装包文件</p><p>在系统变量中需要添加以下信息，</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032345308.png" alt="img-202306032345308" style="zoom:50%;" /><p>在Path里添加一个bin目录，</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032345272.png" alt="img-202306032345272" style="zoom:50%;" /><p>下载hadoopbin压缩包，放到hadoop-2.7.6的bin目录下，并解压到此文件夹下。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032345452.png" alt="img-202306032345452"></p><p>双击exe文件：打开是一闪而过的，说明环境配置是正常的。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032346691.png" alt="img-202306032346691" style="zoom:67%;" /><hr><h4 id="3-查看字符统计结果"><a href="#3-查看字符统计结果" class="headerlink" title="3.查看字符统计结果"></a>3.查看字符统计结果</h4><p>运行<code>CharcountDriver.java</code>程序，运行成功返回的退出码应为<code>exit code 0</code>。</p><p>若出现报错查看报错信息，下面的意思是说，该节点是<code>stanby</code>节点，需要将代码里的IP改为活跃节点的IP。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306031123494.png" alt="image-20230603112347720"></p><hr><p>接着打开浏览器，查看字符统计结果。</p><p>进入节点状态的为<code>Active</code>的文件系统的网页，查看<code>/result/charcount</code>目录下是否有以下两个文件。</p><p>可以看到下面的两个文件，说明我们的CharCount程序运行成功，并返回了结果文件<code> part-r-00000</code>。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306022111234.jpg" alt="img-202306022111234"></p><p>在对应的结点的终端里，使用HDFS命令将统计的结果文件下载到Linux环境本地，来查看字符统计结果，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@qianfeng02 ~]# hadoop fs -get /result/charcount/part-r-00000</span><br><span class="line">[root@qianfeng02 ~]# cat part-r-00000</span><br><span class="line">        1430</span><br><span class="line">!       3</span><br><span class="line">&quot;       6</span><br><span class="line">&#x27;       7</span><br><span class="line">,       59</span><br><span class="line">-       2</span><br><span class="line">.       66</span><br><span class="line">:       1</span><br><span class="line">;       1</span><br><span class="line">?       1</span><br><span class="line">A       20</span><br><span class="line">B       3</span><br><span class="line">C       3</span><br><span class="line">D       1</span><br><span class="line">E       1</span><br><span class="line">F       1</span><br><span class="line">G       5</span><br><span class="line">I       23</span><br><span class="line">L       5</span><br><span class="line">M       4</span><br><span class="line">N       21</span><br><span class="line">O       3</span><br><span class="line">P       2</span><br><span class="line">S       4</span><br><span class="line">T       11</span><br><span class="line">W       15</span><br><span class="line">Y       2</span><br><span class="line">a       480</span><br><span class="line">b       99</span><br><span class="line">c       164</span><br><span class="line">d       226</span><br><span class="line">e       760</span><br><span class="line">f       180</span><br><span class="line">g       137</span><br><span class="line">h       348</span><br><span class="line">i       476</span><br><span class="line">j       19</span><br><span class="line">k       46</span><br><span class="line">l       282</span><br><span class="line">m       148</span><br><span class="line">n       388</span><br><span class="line">o       520</span><br><span class="line">p       77</span><br><span class="line">q       6</span><br><span class="line">r       343</span><br><span class="line">s       370</span><br><span class="line">t       588</span><br><span class="line">u       163</span><br><span class="line">v       71</span><br><span class="line">w       132</span><br><span class="line">x       5</span><br><span class="line">y       109</span><br><span class="line">z       6</span><br><span class="line">[root@qianfeng02 ~]#</span><br></pre></td></tr></table></figure><p>到这一步说明你的程序和环境都没毛病，哈哈继续加油！</p><hr>]]></content>
      
      
      <categories>
          
          <category> 大数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> 大数据框架 </tag>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23生产实习 Day03(05/31) Zookeeper的安装方式</title>
      <link href="/posts/dd24.html"/>
      <url>/posts/dd24.html</url>
      
        <content type="html"><![CDATA[<h2 id="Day03-05-31-Zookeeper的安装方式"><a href="#Day03-05-31-Zookeeper的安装方式" class="headerlink" title="Day03(05/31) Zookeeper的安装方式"></a>Day03(05/31) Zookeeper的安装方式</h2><p><strong><a href="https://ariesfun.gitee.io/posts/5544.html">查看笔记合集</a></strong></p><h3 id="一、单机模式"><a href="#一、单机模式" class="headerlink" title="一、单机模式"></a>一、单机模式</h3><p>以下操作在第一个节点上进行。</p><h4 id="1-关闭防火墙"><a href="#1-关闭防火墙" class="headerlink" title="1.关闭防火墙"></a>1.关闭防火墙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld # 临时关闭</span><br><span class="line">sudo systemctl disable firewalld # 永久关闭</span><br></pre></td></tr></table></figure><hr><h4 id="2-解压Zookeeper的安装包并进入conf目录"><a href="#2-解压Zookeeper的安装包并进入conf目录" class="headerlink" title="2.解压Zookeeper的安装包并进入conf目录"></a>2.解压Zookeeper的安装包并进入conf目录</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032018191.png" alt="img-202306032018191" style="zoom:80%;" /><p>需要将Zookeeper安装包上传至第一个节点Linux本地，并进行解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf zookeeoer-3.4.7.tar.gz -C /home/software/</span><br><span class="line">cd /home/software/zookeeper-3.4.7/conf/</span><br></pre></td></tr></table></figure><hr><h4 id="3-将模板文件复制并重命名"><a href="#3-将模板文件复制并重命名" class="headerlink" title="3.将模板文件复制并重命名"></a>3.将模板文件复制并重命名</h4><p><code>cp zoo_sample.cfg zoo.cfg</code></p><hr><h4 id="4-编辑文件将dataDir属性进行配置"><a href="#4-编辑文件将dataDir属性进行配置" class="headerlink" title="4.编辑文件将dataDir属性进行配置"></a>4.编辑文件将dataDir属性进行配置</h4><p><code>vim zoo.cfg</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/home/software/zookeeper-3.4.7/tmp</span><br></pre></td></tr></table></figure><hr><h4 id="5-进入bin目录并启动Zookeeper"><a href="#5-进入bin目录并启动Zookeeper" class="headerlink" title="5.进入bin目录并启动Zookeeper"></a>5.进入bin目录并启动Zookeeper</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/zookeeper-3.4.7/bin</span><br><span class="line">sh zkServer.sh start</span><br></pre></td></tr></table></figure><hr><h4 id="6-成功启动后，查看运行状态"><a href="#6-成功启动后，查看运行状态" class="headerlink" title="6.成功启动后，查看运行状态"></a>6.成功启动后，查看运行状态</h4><p><code>sh zkServer.sh status</code></p><p>单机模式的状态:<strong>standalone</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032022362.png" alt="img-202306032022362" style="zoom:80%;" /><p><strong>到这说明，Zookeeper单机模式安装成功。</strong></p><p><strong>！！！切记下一步需要关闭单机模式</strong></p><p><code>sh zkServer.sh stop</code></p><hr><h4 id="7-远程拷贝Zookeeper文件给其他节点"><a href="#7-远程拷贝Zookeeper文件给其他节点" class="headerlink" title="7.远程拷贝Zookeeper文件给其他节点"></a>7.远程拷贝Zookeeper文件给其他节点</h4><p>进入<code>/home/software/</code>目录，</p><p>将当前节点Zookeeper文件夹拷贝给其他节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../../ </span><br><span class="line">scp -r zookeeper-3.4.7/ root@qianfeng02:/home/software/ </span><br><span class="line">scp -r zookeeper-3.4.7/ root@qianfeng02:/home/software/</span><br></pre></td></tr></table></figure><p>方便为下面的完全分布式安装做准备。</p><hr><h3 id="二、完全分布式"><a href="#二、完全分布式" class="headerlink" title="二、完全分布式"></a>二、完全分布式</h3><p><strong>三节点需要联动</strong>进行下面的操作，使用MobaXterm工具。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032032644.png" alt="img-202306032032644.png" style="zoom:80%;" /><h4 id="1-关闭防火墙-1"><a href="#1-关闭防火墙-1" class="headerlink" title="1.关闭防火墙"></a>1.关闭防火墙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld # 临时关闭</span><br><span class="line">sudo systemctl disable firewalld # 永久关闭</span><br></pre></td></tr></table></figure><hr><h4 id="2-解压Zookeeper的安装包进入conf目录"><a href="#2-解压Zookeeper的安装包进入conf目录" class="headerlink" title="2.解压Zookeeper的安装包进入conf目录"></a>2.解压Zookeeper的安装包进入conf目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/zookeeper-3.4.7/conf/</span><br></pre></td></tr></table></figure><hr><h4 id="3-将模板文件复制一份并且重命名"><a href="#3-将模板文件复制一份并且重命名" class="headerlink" title="3.将模板文件复制一份并且重命名"></a>3.将模板文件复制一份并且重命名</h4><p><code>cp zoo_sample.cfg zoo.cfg</code></p><hr><h4 id="4-编辑文件将dataDir属性进行配置-1"><a href="#4-编辑文件将dataDir属性进行配置-1" class="headerlink" title="4.编辑文件将dataDir属性进行配置"></a>4.编辑文件将dataDir属性进行配置</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032035607.png" alt="img-202306032035607" style="zoom: 50%;" /><p><code>vim zoo.cfg</code></p><p>添加以下配置信息后，保存并退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/home/software/zookeeper-3.4.7/tmp</span><br><span class="line">server.1=xx.xx.xx.xx:2888:3888</span><br><span class="line">server.2=xx.xx.xx.xx:2888:3888</span><br><span class="line">server.3=xx.xx.xx.xx:2888:3888</span><br></pre></td></tr></table></figure><hr><h4 id="5-进入tmp目录编辑myid文件"><a href="#5-进入tmp目录编辑myid文件" class="headerlink" title="5.进入tmp目录编辑myid文件"></a>5.进入tmp目录编辑myid文件</h4><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032039453.png" alt="image-20230603203951597"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/zookeeper-3.4.7/tmp/</span><br><span class="line">rm -rf vesion-2/ # 删除version-2文件，保证tmp文件夹为空</span><br></pre></td></tr></table></figure><p><code>vim myid</code> 然后编辑myid文件</p><p>在文件中添加当前节点的编号，三个节点需要同时操作</p><p>编号对应的就是server后面的数字,三个节点分别改为1，2，3（与各自节点IP要对应）</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032043460.png" alt="img-202306032043460" style="zoom: 50%;" /><hr><h4 id="6-三个节点都需要进入bin目录，启动Zookeeper"><a href="#6-三个节点都需要进入bin目录，启动Zookeeper" class="headerlink" title="6.三个节点都需要进入bin目录，启动Zookeeper"></a>6.三个节点都需要进入bin目录，启动Zookeeper</h4><p><code>sh zkServer.sh start</code></p><hr><h4 id="7-三个节点都需要查询状态"><a href="#7-三个节点都需要查询状态" class="headerlink" title="7.三个节点都需要查询状态"></a>7.三个节点都需要查询状态</h4><p><code>sh zkServer.sh status</code></p><p><strong>若出现2个follower和1个leader说明完全分布式启动成功</strong>。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306031302630.png" alt="image-20230603130214328"></p><hr><h4 id="8-Zookeeper集群启动及格式化"><a href="#8-Zookeeper集群启动及格式化" class="headerlink" title="8.Zookeeper集群启动及格式化"></a>8.Zookeeper集群启动及格式化</h4><p><code>cd /home/software/zookeeper-3.4.7/bin</code></p><p><strong>(1).在第一个节点上，格式化Zookeeper</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure><p>执行后出现成功创建，说明格式化成功。</p><p><strong>如果没有，噩梦开始。</strong></p><p>你需要检查你的Hadoop和Zookeeper配置信息是否有误。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306031310187.png" alt="image-20230603131003772"></p><hr><p><strong>(2).接着在三个节点上启动JournalNode</strong></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032047071.png" alt="image-20230603204715878"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemen.sh start journalnode</span><br></pre></td></tr></table></figure><hr><p><strong>(3).第一个节点上，格式化NameNode</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><p>若出现以下提示，说明NameNode格式化成功。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032052361.png" alt="image-20230603205221035"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23/06/01 11:22:00 INFO common.Storage: Storage directory /home/software/hadoop-2.7.6/tmp/hdfs/name has been successfully formatted.</span><br></pre></td></tr></table></figure><p>如果不能格式化成功，可以参考<a href="https://www.cnblogs.com/c-w20140301/p/10469315.html">解决namenode格式化时报错</a>。</p><hr><p><strong>(4).在第一个节点上启动NameNode</strong></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032055407.png" alt="img-202306032055407"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemen.sh start namenode</span><br></pre></td></tr></table></figure><hr><p><strong>(5).第二个节点上进行格式化</strong></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032055926.png" alt="img-202306032055926"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -bootstrapStandby</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否出现下面的提示信息</span></span><br><span class="line">23/06/01 11:34:37 INFO common.Storage: Storage directory /home/software/hadoop-2.7.6/tmp/hdfs/name has been successfully formatted.</span><br></pre></td></tr></table></figure><hr><p><strong>(6).在三个节点上同时执行以下命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop-deamen.sh start namenode # 启动NameNode</span><br><span class="line">hadoop-deamen.sh start datanode # 启动DataNode</span><br></pre></td></tr></table></figure><hr><p><strong>(7).在第一、三节点上分别执行以下命令</strong></p><p>在第三个节点，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-yearn.sh</span><br></pre></td></tr></table></figure><p>在第一个节点，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn-dameon.sh start resourcemanager</span><br></pre></td></tr></table></figure><hr><p><strong>(8).检查三个节点的进程数量</strong></p><p>在三个节点都输入<code>jps</code></p><p><strong>查看进程数量，正确应该是8，7，6</strong></p><p>到此，完全分布式的Zookeeper安装完毕~~</p><hr>]]></content>
      
      
      <categories>
          
          <category> 大数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> 大数据框架 </tag>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23生产实习 Day02(05/30) Hadoop核心技术</title>
      <link href="/posts/3d5e.html"/>
      <url>/posts/3d5e.html</url>
      
        <content type="html"><![CDATA[<h2 id="Day02-05-30-Hadoop核心技术"><a href="#Day02-05-30-Hadoop核心技术" class="headerlink" title="Day02(05/30) Hadoop核心技术"></a>Day02(05/30) Hadoop核心技术</h2><p><strong><a href="https://ariesfun.gitee.io/posts/5544.html">查看笔记合集</a></strong></p><h2 id="一、Hadoop伪分布式集群配置及功能测试"><a href="#一、Hadoop伪分布式集群配置及功能测试" class="headerlink" title="一、Hadoop伪分布式集群配置及功能测试"></a>一、Hadoop伪分布式集群配置及功能测试</h2><h3 id="0-Hadoop运行环境配置"><a href="#0-Hadoop运行环境配置" class="headerlink" title="0.Hadoop运行环境配置"></a>0.Hadoop运行环境配置</h3><p>先进入hadoop文件夹进行配置 <code>cd /home/software/hadoop-2.7.6/etc/hadoop/</code></p><p><strong>(1).<code>vim mapred-site.xml</code></strong><br>ps: 前一步要复制一份<code>.xml</code>文件 <code>cp mapred-site.xml.template mapred-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定Mapreduce程序在Yarn上运行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>(2).<code>vim yarn-site.xml</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定Yarn的主节点 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- NodeManager数据获取方式 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>(3).<code>vim slaves</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qianfeng01 # 添加从节点信息</span><br></pre></td></tr></table></figure><hr><p><strong>(4).<code>vim /etc/profile</code> 配置Hadoop环境变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/software/jdk1.8</span><br><span class="line">export HADOOP_HOME=/home/software/hadoop-2.7.6</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br><span class="line">export JAVA_HOME PATH</span><br></pre></td></tr></table></figure><p><strong>(5).<code>source /etc/profile</code> # 刷新环境变量</strong></p><p><code>hadoop version</code> # 查看Hadoop版本号</p><p>可以正确看到Hadoop版本说明，环境变量配置正确。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306040010090.png" alt="img-202306040010090"></p><hr><p><strong>(5).<code>hadoop namenode -format </code> 格式化namenode</strong></p><p>运行内容中出现以下这行，说明格式化成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23/05/30 09:15:33 INFO common.Storage: Storage directory /tmp/hadoop-root/dfs/name has been successfully formatted.</span><br></pre></td></tr></table></figure><hr><p><strong>(6).<code>start-all.sh</code>  启动Hadoop服务</strong></p><hr><p><strong>(7).输入<code>jps</code> 查看运行的进程（应有如下6个）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@qianfeng01 hadoop]# jps</span><br><span class="line">6433 NameNode</span><br><span class="line">7043 NodeManager</span><br><span class="line">6933 ResourceManager</span><br><span class="line">6550 DataNode</span><br><span class="line">6780 SecondaryNameNode</span><br><span class="line">7375 Jps</span><br></pre></td></tr></table></figure><hr><p><strong>(8).打开浏览器，输入<code>自己的ip:50070</code> 查看HadoopWeb文件系统页面</strong></p><p> 网页可以正常打开，说明Hadoop伪分布式环境搭建完成~~</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202305301032378.png" alt="image-20230530095757160"></p><hr><h3 id="1-HDFS常用命令"><a href="#1-HDFS常用命令" class="headerlink" title="1.HDFS常用命令"></a>1.HDFS常用命令</h3><table><thead><tr><th align="left">常用命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">hadoop fs <strong>-put</strong> xxx.txt  /</td><td align="left">上传xxx文件到hdfs的根目录下</td></tr><tr><td align="left">hadoop fs <strong>-get</strong> /xxx.txt /xxx.txt</td><td align="left">下载xxx文件到Linux本地并重命名</td></tr><tr><td align="left">hadoop fs <strong>-rm</strong> /xxx.txt</td><td align="left">删除hdfs根目录下的文件</td></tr><tr><td align="left">hadoop fs <strong>-rmdir</strong> /xxx</td><td align="left">删除<strong>空文件夹</strong></td></tr><tr><td align="left">hadoop fs <strong>-rmr</strong> /xxx</td><td align="left"><strong>递归删除</strong>文件夹</td></tr><tr><td align="left">hadoop fs <strong>-ls</strong> /</td><td align="left">查看hdfs根目录下的所有文件</td></tr><tr><td align="left">hadoop fs <strong>-cp</strong> /xxx.txt /xxx.txt</td><td align="left">将hdfs根目录下的xxx文件复制并重命名为xxx</td></tr><tr><td align="left">hadoop fs <strong>-mv</strong> /xxx.txt /xxx.txt</td><td align="left">将hdfs根目录下的xxx文件重命名为xxx</td></tr><tr><td align="left">hadoop fs -mv /xxx.txt /xxx/</td><td align="left">将hdfs根目录下的xxx文件移动到指定文件夹xxx下</td></tr><tr><td align="left">hadoop fs <strong>-mkdir</strong> /xxx</td><td align="left">在hdfs根目录下创建文件夹xxx</td></tr></tbody></table><hr><p>eg.在Linux本地环境创建<code>hello.txt</code>，与HDFS进行文件交互</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/data/ </span><br><span class="line">vim hello.txt # 创建hello.txt并编辑</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -put hello.txt  / # 上传文件到hdfs的根目录下</span><br><span class="line">mv hello.txt world.txt # 重命名文件夹</span><br><span class="line"></span><br><span class="line">hadoop fs -put /home/data/world.txt /a.txt # 上传本地文件到hdfs,并重命名</span><br><span class="line">hadoop fs -mkdir /log # 创建文件夹</span><br><span class="line">hadoop fs -get /a.txt /home/data/ # 从hdfs下载文件到本地</span><br><span class="line">hadoop fs -mv /hello.txt /world.txt # 重命名</span><br><span class="line">hadoop fs -cp /world.txt /hello.txt # 复制文件并重命名</span><br><span class="line">hadoop fs -ls / # 查看hdfs的所有文件</span><br><span class="line">hadoop fs -mv /a.txt /log/ # 移动文件到指定目录下</span><br><span class="line">hadoop fs -rmdir /log # 删除的文件夹必须为空(会报错)</span><br><span class="line">hadoop fs -rm /log/a.txt # 删除文件</span><br><span class="line">hadoop fs -rmdir /log # 删除空文件夹</span><br><span class="line">hadoop fs -mkdir /demo</span><br><span class="line">hadoop fs -mv /hello.txt /demo # 移动(剪切)文件</span><br><span class="line">hadoop fs -mv /world.txt /demo</span><br><span class="line">hadoop fs -rmr /demo # 递归删除文件夹</span><br></pre></td></tr></table></figure><hr><h3 id="2-HDFS的概述"><a href="#2-HDFS的概述" class="headerlink" title="2.HDFS的概述"></a>2.HDFS的概述</h3><p>(1) HDFS：<strong>Hadoop Distribute File System</strong> (Hadoop分布式文件系统)</p><p>(2) HDFS是为了方便使用，仿照Linux系统设计的存储系统</p><p>(3) HDFS是典型的主存结构：</p><p><strong>NameNode(主节点) 和 DataNode(从节点)</strong></p><p><strong>DataNode: 存储实际的数据块</strong></p><p>(4) HDFS在存储文件时，会将文件进行物理(Block)切块</p><p>(5) HDFS在存储的时候切块之后<strong>每个Block默认是128MB</strong></p><p>(6) HDFS会自动对数据进行备份，这个备份称之为副本，<strong>在完全分布式的场景中的副本数量默认为3</strong></p><p>ps:</p><p>现代大数据的8大特点（8V）</p><p>1.数据量大(Volume)     2.速度(Velocity)     3.种类(Variety)     4.准确性(Veracity)</p><p>5.可变性(Variability)     6.波动性(Volatility)     7.可视化(visualization)     8.价值(Value)</p><hr><h3 id="3-Block（块存储）"><a href="#3-Block（块存储）" class="headerlink" title="3.Block（块存储）"></a>3.Block（块存储）</h3><p>(1).Block是HDFS中数据存储的基本单位，即一个文件在HDFS存储时由一个或多个Block组成</p><p>(2).Block的大小默认(<u>Hadoop1.0版本默认是64MB，Hadoop2.0是128MB</u>), 可通过<code>dfs.blocksize</code>属性来设置</p><p>(3).若一个文件本身不到128MB，则这个文件是多大则对应的Block就是多大</p><p>(4).HDFS会对Block进行编号，即BlockID</p><p>(5) 切块的意义</p><p>a.能够存储超大文件        b.能够进行快速的备份</p><hr><h3 id="4-NameNode"><a href="#4-NameNode" class="headerlink" title="4.NameNode"></a>4.NameNode</h3><p>(1).<strong>NameNode是HDFS的核心节点(主节点)</strong></p><p>(2).NameNode的职责，<strong>管理DataNode和记录元数据</strong></p><p>(3).元数据包含:</p><p>a. 文件的存储路径     b. 文件的大小     c. Block的大小     d. BlockID v. 副本数量</p><p>(4). 元数据时存储在内存及磁盘当中的目的</p><p><strong>在内存中的目的是查找快，在磁盘中的目的是崩溃恢复</strong></p><p>(5).默认情况下DataNode每隔3s发送心跳，给NameNode</p><hr><h3 id="5-DataNode"><a href="#5-DataNode" class="headerlink" title="5.DataNode"></a>5.DataNode</h3><p>作用：存储Block</p><p>DataNode将Block存储在磁盘上,在磁盘上的存储路径是由<code>hadoop.tmp.dir</code>属性来决定的</p><p>DataNode会定时向NameNode发送心跳，<strong>即RPC远程过程调用</strong></p><hr><h3 id="6-SecondaryNameNode"><a href="#6-SecondaryNameNode" class="headerlink" title="6.SecondaryNameNode"></a>6.SecondaryNameNode</h3><p>到目前为止HDFS集群只能是<strong>NameNode+SecondaryNameNode结构</strong>或者是<strong>双NameNode结构</strong>,</p><p><strong>而在实际生存场景中，采用的都是双NameNode结构</strong>而舍弃掉SecondaryNameNode</p><hr><h3 id="7-垃圾回收机制"><a href="#7-垃圾回收机制" class="headerlink" title="7.垃圾回收机制"></a>7.垃圾回收机制</h3><p>HDFS回收站策略默认是不打开的，意味着删除文件这个操作会立即生效并且不能撤销</p><p>若要开启回收站功能，需在<code>core-site.xml</code>文件中配置 </p><p><code>vim core-site.xml</code>   </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>                                                             </span><br><span class="line">    <span class="comment">&lt;!--                                                               </span></span><br><span class="line"><span class="comment">    配置回收站垃圾清理的时间间隔，单位是min                               </span></span><br><span class="line"><span class="comment">    如果一天内没被还原那么原则上就会被清理掉                            </span></span><br><span class="line"><span class="comment">    1440m ==  24h                                                     </span></span><br><span class="line"><span class="comment">    --&gt;</span>                                                                 </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.trash.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span>                                    </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1440<span class="tag">&lt;/<span class="name">value</span>&gt;</span>                                                 </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br></pre></td></tr></table></figure><hr><p>从回收站还原的命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mv hdfs://qianfeng01:9000/user/root/.Trash/Current/a.txt /b.txt</span><br></pre></td></tr></table></figure><p>功能测试</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306040012133.png" alt="img-202306040012133" style="zoom:80%;" /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@qianfeng01 hadoop]#</span><br><span class="line">[root@qianfeng01 hadoop]# hadoop fs -rm /a.txt</span><br><span class="line">23/05/30 13:56:50 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 1440 minutes, Emptier interval = 0 minutes.</span><br><span class="line">23/05/30 13:56:50 INFO fs.TrashPolicyDefault: Moved: &#x27;hdfs://qianfeng01:9000/a.txt&#x27; to trash at: hdfs://qianfeng01:9000/user/root/.Trash/Current/a.txt</span><br><span class="line">Moved: &#x27;hdfs://qianfeng01:9000/a.txt&#x27; to trash at: hdfs://qianfeng01:9000/user/root/.Trash/Current</span><br><span class="line">[root@qianfeng01 hadoop]#</span><br><span class="line">[root@qianfeng01 hadoop]#</span><br><span class="line">[root@qianfeng01 hadoop]#</span><br><span class="line">[root@qianfeng01 hadoop]# hadoop fs -mv hdfs://qianfeng01:9000/user/root/.Trash/Current/a.txt /b.txt # 从垃圾站回收并移动并重命名到根目录下</span><br><span class="line">[root@qianfeng01 hadoop]#</span><br></pre></td></tr></table></figure><p>测试完成，关闭Hadoop使用命令<code>stop-all.sh</code></p><hr><h2 id="二、搭建完全分布式运行模式"><a href="#二、搭建完全分布式运行模式" class="headerlink" title="二、搭建完全分布式运行模式"></a>二、搭建完全分布式运行模式</h2><hr><h3 id="1-虚拟机克隆"><a href="#1-虚拟机克隆" class="headerlink" title="1.虚拟机克隆"></a>1.虚拟机克隆</h3><p>从BigData01克隆到BigData02,BigData03</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202305301422550.png" alt="image-20230530142200018" style="zoom: 50%;" /><p>克隆完成后，依次启动三个虚拟机，查看各虚拟机ip是否是依次往后顺延的</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202305301422009.png" alt="image-20230530142249994"></p><p>没有依次顺延，需要将重复的ip地址更改（BigData02、BigData03的ip地址改为顺延后的）</p><p>依次输入<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>来更改网卡配置的ip信息</p><p><code>systemctl restart network</code>  更改好后，重启一下网络</p><hr><h3 id="2-Hadoop完全分布式环境配置（类似Day01伪分布式的配置操作）"><a href="#2-Hadoop完全分布式环境配置（类似Day01伪分布式的配置操作）" class="headerlink" title="2.Hadoop完全分布式环境配置（类似Day01伪分布式的配置操作）"></a>2.Hadoop完全分布式环境配置（类似Day01伪分布式的配置操作）</h3><p><a href="">Day01伪分布式的配置操作</a></p><h4 id="1-在三个节点上关闭防火墙"><a href="#1-在三个节点上关闭防火墙" class="headerlink" title="(1).在三个节点上关闭防火墙"></a>(1).在三个节点上关闭防火墙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld # 临时关闭</span><br><span class="line">sudo systemctl disable firewalld # 永久关闭</span><br></pre></td></tr></table></figure><hr><h4 id="2-在三个节点上配置主机名称"><a href="#2-在三个节点上配置主机名称" class="headerlink" title="(2).在三个节点上配置主机名称"></a>(2).在三个节点上配置主机名称</h4><p><code>vim /etc/hostname</code></p><p>将主机名依次指定为qianfeng01,qianfeng02,qianfeng03</p><hr><h4 id="3-配置三个节点的hosts文件"><a href="#3-配置三个节点的hosts文件" class="headerlink" title="(3).配置三个节点的hosts文件"></a>(3).配置三个节点的hosts文件</h4><p>将主机名称和IP地址进行映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">xx.xx.xx.xx qianfeng01</span><br><span class="line">xx.xx.xx.xx qianfeng02</span><br><span class="line">xx.xx.xx.xx qianfeng03</span><br></pre></td></tr></table></figure><p>注意，三个节点映射完成后那么三个节点的hostname文件内容将是一样的</p><hr><h4 id="4-对三个节点配置SSH免密互通"><a href="#4-对三个节点配置SSH免密互通" class="headerlink" title="(4).对三个节点配置SSH免密互通"></a>(4).对三个节点配置SSH免密互通</h4><p>三个节点上都需要将生成的公钥拷贝给远程服务器，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen # 生成自己的公钥和秘钥 （依次敲回车即可）</span><br><span class="line">ssh-copy-id root@qianfeng01 # 将生成的公钥拷贝给远程服务器</span><br><span class="line">ssh-copy-id root@qianfeng02</span><br><span class="line">ssh-copy-id root@qianfeng03</span><br></pre></td></tr></table></figure><p>测试ssh功能，</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306040015797.png" alt="img-202306040015797"></p><hr><h4 id="5-三个节点重新启动虚拟机让所有的配置生效"><a href="#5-三个节点重新启动虚拟机让所有的配置生效" class="headerlink" title="(5).三个节点重新启动虚拟机让所有的配置生效"></a>(5).三个节点重新启动虚拟机让所有的配置生效</h4><p>三个节点都输入命令，<code>reboot</code></p><hr><h4 id="6-进入Hadoop安装目录的子目录"><a href="#6-进入Hadoop安装目录的子目录" class="headerlink" title="(6).进入Hadoop安装目录的子目录"></a>(6).进入Hadoop安装目录的子目录</h4><p><code>cd /home/software/hadoop-2.7.6/etc/hadoop/</code></p><p><strong>a. 编辑<code>hadoop-env.sh</code>文件</strong></p><p><code>vim hadoop-env.sh</code>        一般命令模式下(ESC)<code>:set nu</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1) 修改第25行JAVA_HOME的路径:</span><br><span class="line">export JAVA_HOME=/home/software/jdk1.8</span><br><span class="line"></span><br><span class="line">2) 修改第33行HADOOP_CONF_DIR的路径:</span><br><span class="line">export HADOOP_CONF_DIR=/home/software/hadoop-2.7.6/etc/hadoop</span><br><span class="line"></span><br><span class="line">3) 保存退出之后需要让该文件重新生效:</span><br><span class="line">source hadoop-env.sh</span><br></pre></td></tr></table></figure><hr><p><strong>b. 编辑<code>core-site.xml</code>文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定在Zookeeper上注册结点的名称 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">porperty</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定Hadoop数据存储目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/software/hadoop-2.7.6/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定Zookeeper的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.orum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng01:2181,qianfeng02:2181,qianfeng03:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>c.编辑<code>hdfs-site.xml</code>文件</strong></p><p>hadoop01/hadoop02 改为自己的主机名称，同时注意版本号要与自己安装的一致：<code>hadoop-2.7.6</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定在Zookeeper上注册的节点名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ns集群下有两个namenode，分别为nn1, nn2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.ns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nn1的RPC通信--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.ns.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng01:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nn1的http通信--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.ns.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng01:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- nn2的RPC通信地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.ns.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng02:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- nn2的http通信地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.ns.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng02:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定namenode的元数据在JournalNode上存放的位置，这样，namenode2可以从journalnode集群里的指定位置上获取信息，达到热备效果--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://qianfeng01:8485;qianfeng02:8485;qianfeng03:8485/ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/software/hadoop-2.7.6/tmp/journal<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启NameNode故障时自动切换 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置失败自动切换实现方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.ns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置隔离机制 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用隔离机制时需要ssh免登陆 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置namenode存放元数据的目录，可以不配置，如果不配置则默认放到hadoop.tmp.dir下--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///home/software/hadoop-2.7.6/tmp/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置datanode存放元数据的目录，可以不配置，如果不配置则默认放到hadoop.tmp.dir下--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///home/software/hadoop-2.7.6/tmp/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置副本数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置用户的操作权限，false表示关闭权限验证，任何用户都可以操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>d.编辑<code>yarn-site.xml</code>文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置yarn的高可用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定两个resourcemaneger的名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置rm1的主机--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置rm2的主机--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启yarn恢复机制--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.recovery.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行rm恢复机制实现类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.store.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置zookeeper的地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng01:2181,qianfeng02:2181,qianfeng03:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行yarn集群的别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ns-yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定nodemanager启动时加载server的方式为shuffle server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定resourcemanager地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>e.编辑<code>map-site.xml</code>文件</strong></p><p>先将模板问价复制一份并重命名，<code>cp mapred-site.xml.template mapred-site.xml</code></p><p>再配置<code>map-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定Mapreduce程序在Yarn上运行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>f.编辑<code>slaves</code>文件</strong>（当前的<code>/home/software/hadoop-2.7.6/etc/hadoop/</code>目录下）</p><p><code>vim slaves</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qianfeng01</span><br><span class="line">qianfeng02</span><br><span class="line">qianfeng03</span><br></pre></td></tr></table></figure><hr><h4 id="7-将第一个节点上的Hadoop配置好的整个文件夹拷贝给另外两个节点"><a href="#7-将第一个节点上的Hadoop配置好的整个文件夹拷贝给另外两个节点" class="headerlink" title="(7)将第一个节点上的Hadoop配置好的整个文件夹拷贝给另外两个节点"></a>(7)将第一个节点上的Hadoop配置好的整个文件夹拷贝给另外两个节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r hadoop-2.7.6 root@qianfeng02:/home/software/</span><br><span class="line">scp -r hadoop-2.7.6 root@qianfeng03:/home/software/</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 大数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> 大数据框架 </tag>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23生产实习 Day01(05/29) Hadoop运行环境搭建及配置</title>
      <link href="/posts/a63b.html"/>
      <url>/posts/a63b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Day01-05-29-Hadoop运行环境搭建及配置"><a href="#Day01-05-29-Hadoop运行环境搭建及配置" class="headerlink" title="Day01(05/29) Hadoop运行环境搭建及配置"></a>Day01(05/29) Hadoop运行环境搭建及配置</h2><hr><p><strong><a href="https://ariesfun.gitee.io/posts/5544.html">查看笔记合集</a></strong></p><h3 id="0-软件环境准备"><a href="#0-软件环境准备" class="headerlink" title="0.软件环境准备"></a><strong>0.软件环境准备</strong></h3><p>虚拟化平台，VMware Workstation 16 Pro</p><p>虚拟机镜像，CentOS7, ISO:<code>CentOS-7-x86_64-DVD-2207-02.iso</code></p><p>远程连接工具, MobaXterm</p><p>一台笔电，操作系统为Win10Pro</p><p>相关资源文件，放在<a href="http://10.200.21.35:8100/s/WJhg">共享网盘资源</a>里了（博客首页左侧的公告）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop-2.7.6.tar.gz # hadoop安装包</span><br><span class="line">jdk-8u131-linux-x64.tar.gz # jdk1.8-linux安装包</span><br></pre></td></tr></table></figure><hr><h3 id="1-关闭防火墙"><a href="#1-关闭防火墙" class="headerlink" title="1.关闭防火墙"></a><strong>1.关闭防火墙</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld # 临时关闭</span><br><span class="line">sudo systemctl disable firewalld # 永久关闭</span><br></pre></td></tr></table></figure><hr><h3 id="2-配置主机名称"><a href="#2-配置主机名称" class="headerlink" title="2.配置主机名称"></a><strong>2.配置主机名称</strong></h3><p>a. 注意:在Hadoop集群中的主机名称不能存在<code>_</code>和<code>-</code>,如果存在则会导致Hadoop在集群中无法找到该节点<br>b. 编辑文件:<code>vim /etc/hostname</code><br>c. 将主机名称进行指定然后保存退出</p><hr><h3 id="3-配置hosts文件-将主机名称和ip地址进行映射"><a href="#3-配置hosts文件-将主机名称和ip地址进行映射" class="headerlink" title="3.配置hosts文件,将主机名称和ip地址进行映射"></a><strong>3.配置hosts文件,将主机名称和ip地址进行映射</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts # 编辑hosts文件</span><br><span class="line">xx.xx.xx.xx qianfeng01 # 将主机名称与ip地址进行映射</span><br></pre></td></tr></table></figure><hr><h3 id="4-重新启动虚拟机让所有的配置进行生效"><a href="#4-重新启动虚拟机让所有的配置进行生效" class="headerlink" title="4.重新启动虚拟机让所有的配置进行生效"></a><strong>4.重新启动虚拟机让所有的配置进行生效</strong></h3><p>在当前节点输入：<code>reboot</code></p><hr><h3 id="5-配置SSH免密互通"><a href="#5-配置SSH免密互通" class="headerlink" title="5.配置SSH免密互通"></a><strong>5.配置SSH免密互通</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen # 生成自己的公钥和秘钥 </span><br><span class="line">ssh-copy-id root@qianfeng01 # 将生成的公钥拷贝给远程服务器</span><br></pre></td></tr></table></figure><hr><h3 id="6-进入Hadoop安装目录的子目录"><a href="#6-进入Hadoop安装目录的子目录" class="headerlink" title="6.进入Hadoop安装目录的子目录"></a><strong>6.进入Hadoop安装目录的子目录</strong></h3><p><code>cd /home/software/hadoop-2.7.6/etc/hadoop/</code></p><p><strong>a. 编辑<code>hadoop-env.sh</code>文件</strong></p><p>vim打开显示行号功能，进入一般命令模式(ESC),输入<code>:set nu</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1) 修改第25行JAVA_HOME的路径:</span><br><span class="line">export JAVA_HOME=/home/software/jdk1.8</span><br><span class="line"></span><br><span class="line">2) 修改第33行HADOOP_CONF_DIR的路径:</span><br><span class="line">export HADOOP_CONF_DIR=/home/software/hadoop-2.7.6/etc/hadoop</span><br><span class="line"></span><br><span class="line">3) 保存退出之后需要让该文件重新生效:</span><br><span class="line">source hadoop-env.sh</span><br></pre></td></tr></table></figure><hr><p><strong>b. 编辑<code>core-site.xml</code>文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 指定HDFS中的主节点 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://qianfeng01:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 运行Hadoop数据存储目录 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/software/hadoop-2.7.6/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>c.编辑<code>hdfs-site.xml</code>文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置HDFS的副本数量,在伪分布式的场景中副本数量只能为1 --&gt;</span> # 伪分布式只有1个结点</span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>d.编辑<code>mapred-site.xml</code>文件</strong><br>将<code>mapred-site.xml.template</code>模板文件复制一份并且重命名为<code>mapred-site.xml</code></p><p><code>cp mapred-site.xml.template mapred-site.xml</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> 大数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> 大数据框架 </tag>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing周赛 题解及知识点汇总 更新中...</title>
      <link href="/posts/6086.html"/>
      <url>/posts/6086.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="AcWing-周赛-第104场题解"><a href="#AcWing-周赛-第104场题解" class="headerlink" title="AcWing-周赛 第104场题解"></a>AcWing-周赛 第104场题解</h2><h4 id="T1-4981-第几项"><a href="#T1-4981-第几项" class="headerlink" title="T1: 4981. 第几项"></a>T1: <a href="https://www.acwing.com/problem/content/4984/">4981. 第几项</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6475895/">AcWing 4981. 第几项</a></p><hr><h4 id="T2-4982-进制"><a href="#T2-4982-进制" class="headerlink" title="T2: 4982. 进制"></a>T2: <a href="https://www.acwing.com/problem/content/4985/">4982. 进制</a></h4><p><strong>考察知识点</strong>：<u>进位制，位运算，枚举</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6482361/">AcWing 4982. 进制</a></p><hr><h4 id="T2-4983-最大的数"><a href="#T2-4983-最大的数" class="headerlink" title="T2: 4983. 最大的数"></a>T2: <a href="https://www.acwing.com/problem/content/4986/">4983. 最大的数</a></h4><p><strong>考察知识点</strong>：<u>枚举，思维题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6482409/">AcWing 4983. 最大的数</a></p><hr><h2 id="AcWing-周赛-第103场题解"><a href="#AcWing-周赛-第103场题解" class="headerlink" title="AcWing-周赛 第103场题解"></a>AcWing-周赛 第103场题解</h2><h4 id="T1-4978-解方程"><a href="#T1-4978-解方程" class="headerlink" title="T1: 4978. 解方程"></a>T1: <a href="https://www.acwing.com/problem/content/4981/">4978. 解方程</a></h4><p><strong>考察知识点</strong>：<u>解方程，枚举</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6441920/">AcWing 4978. 解方程</a></p><hr><h4 id="T2-4979-合适的环"><a href="#T2-4979-合适的环" class="headerlink" title="T2: 4979. 合适的环"></a>T2: <a href="https://www.acwing.com/problem/content/4982/">4979. 合适的环</a></h4><p><strong>考察知识点</strong>：<u>无向图存储，枚举</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6445870/">AcWing 4979. 合适的环</a></p><hr><h4 id="T3-4980-猜数字"><a href="#T3-4980-猜数字" class="headerlink" title="T3: 4980. 猜数字"></a>T3: <a href="https://www.acwing.com/problem/content/4983/">4980. 猜数字</a></h4><p><strong>考察知识点</strong>：<u>思维题，(试除法)分解质因数，枚举，STL</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6446382/">AcWing 4980. 猜数字</a></p><hr><h2 id="AcWing-周赛-第102场题解"><a href="#AcWing-周赛-第102场题解" class="headerlink" title="AcWing-周赛 第102场题解"></a>AcWing-周赛 第102场题解</h2><h4 id="T1-4975-或运算"><a href="#T1-4975-或运算" class="headerlink" title="T1: 4975. 或运算"></a>T1: <a href="https://www.acwing.com/problem/content/4978/">4975. 或运算</a></h4><p><strong>考察知识点</strong>：<u>位运算</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6408375/">AcWing 4975. 或运算</a></p><hr><h4 id="T2-4976-倍增"><a href="#T2-4976-倍增" class="headerlink" title="T2: 4976. 倍增 "></a>T2: <a href="https://www.acwing.com/problem/content/4979/">4976. 倍增 </a></h4><p><strong>考察知识点</strong>：<u>分解质因数，思维题，理清题意</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6408515/">AcWing 4976. 倍增</a></p><hr><h4 id="T3-4977-三元组"><a href="#T3-4977-三元组" class="headerlink" title="T3: 4977. 三元组"></a>T3: <a href="https://www.acwing.com/problem/content/4980/">4977. 三元组</a></h4><p><strong>考察知识点</strong>：<u>枚举，乘法原理，哈希表，类前后缀分解</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6410962/">AcWing 4977. 三元组</a></p><hr><h2 id="AcWing-周赛-第101场题解"><a href="#AcWing-周赛-第101场题解" class="headerlink" title="AcWing-周赛 第101场题解"></a>AcWing-周赛 第101场题解</h2><h4 id="T1-4972-解方程"><a href="#T1-4972-解方程" class="headerlink" title="T1: 4972. 解方程 "></a>T1: <a href="https://www.acwing.com/problem/content/4975/">4972. 解方程 </a></h4><p><strong>考察知识点</strong>：<u>解方程，语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6369265/">AcWing 4972. 解方程</a></p><hr><h2 id="AcWing-周赛-第100场题解"><a href="#AcWing-周赛-第100场题解" class="headerlink" title="AcWing-周赛 第100场题解"></a>AcWing-周赛 第100场题解</h2><h4 id="T1-4953-比赛"><a href="#T1-4953-比赛" class="headerlink" title="T1: 4953. 比赛"></a>T1: <a href="https://www.acwing.com/problem/content/4956/">4953. 比赛</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6323965/">AcWing 4953. 比赛</a></p><hr><h4 id="T2-4954-挑选"><a href="#T2-4954-挑选" class="headerlink" title="T2: 4954. 挑选"></a>T2: <a href="https://www.acwing.com/problem/content/4957/">4954. 挑选</a></h4><p><strong>考察知识点</strong>：<u>二进制枚举法</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6331136/">AcWing 4954. 挑选</a></p><hr><h2 id="AcWing-周赛-第99场题解"><a href="#AcWing-周赛-第99场题解" class="headerlink" title="AcWing-周赛 第99场题解"></a>AcWing-周赛 第99场题解</h2><h4 id="T1-4950-四则运算"><a href="#T1-4950-四则运算" class="headerlink" title="T1: 4950. 四则运算"></a>T1: <a href="https://www.acwing.com/problem/content/4953/">4950. 四则运算</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6279695/">AcWing 4950. 四则运算</a></p><hr><h4 id="T2-4951-整理账本"><a href="#T2-4951-整理账本" class="headerlink" title="T2: 4951. 整理账本"></a>T2: <a href="https://www.acwing.com/problem/content/4954/">4951. 整理账本</a></h4><p><strong>考察知识点</strong>：<u>STL的使用，unordered_map、map、vector、pair、sort，</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6282996/">AcWing 4951. 整理账本</a></p><hr><h2 id="AcWing-周赛-第98场题解"><a href="#AcWing-周赛-第98场题解" class="headerlink" title="AcWing-周赛 第98场题解"></a>AcWing-周赛 第98场题解</h2><h4 id="T1-4947-大整数"><a href="#T1-4947-大整数" class="headerlink" title="T1: 4947. 大整数"></a>T1: <a href="https://www.acwing.com/problem/content/4950/">4947. 大整数</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6228724/">AcWing 4947. 大整数</a></p><hr><h4 id="T2-4948-大乘积"><a href="#T2-4948-大乘积" class="headerlink" title="T2: 4948. 大乘积"></a>T2: <a href="https://www.acwing.com/problem/content/4951/">4948. 大乘积</a></h4><p><strong>考察知识点</strong>：<u>语法题，字符串处理</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6238467/">AcWing 4948. 大乘积</a></p><hr><h2 id="AcWing-周赛-第97场题解"><a href="#AcWing-周赛-第97场题解" class="headerlink" title="AcWing-周赛 第97场题解"></a>AcWing-周赛 第97场题解</h2><h4 id="T1-4944-热身计算"><a href="#T1-4944-热身计算" class="headerlink" title="T1: 4944. 热身计算"></a>T1: <a href="https://www.acwing.com/problem/content/4947/">4944. 热身计算</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6125128/">AcWing 4944. 热身计算</a></p><hr><h4 id="T2-4945-比大小"><a href="#T2-4945-比大小" class="headerlink" title="T2: 4945. 比大小"></a>T2: <a href="https://www.acwing.com/problem/content/4948/">4945. 比大小</a></h4><p><strong>考察知识点</strong>：<u>直接模拟，快速幂计算，秦九韶算法</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6125715/">AcWing 4945. 比大小</a></p><hr><h4 id="T3-4946-叶子节点"><a href="#T3-4946-叶子节点" class="headerlink" title="T3: 4946. 叶子节点"></a>T3: <a href="https://www.acwing.com/problem/content/4949/">4946. 叶子节点</a></h4><p><strong>考察知识点</strong>：<u>树的深度优先遍历</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6156437/">AcWing 4946. 叶子节点</a></p><hr><h2 id="第二届ACC-AcWing-Cup-全国联赛"><a href="#第二届ACC-AcWing-Cup-全国联赛" class="headerlink" title="第二届ACC(AcWing Cup)全国联赛"></a>第二届ACC(AcWing Cup)全国联赛</h2><h4 id="T1-4941-凑数"><a href="#T1-4941-凑数" class="headerlink" title="T1: 4941. 凑数"></a>T1: <a href="https://www.acwing.com/problem/content/4944/">4941. 凑数</a></h4><p><strong>考察知识点</strong>：<u>位运算，二进制</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6175836/">AcWing 4941. 凑数</a></p><hr><h4 id="T2-4942-砝码称重"><a href="#T2-4942-砝码称重" class="headerlink" title="T2: 4942. 砝码称重"></a>T2: <a href="https://www.acwing.com/problem/content/4945/">4942. 砝码称重</a></h4><p><strong>考察知识点</strong>：<u>同余性质，n进制</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6177606/">AcWing 4942. 砝码称重</a></p><hr><h2 id="AcWing-周赛-第96场题解"><a href="#AcWing-周赛-第96场题解" class="headerlink" title="AcWing-周赛 第96场题解"></a>AcWing-周赛 第96场题解</h2><h4 id="T1-4876-完美数"><a href="#T1-4876-完美数" class="headerlink" title="T1: 4876. 完美数"></a>T1: <a href="https://www.acwing.com/problem/content/4879/">4876. 完美数</a></h4><p><strong>考察知识点</strong>：<u>完美数，整除性质</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6037798/">AcWing 4876. 完美数</a></p><hr><h4 id="T2-4877-最大价值"><a href="#T2-4877-最大价值" class="headerlink" title="T2: 4877. 最大价值"></a>T2: <a href="https://www.acwing.com/problem/content/4880/">4877. 最大价值</a></h4><p><strong>考察知识点</strong>：<u>DP裸题，完全背包+多重背包组合</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6062906/">AcWing 4877. 最大价值</a></p><hr><h2 id="AcWing-周赛-第95场题解"><a href="#AcWing-周赛-第95场题解" class="headerlink" title="AcWing-周赛 第95场题解"></a>AcWing-周赛 第95场题解</h2><h4 id="T1-4873-简单计算"><a href="#T1-4873-简单计算" class="headerlink" title="T1:4873. 简单计算"></a>T1:<a href="https://www.acwing.com/problem/content/4876/">4873. 简单计算</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5957060/">AcWing 4873. 简单计算</a></p><hr><h4 id="T2-4874-约数"><a href="#T2-4874-约数" class="headerlink" title="T2: 4874. 约数"></a>T2: <a href="https://www.acwing.com/problem/content/4877/">4874. 约数</a></h4><p><strong>考察知识点</strong>：<u>筛质数，线性筛法</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5959789/">AcWing 4874. 约数</a></p><hr><h2 id="AcWing-周赛-第94场题解"><a href="#AcWing-周赛-第94场题解" class="headerlink" title="AcWing-周赛 第94场题解"></a>AcWing-周赛 第94场题解</h2><h4 id="T1-4870-装物品"><a href="#T1-4870-装物品" class="headerlink" title="T1: 4870. 装物品"></a>T1: <a href="https://www.acwing.com/problem/content/4873/">4870. 装物品</a></h4><p><strong>考察知识点</strong>：<u>判断余数，向上取整</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5852668/">AcWing 4870. 装物品</a></p><hr><h2 id="AcWing-周赛-第93场题解"><a href="#AcWing-周赛-第93场题解" class="headerlink" title="AcWing-周赛 第93场题解"></a>AcWing-周赛 第93场题解</h2><h4 id="T1-4867-整除数"><a href="#T1-4867-整除数" class="headerlink" title="T1: 4867. 整除数"></a>T1: <a href="https://www.acwing.com/problem/content/4870/">4867. 整除数</a></h4><p><strong>考察知识点</strong>：<u>除法性质，整除</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5738492/">AcWing 4867. 整除数</a></p><hr><h2 id="AcWing-周赛-第92场题解"><a href="#AcWing-周赛-第92场题解" class="headerlink" title="AcWing-周赛 第92场题解"></a>AcWing-周赛 第92场题解</h2><h4 id="T1-4864-多边形"><a href="#T1-4864-多边形" class="headerlink" title="T1: 4864. 多边形"></a>T1: <a href="https://www.acwing.com/problem/content/4867/">4864. 多边形</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5628101/">AcWing 4864. 多边形</a></p><hr><h2 id="AcWing-周赛-第xx场题解"><a href="#AcWing-周赛-第xx场题解" class="headerlink" title="AcWing-周赛 第xx场题解"></a>AcWing-周赛 第xx场题解</h2><h4 id="T1"><a href="#T1" class="headerlink" title="T1:"></a>T1:</h4><p><strong>考察知识点</strong>：</p><p><strong>题解及分析</strong>：</p><p>ps:还有之前的一些周赛，待整理… (抽空更)</p><hr><h2 id="活动地址"><a href="#活动地址" class="headerlink" title="活动地址"></a>活动地址</h2><p><a href="https://www.acwing.com/activity/1/competition/">竞赛 - AcWing周赛</a></p>]]></content>
      
      
      <categories>
          
          <category> AcWing周赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> AcWing </tag>
            
            <tag> 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础 第四讲 SSH和SCP</title>
      <link href="/posts/58be.html"/>
      <url>/posts/58be.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux基础-第四讲-SSH和SCP"><a href="#Linux基础-第四讲-SSH和SCP" class="headerlink" title="Linux基础 第四讲 SSH和SCP"></a>Linux基础 第四讲 SSH和SCP</h1><h2 id="1-教程"><a href="#1-教程" class="headerlink" title="1. 教程"></a>1. 教程</h2><h3 id="（1）ssh登录"><a href="#（1）ssh登录" class="headerlink" title="（1）ssh登录"></a>（1）ssh登录</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p><strong>远程登录服务器：ssh user@hostname</strong></p><ul><li>user: 用户名</li><li>hostname: IP地址或域名</li></ul><p><strong>第一次登录</strong>时会提示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;123.57.47.211 (123.57.47.211)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:iy237yysfCe013/l+kpDGfEG9xxHxm0dnxnAbJTPpG8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span><br></pre></td></tr></table></figure><p>输入yes，然后回车即可。</p><p>这样会将该服务器的信息记录在<code>~/.ssh/known_hosts</code>文件中。</p><p>然后输入密码即可登录到远程服务器中。</p><hr><p>默认登录端口号为22。如果想<strong>登录某一特定端口</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname -p 22</span><br></pre></td></tr></table></figure><hr><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>创建文件 <code>~/.ssh/config</code>。</p><p>然后在文件中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host myserver1</span><br><span class="line">    HostName IP地址或域名</span><br><span class="line">    User 用户名</span><br><span class="line"></span><br><span class="line">Host myserver2</span><br><span class="line">    HostName IP地址或域名</span><br><span class="line">    User 用户名</span><br></pre></td></tr></table></figure><p>之后再使用服务器时，可以直接使用别名myserver1、myserver2。</p><p><strong>ssh + myserver1</strong> <strong>使用别名登录</strong></p><hr><h4 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h4><p>创建密钥：<code>ssh-keygen</code><br>然后一直回车即可。</p><p>执行结束后，<code>~/.ssh/</code>目录下会多两个文件：</p><ul><li><p><strong>id_rsa：私钥</strong></p></li><li><p><strong>id_rsa.pub：公钥(可以公开)</strong></p></li></ul><p><strong>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</strong></p><p>例如，想免密登录myserver服务器。则将公钥中的内容，复制到myserver中的**~/.ssh/authorized_keys**文件里即可。</p><p>也可以使用如下命令<strong>一键添加公钥</strong>：</p><p><code>ssh-copy-id myserver</code></p><hr><h4 id="执行命令-自动化运维会用到"><a href="#执行命令-自动化运维会用到" class="headerlink" title="执行命令(自动化运维会用到)"></a>执行命令(自动化运维会用到)</h4><p>命令格式：<code>ssh user@hostname command</code></p><p><strong>命令会在服务端运行</strong></p><p>例如    <code>ssh user@hostname ls -a</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单引号中的<span class="variable">$i</span>可以求值</span></span><br><span class="line"></span><br><span class="line">ssh myserver &#x27;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&#x27;  # 将服务器端的结果返回到当前终端里输出</span><br><span class="line">或者</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">双引号中的<span class="variable">$i</span>不可以求值</span></span><br><span class="line"></span><br><span class="line">ssh myserver &quot;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="（2）scp传文件"><a href="#（2）scp传文件" class="headerlink" title="（2）scp传文件"></a>（2）scp传文件</h3><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>命令格式：    <code>scp source destination</code><br>将source路径下的文件复制到destination中</p><p><strong>一次复制多个文件：</strong></p><p><code>scp source1 source2 destination</code></p><p><strong>复制文件夹：</strong></p><p><code>scp -r ~/tmp myserver:/home/acs/</code>  <strong># -r要放在路径前面</strong><br>将本地家目录中的tmp文件夹复制到myserver服务器中的<code>/home/acs/</code>目录下。(家目录)</p><p><code>scp -r ~/tmp myserver:homework/</code><br>将本地家目录中的tmp文件夹复制到myserver服务器中的<code>~/homework/</code>目录下。</p><p><code>scp -r myserver:homework .</code><br>将myserver服务器中的~/homework/文件夹复制到本地的当前路径下。</p><p>ps:</p><p>对于传文件，文件传过去，对于<strong>文件名不冲突的文件，是以追加的方式</strong>。(类似cp命令)</p><p>而所传的文件在另一边已经有了<strong>同名时，是以覆盖的形式</strong>, 文件夹不覆盖。</p><p>指定服务器的端口号：</p><p><code>scp -P 22 source1 source2 destination</code><br>注意： <strong>scp的-r -P等参数尽量加在source和destination之前</strong>。</p><p><strong>使用scp配置其他服务器的vim和tmux</strong> (y总的传家配置hh)<br><strong>scp ~/.vimrc ~/.tmux.conf myserver:</strong></p><hr><h2 id="2-获取ssh教程配套的远程服务器账号的信息"><a href="#2-获取ssh教程配套的远程服务器账号的信息" class="headerlink" title="2.获取ssh教程配套的远程服务器账号的信息"></a>2.获取ssh教程配套的远程服务器账号的信息</h2><p><code>homework 4 getinfo</code></p><hr><h2 id="3-创建作业-amp-测试作业的正确性"><a href="#3-创建作业-amp-测试作业的正确性" class="headerlink" title="3. 创建作业 &amp; 测试作业的正确性"></a>3. 创建作业 &amp; 测试作业的正确性</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">homework 4 create 可以重新创建所有lesson_4的作业</span><br><span class="line">homework 4 create id 可以单独创建lesson_4的第id个作业. e.g.</span><br><span class="line">    homework 4 create 0 可以只重新创建lesson_4的第0个作业</span><br><span class="line">homework 4 test 可以评测lesson_4的所有作业</span><br></pre></td></tr></table></figure><hr><h2 id="4-作业"><a href="#4-作业" class="headerlink" title="4. 作业"></a>4. 作业</h2><p>创建好作业后，先进入文件夹/home/acs/homework/lesson_4/，然后：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(0) 进入homework_0文件夹，要求：</span><br><span class="line">    [1] 该文件夹内容为空</span><br><span class="line">    [2] 配置服务器账号的密钥登陆方式。服务器信息可以通过如下命令获得：</span><br><span class="line">        homework 4 getinfo</span><br><span class="line">        将服务器账号的名称（Host）配置成：myserver</span><br><span class="line">        </span><br><span class="line">(1) 进入homework_1文件夹，下列描述中的“本地”均表示当前文件夹。要求：</span><br><span class="line">    [1] 在myserver服务器上创建并清空文件夹：~/homework/lesson_4/homework_1/</span><br><span class="line">    [2] 将本地的main.cpp文件上传到myserver中的~/homework/lesson_4/homework_1/目录中。</span><br><span class="line">    [3] 在本地创建文件夹dir。</span><br><span class="line">    [4] 将myserver中的/etc/lsb-release文件复制到dir中。</span><br><span class="line">    </span><br><span class="line">(2) 进入homework_2文件夹，下列描述中的“本地”均表示当前文件夹，要求：</span><br><span class="line">    [1] 在myserver服务器上创建并清空文件夹：~/homework/lesson_4/homework_2/</span><br><span class="line">    [2] 将本地的dir文件夹上传到myserver中的~/homework/lesson_4/homework_2/目录中。</span><br><span class="line">    </span><br><span class="line">(3) 进入homework_3文件夹，下列描述中的“本地”均表示当前文件夹，要求：</span><br><span class="line">    [1] 在本地创建文件夹dir。</span><br><span class="line">    [2] 将myserver中的/var/lib/locales/supported.d文件夹下载到本地dir文件夹中。</span><br><span class="line">    </span><br><span class="line">(4) 进入homework_4文件夹，编写脚本remote_mkdir.sh和remote_rmdir.sh，要求：</span><br><span class="line">    [1] 在myserver服务器上创建并清空文件夹：~/homework/lesson_4/homework_4/</span><br><span class="line">    [2] 本地目录下仅包含remote_mkdir.sh和remote_rmdir.sh</span><br><span class="line">    [3] remote_mkdir.sh和remote_rmdir.sh具有可执行权限</span><br><span class="line">    [4] remote_mkdir.sh接收一个传入参数。格式为 ./remote_mkdir.sh directory_name</span><br><span class="line">        该操作可以在myserver服务器上的~/homework/lesson_4/homework_4/目录下，创建一个名为directory_name的文件夹</span><br><span class="line">    [5] remote_rmdir.sh接收一个传入传输。格式为 ./remote_rmdir.sh directory_name</span><br><span class="line">        该操作可以将myserver服务器上的~/homework/lesson_4/homework_4/目录下的名为directory_name的文件夹删掉。</span><br><span class="line">    [6] 注意：传入的文件参数可能包含空格。两个脚本均不需要判断传入参数的合法性。</span><br></pre></td></tr></table></figure><hr><p><strong>章节作业打卡笔记：</strong><br><a href="https://www.acwing.com/activity/content/code/content/6375445/">homework_0</a>    <a href="https://www.acwing.com/activity/content/code/content/6375538/">homework_1</a>    <a href="https://www.acwing.com/activity/content/code/content/6375639/">homework_2</a><br><a href="https://www.acwing.com/activity/content/code/content/6375675/">homework_3</a>    <a href="https://www.acwing.com/activity/content/code/content/6375762/">homework_4</a></p><hr><h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5.参考资料"></a>5.参考资料</h2><p>讲义整理自Linux基础课讲义，及评论区的问答整理</p><p><a href="https://www.acwing.com/activity/content/57/">Linux基础课程-AcWing</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ssh </tag>
            
            <tag> scp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据挖掘与机器学习 线性回归设计 实训1</title>
      <link href="/posts/4f1a.html"/>
      <url>/posts/4f1a.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据挖掘与机器学习-线性回归设计-实训1"><a href="#数据挖掘与机器学习-线性回归设计-实训1" class="headerlink" title="数据挖掘与机器学习 线性回归设计 实训1"></a>数据挖掘与机器学习 线性回归设计 实训1</h2><h3 id="（1）实训目的"><a href="#（1）实训目的" class="headerlink" title="（1）实训目的"></a>（1）实训目的</h3><p><strong>1.掌握回归的基本思想；</strong></p><p><strong>2.掌握梯度法的基本原理 。</strong></p><hr><h3 id="（2）主要内容"><a href="#（2）主要内容" class="headerlink" title="（2）主要内容"></a>（2）主要内容</h3><p>1.实现一元线性回归；</p><p>2.画出散点图、回归参数与迭代次数的变化曲线；</p><p>3.分析不同数据变化对回归结果的影响。</p><hr><h3 id="（3）具体处理步骤"><a href="#（3）具体处理步骤" class="headerlink" title="（3）具体处理步骤"></a>（3）具体处理步骤</h3><h4 id="1-导入数据集，绘制数据的散点图"><a href="#1-导入数据集，绘制数据的散点图" class="headerlink" title="1. 导入数据集，绘制数据的散点图"></a>1. 导入数据集，绘制数据的散点图</h4><p><a href="https://pan.baidu.com/s/1jO2p0CSBQedb7QE7PkbJ3A?pwd=2023">data1.txt 数据集下载</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data=np.loadtxt(<span class="string">&quot;data1.txt&quot;</span>, delimiter=<span class="string">&quot;,&quot;</span>) <span class="comment"># 读取数据集，列索引分别是x和y</span></span><br><span class="line"></span><br><span class="line">x=data[:,<span class="number">0</span>:<span class="number">1</span>] <span class="comment"># 取x这列所有值,训练数据</span></span><br><span class="line">y=data[:,<span class="number">1</span>:]</span><br><span class="line">plt.scatter(x,y) <span class="comment"># 绘制散点图</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291223504.png" alt="img-202304291223504"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.shape <span class="comment"># 原数据集形状，n行m列</span></span><br></pre></td></tr></table></figure><pre><code>(97, 2)</code></pre><hr><h4 id="2-对特征进行归一化处理"><a href="#2-对特征进行归一化处理" class="headerlink" title="2. 对特征进行归一化处理"></a>2. 对特征进行归一化处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">featureNormalize</span>(<span class="params">x</span>): <span class="comment"># （特征值x的取值差别较大）需消除特征值的量纲</span></span><br><span class="line">    avg = x.mean()</span><br><span class="line">    sstd = np.std(x, axis=<span class="number">0</span>, ddof=<span class="number">1</span>) <span class="comment"># 进行标准差标准化处理（ddof是分母为n-1,无偏估计）</span></span><br><span class="line">    x = (x-avg)/sstd</span><br><span class="line">    <span class="keyword">return</span> x, avg, sstd</span><br></pre></td></tr></table></figure><hr><h4 id="3-1-定义损失函数-h-theta是预测函数（假设函数），j-theta是损失函数"><a href="#3-1-定义损失函数-h-theta是预测函数（假设函数），j-theta是损失函数" class="headerlink" title="3.1 定义损失函数   h_theta是预测函数（假设函数），j_theta是损失函数"></a>3.1 定义损失函数   h_theta是预测函数（假设函数），j_theta是损失函数</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291221890.png" alt="img-202304291221890" style="zoom:67%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291221178.png" alt="img-202304291221178" style="zoom: 80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">computeCost</span>(<span class="params">x, y, theta</span>): <span class="comment"># 损失函数j_theta</span></span><br><span class="line">    m = x.shape[<span class="number">0</span>] <span class="comment"># 获取第一维度的长度（行数），即X特征项对应的个数</span></span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>((np.dot(x,theta) - y)**<span class="number">2</span>)/(<span class="number">2</span>*m)</span><br></pre></td></tr></table></figure><hr><h4 id="3-2-梯度下降算法"><a href="#3-2-梯度下降算法" class="headerlink" title="3.2 梯度下降算法"></a>3.2 梯度下降算法</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291222715.png" alt="img-202304291222715" style="zoom:67%;" /><h6 id="利用公式-theta-是预测函数每项的系数，times：梯度下降次数，alpha：梯度下降参数变化率"><a href="#利用公式-theta-是预测函数每项的系数，times：梯度下降次数，alpha：梯度下降参数变化率" class="headerlink" title="利用公式 theta : 是预测函数每项的系数，times：梯度下降次数，alpha：梯度下降参数变化率"></a>利用公式 theta : 是预测函数每项的系数，times：梯度下降次数，alpha：梯度下降参数变化率</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gradientDescent</span>(<span class="params">x, y, theta, times, alpha</span>):</span><br><span class="line">    theta_0 = np.ones(x.shape[<span class="number">0</span>]).T</span><br><span class="line">    x = np.insert(x, <span class="number">0</span>, theta_0, axis=<span class="number">1</span>) <span class="comment"># 对原始数据加入一个全为1的列，方便后续计算</span></span><br><span class="line">    m = x.shape[<span class="number">0</span>] <span class="comment"># 行数</span></span><br><span class="line">    n = x.shape[<span class="number">1</span>] <span class="comment"># 列数</span></span><br><span class="line">    costs = np.zeros(times) <span class="comment"># 初始化损失数组</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(times): <span class="comment"># 循环迭代，计算梯度下降的值</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            theta[j] = theta[j] + (alpha/m) * np.<span class="built_in">sum</span>(y - np.dot(x,theta) * x[:,j].reshape(-<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        costs[num] = computeCost(x, y, theta)</span><br><span class="line">    <span class="keyword">return</span> costs <span class="comment"># 返回每次迭代计算的损失</span></span><br></pre></td></tr></table></figure><hr><h4 id="4-计算求得的直线"><a href="#4-计算求得的直线" class="headerlink" title="4. 计算求得的直线"></a>4. 计算求得的直线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x_orgin=x <span class="comment"># 分别取x，y这列的值</span></span><br><span class="line">y_orgin=y</span><br><span class="line"></span><br><span class="line">x1, avg, sstd = featureNormalize(x_orgin) <span class="comment"># 得到经特征归一化后的特征值x</span></span><br><span class="line"></span><br><span class="line">theta = np.zeros(x1.shape[<span class="number">1</span>]+<span class="number">1</span>).reshape(-<span class="number">1</span>,<span class="number">1</span>) <span class="comment"># 变为1列的列向量（2个theta值）</span></span><br><span class="line">times = <span class="number">600</span></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">costs = gradientDescent(x1, y_orgin, theta, times, alpha)</span><br><span class="line"></span><br><span class="line">plt.scatter(x1, y_orgin) <span class="comment"># x1是（-1~4）</span></span><br><span class="line">h_theta = theta[<span class="number">0</span>]+theta[<span class="number">1</span>]*x1 <span class="comment"># 预测的直线</span></span><br><span class="line">plt.plot(x1, h_theta, color= <span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291224464.png" alt="img-202304291224464"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;预测函数: y = %f + %f * x&#x27;</span> % (theta[<span class="number">0</span>], theta[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证，x=3时，y应该在23附近</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x=3, y = %f&#x27;</span> % (theta[<span class="number">0</span>] + <span class="number">3</span>*theta[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><pre><code>预测函数: y = 5.825092 + 5.884855 * xx=3, y = 23.479657</code></pre><hr><h4 id="5-画损失函数，损失随迭代次数变化的曲线"><a href="#5-画损失函数，损失随迭代次数变化的曲线" class="headerlink" title="5. 画损失函数，损失随迭代次数变化的曲线"></a>5. 画损失函数，损失随迭代次数变化的曲线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_times = np.linspace(<span class="number">1</span>,times,times)</span><br><span class="line">plt.plot(x_times, costs[<span class="number">0</span>:times], color=<span class="string">&quot;orange&quot;</span>,linewidth=<span class="number">3</span>) <span class="comment"># 纵坐标是损失值</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291224616.png" alt="img-202304291224616"></p><hr><h4 id="6-结果分析"><a href="#6-结果分析" class="headerlink" title="6. 结果分析"></a>6. 结果分析</h4><p><strong>分析可知，当迭代次数到200次左右时，损失函数趋于收敛损失值达到最小值，迭代次数太多，可能使得出现过拟合现象</strong></p><p><strong>alpha 越小时，即步长越小，使得训练过程中的变化速度较慢，但可能更易于损失函数收敛</strong></p><hr><h3 id="（4）参考资料"><a href="#（4）参考资料" class="headerlink" title="（4）参考资料"></a>（4）参考资料</h3><p><a href="https://pan.baidu.com/s/1jO2p0CSBQedb7QE7PkbJ3A?pwd=2023">data1.txt 数据集下载</a></p><p><a href="https://www.bilibili.com/video/BV1yf4y1o7A5/?spm_id_from=333.788&vd_source=29b001fc6ca0d80398a993dc92c03a9b">机器学习讲解-B站</a></p><p><a href="https://www.bilibili.com/video/BV1GZ4y1e7fK/?share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">使用梯度下降法求解线性回归问题</a></p><p><a href="https://www.acwing.com/blog/content/25336/">Python机器学习笔记 - AcWing</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据挖掘与机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析与可视化 上机实践4（Matplotlib 数据可视化）</title>
      <link href="/posts/1908.html"/>
      <url>/posts/1908.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析与可视化-上机实践4（Matplotlib-数据可视化）"><a href="#数据分析与可视化-上机实践4（Matplotlib-数据可视化）" class="headerlink" title="数据分析与可视化 上机实践4（Matplotlib 数据可视化）"></a>数据分析与可视化 上机实践4（Matplotlib 数据可视化）</h2><h3 id="一、实践目的"><a href="#一、实践目的" class="headerlink" title="一、实践目的"></a>一、实践目的</h3><p><strong>1.了解matplotlib库的基本功能。</strong></p><p><strong>2.掌握matplotlib库的使用方法</strong>。 </p><hr><h3 id="二、数据集介绍"><a href="#二、数据集介绍" class="headerlink" title="二、数据集介绍"></a>二、数据集介绍</h3><p>食品偏好数据集统计了2019年不同国家人民对不同食物的偏好情况。数据共计288条，各数据字段含义如下表所示。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301405896.png" alt="img-202304301405896"></p><p><a href="https://pan.baidu.com/s/1XowxkVb9QLds3itkLlL8HA?pwd=2023">food.csv 数据集下载</a></p><hr><h3 id="三、实践内容要求"><a href="#三、实践内容要求" class="headerlink" title="三、实践内容要求"></a>三、实践内容要求</h3><p>1、绘制正弦曲线，并设置标题、坐标轴名称和坐标轴范围；</p><p>2、同一坐标系下绘制多种曲线并通过样式、宽度和颜色加以区分；</p><p>3、对食品偏好数据集进行可视化处理。</p><p>（1）读取数据集，并显示前5行；</p><p>（2）删除无用特征Timestamp和Participant_ID；</p><p>（3）查看数据集的基本情况和统计信息；</p><p>（4）绘制不同国家参与者人数柱状图；</p><p>（5）利用饼形图分别绘制男性和女性对甜点的偏好；</p><p>（6）利用箱体图绘制不同年龄的人对果汁偏爱对比图；</p><p>（7）利用散点图绘制不同年龄的人对甜点的偏爱对比图（提示：年龄作为x轴，maybe，yes和no分别用0,1和-1来表示作为y轴，同时用不同颜色的散点表示Traditional Food和Western Food）；</p><p>（8）根据所绘制的图形，分析人们对不同食物的偏好情况。</p><hr><h3 id="四、完成情况"><a href="#四、完成情况" class="headerlink" title="四、完成情况"></a>四、完成情况</h3><h4 id="（1）简单绘制曲线"><a href="#（1）简单绘制曲线" class="headerlink" title="（1）简单绘制曲线"></a>（1）简单绘制曲线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、绘制正弦曲线，并设置标题、坐标轴名称和坐标轴范围；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>] </span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 可以正常显示中文</span></span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br><span class="line">data=np.arange(<span class="number">0</span>, np.pi*<span class="number">4</span>, <span class="number">0.01</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">4</span>,<span class="number">3</span>),dpi=<span class="number">120</span>)  </span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;sin(x) 正弦曲线&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>,np.pi*<span class="number">4</span>) <span class="comment"># x轴范围</span></span><br><span class="line">plt.ylim(-<span class="number">1</span>,<span class="number">1</span>) <span class="comment"># y轴范围</span></span><br><span class="line">plt.xticks([<span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi, np.pi*<span class="number">3</span>/<span class="number">2</span>, np.pi*<span class="number">2</span>, np.pi*<span class="number">5</span>/<span class="number">2</span>, np.pi*<span class="number">3</span>, np.pi*<span class="number">7</span>/<span class="number">2</span>, np.pi*<span class="number">4</span>]) <span class="comment"># 具体刻度</span></span><br><span class="line">plt.yticks([-<span class="number">1</span>,-<span class="number">0.5</span>,<span class="number">0</span>,<span class="number">0.5</span>,<span class="number">1</span>])</span><br><span class="line">plt.plot(data,np.sin(data)) <span class="comment"># 绘制正弦曲线</span></span><br><span class="line">plt.legend([<span class="string">&#x27;sin&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291817274.png" alt="img-202304291817274"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2、同一坐标系下绘制多种曲线并通过样式、宽度和颜色加以区分；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>] </span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  </span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">4</span>,<span class="number">4</span>),dpi=<span class="number">100</span>) </span><br><span class="line">data=np.arange(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.01</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;多种曲线样式&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">plt.xticks([<span class="number">0</span>,<span class="number">0.2</span>,<span class="number">0.4</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1</span>])</span><br><span class="line">plt.yticks([<span class="number">0</span>,<span class="number">0.2</span>,<span class="number">0.4</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.plot(data, <span class="number">2.5</span>*data, marker=<span class="string">&#x27;^&#x27;</span>)</span><br><span class="line">plt.plot(data, data**<span class="number">0.5</span>, linewidth=<span class="number">4</span>)</span><br><span class="line">plt.plot(data, data**<span class="number">3</span>, linewidth=<span class="number">3</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.legend([<span class="string">&#x27;y=2.5*x&#x27;</span>,<span class="string">&#x27;y=x^0.5&#x27;</span>, <span class="string">&#x27;y=x^3&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291817635.png" alt="img-202304291817635"></p><hr><h4 id="（2）对食品偏好数据集进行可视化处理"><a href="#（2）对食品偏好数据集进行可视化处理" class="headerlink" title="（2）对食品偏好数据集进行可视化处理"></a>（2）对食品偏好数据集进行可视化处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）读取数据集，并显示前5行；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">food=pd.read_csv(<span class="string">&#x27;food.csv&#x27;</span>)</span><br><span class="line">food.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291822462.jpg" alt="img-202304291822462"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）删除无用特征Timestamp和Participant_ID；</span></span><br><span class="line"></span><br><span class="line">food.drop([<span class="string">&#x27;Timestamp&#x27;</span>,<span class="string">&#x27;Participant_ID&#x27;</span>],axis=<span class="number">1</span>,inplace=<span class="literal">True</span>) <span class="comment"># 删除这两列，并替换原数据</span></span><br><span class="line">food.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291822300.jpg" alt="img-202304291822300" style="zoom: 50%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）查看数据集的基本情况和统计信息；</span></span><br><span class="line"></span><br><span class="line">food.info()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 288 entries, 0 to 287</span><br><span class="line">Data columns (total 6 columns):</span><br><span class="line"> #   Column       Non-Null Count  Dtype </span><br><span class="line">---  ------       --------------  ----- </span><br><span class="line"> 0   Gender       284 non-null    object</span><br><span class="line"> 1   Nationality  288 non-null    object</span><br><span class="line"> 2   Age          288 non-null    int64 </span><br><span class="line"> 3   Food         288 non-null    object</span><br><span class="line"> 4   Juice        288 non-null    object</span><br><span class="line"> 5   Dessert      288 non-null    object</span><br><span class="line">dtypes: int64(1), object(5)</span><br><span class="line">memory usage: 13.6+ KB</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">food.describe()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291822894.jpg" alt="003" style="zoom:50%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）绘制不同国家参与者人数柱状图；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">7</span>,<span class="number">6</span>),dpi=<span class="number">100</span>) </span><br><span class="line">data=food[<span class="string">&#x27;Nationality&#x27;</span>].value_counts() <span class="comment"># 统计不同国家参与者人数</span></span><br><span class="line">data.plot(kind=<span class="string">&#x27;bar&#x27;</span>,rot=<span class="number">30</span>) <span class="comment">#设置对应国家的列标签，并倾斜30度</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;国家&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;人数&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;不同国家参与者人数柱状图&#x27;</span>)</span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="built_in">len</span>( data)),data)</span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(data)),data):</span><br><span class="line">    plt.text(x,y,y,ha = <span class="string">&#x27;center&#x27;</span>,va = <span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291817131.png" alt="img-202304291817131" style="zoom: 80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）利用饼形图分别绘制男性和女性对甜点的偏好；</span></span><br><span class="line"></span><br><span class="line">food.groupby(<span class="string">&#x27;Dessert&#x27;</span>)[<span class="string">&#x27;Gender&#x27;</span>].value_counts() <span class="comment"># 统计不同性别对甜点偏好的情况</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Dessert  Gender</span><br><span class="line">Maybe    Female    72</span><br><span class="line">         Male      50</span><br><span class="line">No       Female    35</span><br><span class="line">         Male      17</span><br><span class="line">Yes      Female    58</span><br><span class="line">         Male      52</span><br><span class="line">Name: Gender, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">food[<span class="string">&#x27;Gender&#x27;</span>].value_counts() <span class="comment"># 统计不同性别对应的人数，方便后面绘制饼图</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Female    165</span><br><span class="line">Male      119</span><br><span class="line">Name: Gender, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">8</span>),dpi=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">labels=[<span class="string">&#x27;Maybe&#x27;</span>,<span class="string">&#x27;No&#x27;</span>,<span class="string">&#x27;Yes&#x27;</span>]</span><br><span class="line">x=[<span class="number">72</span>/<span class="number">165</span>, <span class="number">35</span>/<span class="number">165</span>, <span class="number">58</span>/<span class="number">165</span>]</span><br><span class="line">explode=(<span class="number">0.01</span>, <span class="number">0.01</span>, <span class="number">0.01</span>)</span><br><span class="line">plt.pie(x, labels=labels, explode=explode, startangle=<span class="number">60</span>, autopct=<span class="string">&#x27;%1.1f %%&#x27;</span>) <span class="comment"># 分别绘制男性和女性对甜点偏好的饼图</span></span><br><span class="line">plt.title(<span class="string">&#x27;男性对甜点的偏好&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">labels=[<span class="string">&#x27;Maybe&#x27;</span>,<span class="string">&#x27;No&#x27;</span>,<span class="string">&#x27;Yes&#x27;</span>]</span><br><span class="line">x=[<span class="number">50</span>/<span class="number">119</span>, <span class="number">17</span>/<span class="number">119</span>, <span class="number">52</span>/<span class="number">119</span>]</span><br><span class="line">explode=(<span class="number">0.01</span>, <span class="number">0.01</span>, <span class="number">0.01</span>) <span class="comment"># autopct=&#x27;％1.1f%%&#x27;参数表示在饼形图上显示每个部分的百分比</span></span><br><span class="line">plt.pie(x, labels=labels, explode=explode, startangle=<span class="number">60</span>, autopct=<span class="string">&#x27;%1.1f %%&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;女性对甜点的偏好&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291814755.png" alt="img-202304291814755" style="zoom:80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）利用箱体图绘制不同年龄的人对果汁偏爱对比图</span></span><br><span class="line"></span><br><span class="line">food.groupby(<span class="string">&#x27;Juice&#x27;</span>)[<span class="string">&#x27;Age&#x27;</span>].value_counts() <span class="comment"># 先按对果汁的偏爱分组，再统计各自年龄对应的人数</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Juice              Age</span><br><span class="line">Carbonated drinks  21     5</span><br><span class="line">                   23     4</span><br><span class="line">                   25     3</span><br><span class="line">                   22     2</span><br><span class="line">                   24     2</span><br><span class="line">                         ..</span><br><span class="line">Fresh Juice        60     1</span><br><span class="line">                   63     1</span><br><span class="line">                   65     1</span><br><span class="line">                   67     1</span><br><span class="line">                   74     1</span><br><span class="line">Name: Age, Length: 66, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">food[<span class="string">&#x27;Juice&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Fresh Juice          256</span><br><span class="line">Carbonated drinks     32</span><br><span class="line">Name: Juice, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">6</span>),dpi=<span class="number">90</span>)</span><br><span class="line"><span class="comment"># 为方便展示示例效果，这里使用seaborn库来绘制箱体图</span></span><br><span class="line"><span class="comment"># 生成一个水平方向的箱体图，其中每个箱子代表一种不同年龄段人群喜好某种果汁的程度</span></span><br><span class="line">sns.boxplot(x=food[<span class="string">&#x27;Age&#x27;</span>], y=food[<span class="string">&#x27;Juice&#x27;</span>], data=food, orient=<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置横纵坐标标签</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Age&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Juice&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291815783.png" alt="img-202304291815783" style="zoom: 80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）利用散点图绘制不同年龄的人对甜点的偏爱对比图（提示：年龄作为x轴，maybe，yes和no分别用0,1和-1来表示作为y轴，同时用不同颜色的散点表示Traditional Food和Western Food）。</span></span><br><span class="line"><span class="comment"># pd.set_option(&#x27;display.max_rows&#x27;, 100) # 让数据显示更全</span></span><br><span class="line"></span><br><span class="line">df=food.groupby(<span class="string">&#x27;Dessert&#x27;</span>)[<span class="string">&#x27;Age&#x27;</span>].value_counts() <span class="comment"># 统计不同年龄对甜点偏好的情况</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">4</span>),dpi=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(food[<span class="string">&#x27;Age&#x27;</span>], food[<span class="string">&#x27;Dessert&#x27;</span>], color=<span class="string">&#x27;green&#x27;</span>) <span class="comment"># 显示不同年龄，对应的甜品偏好情况</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291815498.png" alt="img-202304291815498" style="zoom: 80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">4</span>),dpi=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对原数据中对甜品的偏爱情况进行替换，y轴用这些来表示:Yes，Maybe和No分别用1，0和-1</span></span><br><span class="line">traditional_likes = food[food[<span class="string">&#x27;Food&#x27;</span>] == <span class="string">&#x27;Traditional food&#x27;</span>][<span class="string">&#x27;Dessert&#x27;</span>].replace(&#123;<span class="string">&#x27;Yes&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Maybe&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;No&#x27;</span>: -<span class="number">1</span>&#125;)</span><br><span class="line">western_likes = food[food[<span class="string">&#x27;Food&#x27;</span>] == <span class="string">&#x27;Western Food&#x27;</span>][<span class="string">&#x27;Dessert&#x27;</span>].replace(&#123;<span class="string">&#x27;Yes&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Maybe&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;No&#x27;</span>: -<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">age = food[<span class="string">&#x27;Age&#x27;</span>] <span class="comment"># x轴是在不同年龄下，人们对传统和西方食物的分布情况</span></span><br><span class="line">plt.scatter(age[food[<span class="string">&#x27;Food&#x27;</span>] == <span class="string">&#x27;Traditional food&#x27;</span>], traditional_likes, color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;Traditional food&#x27;</span>)</span><br><span class="line">plt.scatter(age[food[<span class="string">&#x27;Food&#x27;</span>] == <span class="string">&#x27;Western Food&#x27;</span>], western_likes, color=<span class="string">&#x27;blue&#x27;</span>, label=<span class="string">&#x27;Western Food&#x27;</span>) <span class="comment"># 西方美食对应 Western Food </span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Age&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Dessert&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()   </span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291816686.png" alt="img-202304291816686" style="zoom:80%;" /><hr><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#（8）根据所绘制的图形，分析人们对不同食物的偏好情况。</span><br><span class="line"></span><br><span class="line"># 在该图中，红色表示传统美食的偏好程度，蓝色表示西方美食的偏好程度。可以得出结论，在所有年龄段中人们似乎更喜欢传统美食。</span><br><span class="line"># 其中在年龄20到40之间的人群对传统美食的偏爱程度较高，年龄在15到30之间的人群对西方美食偏爱程度较高。</span><br></pre></td></tr></table></figure><hr><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p><a href="https://pan.baidu.com/s/1XowxkVb9QLds3itkLlL8HA?pwd=2023">food.csv 数据集下载</a></p><p> (5), (6), (7)中的可视化处理参考了<strong>chatgpt</strong>提供的解题思路</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析与可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析与可视化 上机实践3（Pandas 数据预处理）</title>
      <link href="/posts/e26c.html"/>
      <url>/posts/e26c.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析与可视化-上机实践3（Pandas-数据预处理）"><a href="#数据分析与可视化-上机实践3（Pandas-数据预处理）" class="headerlink" title="数据分析与可视化 上机实践3（Pandas 数据预处理）"></a>数据分析与可视化 上机实践3（Pandas 数据预处理）</h2><hr><h3 id="一、实践目的"><a href="#一、实践目的" class="headerlink" title="一、实践目的"></a>一、实践目的</h3><p>1.掌握数据预处理的思想和方法。<br><strong>2.进一步熟悉Pandas库的使用方法。</strong></p><hr><h3 id="二、数据集介绍"><a href="#二、数据集介绍" class="headerlink" title="二、数据集介绍"></a>二、数据集介绍</h3><p>Lending Club是一家美国P2P公司，投资者在平台中为融资方提供资金，并以此获得贷款利率收益。Lending Club为投资者与融资方提供平台。本实验使用Lending Club2015年公开数据集中截取的一小部分进行分析。数据分为三个部分：<br>（1）用户信息数据</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301433917.png" alt="img-202304301433917"></p><p>（2）用户历史数据</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301433211.png" alt="img-202304301433211"></p><p>（3）贷款交易数据</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301433303.png" alt="img-202304301433303"></p><p><a href="https://pan.baidu.com/s/1uu73xf2SVsJsAjBQceRfKA?pwd=2023">Lending Club2015年公开数据集下载</a></p><hr><h3 id="三、实践内容要求"><a href="#三、实践内容要求" class="headerlink" title="三、实践内容要求"></a>三、实践内容要求</h3><p>（1）导入三个数据表到DataFrame中；</p><p>（2）查看各数据表的前5行；</p><p>（3）查看数据基本情况，并对基本情况进行分析；</p><p>（4）利用“用户编号”这个公共变量，将用户信息数据和用户历史数据合并在一起，对比inner、outer、left和right连接的区别；</p><p>（5）将用户历史数据按账户平均存款排序；</p><p>（6）基于贷款交易数据，进行左连接，将三个数据合并在一起；</p><p>（7）删去用于合并的列名user_id，使用info查看数据缺失情况，删除缺失数据；</p><p>（8）将年收入进行离散化，分为高中低三档；</p><p>（9）贷款状态为”Charged Off”,”In Grace Period”, “Late (31-120 days)”的贷款有违约风险，视为不良贷款，将其值标记为1，其他贷款标记为0；</p><p>（10）将term、grade、emp_length、annual_inc、home_ownership、verification_status这些分类变量进行哑变量处理。</p><hr><h3 id="四、完成情况"><a href="#四、完成情况" class="headerlink" title="四、完成情况"></a>四、完成情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）导入三个数据表到DataFrame中；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">user = pd.read_csv(<span class="string">&#x27;user.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>) <span class="comment"># 读取文件</span></span><br><span class="line">history = pd.read_csv(<span class="string">&#x27;history.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>) </span><br><span class="line">loan = pd.read_csv(<span class="string">&#x27;loan.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）查看各数据表的前5行；</span></span><br><span class="line"></span><br><span class="line">user.head() <span class="comment"># 默认输出前5行数据</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301438980.jpg" alt="img-202304301438980" style="zoom: 60%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301438592.jpg" alt="img-202304301438592" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loan.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301438890.jpg" alt="img-202304301438890" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）查看数据基本情况，并对基本情况进行分析；</span></span><br><span class="line"></span><br><span class="line">user.info()</span><br><span class="line">history.info()</span><br><span class="line">loan.info()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 1707 entries, 0 to 1706</span><br><span class="line">Data columns (total 5 columns):</span><br><span class="line"> #   Column               Non-Null Count  Dtype  </span><br><span class="line">---  ------               --------------  -----  </span><br><span class="line"> 0   user_id              1707 non-null   int64  </span><br><span class="line"> 1   emp_length           1633 non-null   object </span><br><span class="line"> 2   home_ownership       1707 non-null   object </span><br><span class="line"> 3   annual_inc           1707 non-null   float64</span><br><span class="line"> 4   verification_status  1707 non-null   object </span><br><span class="line">dtypes: float64(1), int64(1), object(3)</span><br><span class="line">memory usage: 66.8+ KB</span><br><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 1648 entries, 0 to 1647</span><br><span class="line">Data columns (total 3 columns):</span><br><span class="line"> #   Column                Non-Null Count  Dtype  </span><br><span class="line">---  ------                --------------  -----  </span><br><span class="line"> 0   user                  1648 non-null   int64  </span><br><span class="line"> 1   acc_open_past_24mths  1648 non-null   int64  </span><br><span class="line"> 2   avg_cur_bal           1646 non-null   float64</span><br><span class="line">dtypes: float64(1), int64(2)</span><br><span class="line">memory usage: 38.8 KB</span><br><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 1269 entries, 0 to 1268</span><br><span class="line">Data columns (total 5 columns):</span><br><span class="line"> #   Column       Non-Null Count  Dtype </span><br><span class="line">---  ------       --------------  ----- </span><br><span class="line"> 0   user         1269 non-null   int64 </span><br><span class="line"> 1   term         1269 non-null   object</span><br><span class="line"> 2   int_rate     1269 non-null   object</span><br><span class="line"> 3   grade        1269 non-null   object</span><br><span class="line"> 4   loan_status  1269 non-null   object</span><br><span class="line">dtypes: int64(1), object(4)</span><br><span class="line">memory usage: 49.7+ KB</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）利用“用户编号”这个公共变量，将用户信息数据和用户历史数据合并在一起，对比inner、outer、left和right连接的区别；</span></span><br><span class="line"></span><br><span class="line">a1 = pd.merge(user, history, left_on=<span class="string">&#x27;user_id&#x27;</span>, right_on=<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a1)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">      user_id emp_length home_ownership  annual_inc verification_status  user  \</span><br><span class="line">0           1  10+ years           RENT     78000.0     Source Verified     1   </span><br><span class="line">1           2    8 years       MORTGAGE     58000.0        Not Verified     2   </span><br><span class="line">2           3  10+ years       MORTGAGE    125000.0            Verified     3   </span><br><span class="line">3           4  10+ years           RENT     69000.0     Source Verified     4   </span><br><span class="line">4           5   &lt; 1 year           RENT     50000.0     Source Verified     5   </span><br><span class="line">...       ...        ...            ...         ...                 ...   ...   </span><br><span class="line">1643     1644  10+ years            OWN     72000.0            Verified  1644   </span><br><span class="line">1644     1645    7 years       MORTGAGE     62000.0     Source Verified  1645   </span><br><span class="line">1645     1646    4 years           RENT     50000.0     Source Verified  1646   </span><br><span class="line">1646     1647     1 year           RENT     45000.0        Not Verified  1647   </span><br><span class="line">1647     1648    2 years            OWN     35000.0        Not Verified  1648   </span><br><span class="line"></span><br><span class="line">      acc_open_past_24mths  avg_cur_bal  </span><br><span class="line">0                        5      29828.0  </span><br><span class="line">1                        7       9536.0  </span><br><span class="line">2                        2      32727.0  </span><br><span class="line">3                        8       3214.0  </span><br><span class="line">4                        6       5857.0  </span><br><span class="line">...                    ...          ...  </span><br><span class="line">1643                     3       1676.0  </span><br><span class="line">1644                     4      21360.0  </span><br><span class="line">1645                     1       3180.0  </span><br><span class="line">1646                     8       3652.0  </span><br><span class="line">1647                     3       1586.0  </span><br><span class="line"></span><br><span class="line">[1648 rows x 8 columns]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）将用户历史数据按账户平均存款排序；</span></span><br><span class="line"></span><br><span class="line">a2 = history.sort_values(by = <span class="string">&#x27;avg_cur_bal&#x27;</span>)</span><br><span class="line">a2.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301439203.jpg" alt="img-202304301439203" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）基于贷款交易数据，进行左连接，将三个数据合并在一起；</span></span><br><span class="line"></span><br><span class="line">a3 = pd.merge(a1, loan, how=<span class="string">&#x27;left&#x27;</span>) <span class="comment"># 将三表进行左连接</span></span><br><span class="line"><span class="built_in">print</span>(a3)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">      user_id emp_length home_ownership  annual_inc verification_status  user  \</span><br><span class="line">0           1  10+ years           RENT     78000.0     Source Verified     1   </span><br><span class="line">1           2    8 years       MORTGAGE     58000.0        Not Verified     2   </span><br><span class="line">2           3  10+ years       MORTGAGE    125000.0            Verified     3   </span><br><span class="line">3           4  10+ years           RENT     69000.0     Source Verified     4   </span><br><span class="line">4           5   &lt; 1 year           RENT     50000.0     Source Verified     5   </span><br><span class="line">...       ...        ...            ...         ...                 ...   ...   </span><br><span class="line">1643     1644  10+ years            OWN     72000.0            Verified  1644   </span><br><span class="line">1644     1645    7 years       MORTGAGE     62000.0     Source Verified  1645   </span><br><span class="line">1645     1646    4 years           RENT     50000.0     Source Verified  1646   </span><br><span class="line">1646     1647     1 year           RENT     45000.0        Not Verified  1647   </span><br><span class="line">1647     1648    2 years            OWN     35000.0        Not Verified  1648   </span><br><span class="line"></span><br><span class="line">      acc_open_past_24mths  avg_cur_bal        term int_rate grade  \</span><br><span class="line">0                        5      29828.0   60 months   12.39%     C   </span><br><span class="line">1                        7       9536.0   36 months    6.99%     A   </span><br><span class="line">2                        2      32727.0   60 months   17.14%     D   </span><br><span class="line">3                        8       3214.0   36 months   13.66%     C   </span><br><span class="line">4                        6       5857.0   36 months   13.66%     C   </span><br><span class="line">...                    ...          ...         ...      ...   ...   </span><br><span class="line">1643                     3       1676.0         NaN      NaN   NaN   </span><br><span class="line">1644                     4      21360.0         NaN      NaN   NaN   </span><br><span class="line">1645                     1       3180.0         NaN      NaN   NaN   </span><br><span class="line">1646                     8       3652.0         NaN      NaN   NaN   </span><br><span class="line">1647                     3       1586.0         NaN      NaN   NaN   </span><br><span class="line"></span><br><span class="line">          loan_status  </span><br><span class="line">0          Fully Paid  </span><br><span class="line">1         Charged Off  </span><br><span class="line">2     In Grace Period  </span><br><span class="line">3          Fully Paid  </span><br><span class="line">4         Charged Off  </span><br><span class="line">...               ...  </span><br><span class="line">1643              NaN  </span><br><span class="line">1644              NaN  </span><br><span class="line">1645              NaN  </span><br><span class="line">1646              NaN  </span><br><span class="line">1647              NaN  </span><br><span class="line"></span><br><span class="line">[1648 rows x 12 columns]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）删去用于合并的列名user_id，使用info查看数据缺失情况，删除缺失数据；</span></span><br><span class="line"></span><br><span class="line">a3.drop(<span class="string">&#x27;user_id&#x27;</span>,axis = <span class="number">1</span>,inplace = <span class="literal">True</span>) <span class="comment"># axis=1，删除user_id这一列</span></span><br><span class="line"><span class="built_in">print</span>(a3)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">     emp_length home_ownership  annual_inc verification_status  user  \</span><br><span class="line">0     10+ years           RENT     78000.0     Source Verified     1   </span><br><span class="line">1       8 years       MORTGAGE     58000.0        Not Verified     2   </span><br><span class="line">2     10+ years       MORTGAGE    125000.0            Verified     3   </span><br><span class="line">3     10+ years           RENT     69000.0     Source Verified     4   </span><br><span class="line">4      &lt; 1 year           RENT     50000.0     Source Verified     5   </span><br><span class="line">...         ...            ...         ...                 ...   ...   </span><br><span class="line">1643  10+ years            OWN     72000.0            Verified  1644   </span><br><span class="line">1644    7 years       MORTGAGE     62000.0     Source Verified  1645   </span><br><span class="line">1645    4 years           RENT     50000.0     Source Verified  1646   </span><br><span class="line">1646     1 year           RENT     45000.0        Not Verified  1647   </span><br><span class="line">1647    2 years            OWN     35000.0        Not Verified  1648   </span><br><span class="line"></span><br><span class="line">      acc_open_past_24mths  avg_cur_bal        term int_rate grade  \</span><br><span class="line">0                        5      29828.0   60 months   12.39%     C   </span><br><span class="line">1                        7       9536.0   36 months    6.99%     A   </span><br><span class="line">2                        2      32727.0   60 months   17.14%     D   </span><br><span class="line">3                        8       3214.0   36 months   13.66%     C   </span><br><span class="line">4                        6       5857.0   36 months   13.66%     C   </span><br><span class="line">...                    ...          ...         ...      ...   ...   </span><br><span class="line">1643                     3       1676.0         NaN      NaN   NaN   </span><br><span class="line">1644                     4      21360.0         NaN      NaN   NaN   </span><br><span class="line">1645                     1       3180.0         NaN      NaN   NaN   </span><br><span class="line">1646                     8       3652.0         NaN      NaN   NaN   </span><br><span class="line">1647                     3       1586.0         NaN      NaN   NaN   </span><br><span class="line"></span><br><span class="line">          loan_status  </span><br><span class="line">0          Fully Paid  </span><br><span class="line">1         Charged Off  </span><br><span class="line">2     In Grace Period  </span><br><span class="line">3          Fully Paid  </span><br><span class="line">4         Charged Off  </span><br><span class="line">...               ...  </span><br><span class="line">1643              NaN  </span><br><span class="line">1644              NaN  </span><br><span class="line">1645              NaN  </span><br><span class="line">1646              NaN  </span><br><span class="line">1647              NaN  </span><br><span class="line"></span><br><span class="line">[1648 rows x 11 columns]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a3.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">emp_length               71</span><br><span class="line">home_ownership            0</span><br><span class="line">annual_inc                0</span><br><span class="line">verification_status       0</span><br><span class="line">user                      0</span><br><span class="line">acc_open_past_24mths      0</span><br><span class="line">avg_cur_bal               2</span><br><span class="line">term                    379</span><br><span class="line">int_rate                379</span><br><span class="line">grade                   379</span><br><span class="line">loan_status             379</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a3.dropna(axis = <span class="number">0</span>, inplace =<span class="literal">True</span>) <span class="comment"># 沿行删除所有数据</span></span><br><span class="line">a3.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">emp_length              0</span><br><span class="line">home_ownership          0</span><br><span class="line">annual_inc              0</span><br><span class="line">verification_status     0</span><br><span class="line">user                    0</span><br><span class="line">acc_open_past_24mths    0</span><br><span class="line">avg_cur_bal             0</span><br><span class="line">term                    0</span><br><span class="line">int_rate                0</span><br><span class="line">grade                   0</span><br><span class="line">loan_status             0</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （8）将年收入进行离散化，分为高中低三档；</span></span><br><span class="line"></span><br><span class="line">a3[<span class="string">&#x27;年收入&#x27;</span>] = pd.cut(a3[<span class="string">&#x27;annual_inc&#x27;</span>], bins=[<span class="number">0</span>, <span class="number">50000</span>, <span class="number">100000</span>, a3[<span class="string">&#x27;annual_inc&#x27;</span>].<span class="built_in">max</span>()], labels=[<span class="string">&#x27;低&#x27;</span>,<span class="string">&#x27;中&#x27;</span>, <span class="string">&#x27;高&#x27;</span>])</span><br><span class="line">a3.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301440474.jpg" alt="img-202304301440474"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（9）贷款状态为&quot;Charged Off&quot;,&quot;In Grace Period&quot;, &quot;Late (31-120 days)&quot;的贷款有违约风险，视为不良贷款，将其值标记为1，其他贷款标记为0；</span></span><br><span class="line"><span class="comment"># 使用字典方式进行替换</span></span><br><span class="line"></span><br><span class="line">a3.replace(to_replace=&#123;<span class="string">&#x27;loan_status&#x27;</span>:</span><br><span class="line">&#123;<span class="string">&#x27;Fully Paid&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;Current&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;Charged Off&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;In Grace Period&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;Late (31-120 days)&#x27;</span>:<span class="number">1</span>&#125;&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">a3.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一种方法</span></span><br><span class="line"><span class="comment"># df[&#x27;loan_status&#x27;].replace(to_replace=[&#x27;Fully Paid&#x27;,&#x27;Current&#x27;,&#x27;Charged Off&#x27;,&#x27;In Grace Period&#x27;,&#x27;Late (31-120 days)&#x27;],</span></span><br><span class="line"><span class="comment"># value=[0,0,1,1,1],inplace=True)</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301441270.jpg" alt="009"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（10）将term、grade、emp_length、annual_inc、home_ownership、verification_status这些分类变量进行哑变量处理。</span></span><br><span class="line"></span><br><span class="line">ss = [<span class="string">&#x27;term&#x27;</span>, <span class="string">&#x27;grade&#x27;</span>, <span class="string">&#x27;emp_length&#x27;</span>, <span class="string">&#x27;annual_inc&#x27;</span>, <span class="string">&#x27;home_ownership&#x27;</span>, <span class="string">&#x27;verification_status&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> ss:</span><br><span class="line">    dum_list = pd.get_dummies(a3[s], prefix = s)</span><br><span class="line">    <span class="built_in">print</span>(dum_list.head())</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">   term_ 36 months  term_ 60 months</span><br><span class="line">0                0                1</span><br><span class="line">1                1                0</span><br><span class="line">2                0                1</span><br><span class="line">3                1                0</span><br><span class="line">4                1                0</span><br><span class="line">   grade_A  grade_B  grade_C  grade_D  grade_E  grade_F  grade_G</span><br><span class="line">0        0        0        1        0        0        0        0</span><br><span class="line">1        1        0        0        0        0        0        0</span><br><span class="line">2        0        0        0        1        0        0        0</span><br><span class="line">3        0        0        1        0        0        0        0</span><br><span class="line">4        0        0        1        0        0        0        0</span><br><span class="line">   emp_length_1 year  emp_length_10+ years  emp_length_2 years  \</span><br><span class="line">0                  0                     1                   0   </span><br><span class="line">1                  0                     0                   0   </span><br><span class="line">2                  0                     1                   0   </span><br><span class="line">3                  0                     1                   0   </span><br><span class="line">4                  0                     0                   0   </span><br><span class="line"></span><br><span class="line">   emp_length_3 years  emp_length_4 years  emp_length_5 years  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   0   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   emp_length_6 years  emp_length_7 years  emp_length_8 years  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   1   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   emp_length_9 years  emp_length_&lt; 1 year  </span><br><span class="line">0                   0                    0  </span><br><span class="line">1                   0                    0  </span><br><span class="line">2                   0                    0  </span><br><span class="line">3                   0                    0  </span><br><span class="line">4                   0                    1  </span><br><span class="line">   annual_inc_16000.0  annual_inc_18000.0  annual_inc_18500.0  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   0   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   annual_inc_19000.0  annual_inc_19600.0  annual_inc_20000.0  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   0   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   annual_inc_21000.0  annual_inc_21600.0  annual_inc_22000.0  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   0   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   annual_inc_22500.0  ...  annual_inc_280000.0  annual_inc_300000.0  \</span><br><span class="line">0                   0  ...                    0                    0   </span><br><span class="line">1                   0  ...                    0                    0   </span><br><span class="line">2                   0  ...                    0                    0   </span><br><span class="line">3                   0  ...                    0                    0   </span><br><span class="line">4                   0  ...                    0                    0   </span><br><span class="line"></span><br><span class="line">   annual_inc_300300.0  annual_inc_310000.0  annual_inc_335000.0  \</span><br><span class="line">0                    0                    0                    0   </span><br><span class="line">1                    0                    0                    0   </span><br><span class="line">2                    0                    0                    0   </span><br><span class="line">3                    0                    0                    0   </span><br><span class="line">4                    0                    0                    0   </span><br><span class="line"></span><br><span class="line">   annual_inc_350000.0  annual_inc_385000.0  annual_inc_450000.0  \</span><br><span class="line">0                    0                    0                    0   </span><br><span class="line">1                    0                    0                    0   </span><br><span class="line">2                    0                    0                    0   </span><br><span class="line">3                    0                    0                    0   </span><br><span class="line">4                    0                    0                    0   </span><br><span class="line"></span><br><span class="line">   annual_inc_550000.0  annual_inc_580000.0  </span><br><span class="line">0                    0                    0  </span><br><span class="line">1                    0                    0  </span><br><span class="line">2                    0                    0  </span><br><span class="line">3                    0                    0  </span><br><span class="line">4                    0                    0  </span><br><span class="line"></span><br><span class="line">[5 rows x 320 columns]</span><br><span class="line">   home_ownership_MORTGAGE  home_ownership_OWN  home_ownership_RENT</span><br><span class="line">0                        0                   0                    1</span><br><span class="line">1                        1                   0                    0</span><br><span class="line">2                        1                   0                    0</span><br><span class="line">3                        0                   0                    1</span><br><span class="line">4                        0                   0                    1</span><br><span class="line">   verification_status_Not Verified  verification_status_Source Verified  \</span><br><span class="line">0                                 0                                    1   </span><br><span class="line">1                                 1                                    0   </span><br><span class="line">2                                 0                                    0   </span><br><span class="line">3                                 0                                    1   </span><br><span class="line">4                                 0                                    1   </span><br><span class="line"></span><br><span class="line">   verification_status_Verified  </span><br><span class="line">0                             0  </span><br><span class="line">1                             0  </span><br><span class="line">2                             1  </span><br><span class="line">3                             0  </span><br><span class="line">4                             0  </span><br></pre></td></tr></table></figure><hr><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p><a href="https://pan.baidu.com/s/1uu73xf2SVsJsAjBQceRfKA?pwd=2023">Lending Club2015年公开数据集下载</a></p><p><a href="https://blog.csdn.net/weixin_46945026/article/details/116856574"> Lending Club贷款数据转换与融合</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析与可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析与可视化 上机实践2（Pandas 统计分析）</title>
      <link href="/posts/54a7.html"/>
      <url>/posts/54a7.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析与可视化-上机实践2（Pandas-统计分析）"><a href="#数据分析与可视化-上机实践2（Pandas-统计分析）" class="headerlink" title="数据分析与可视化 上机实践2（Pandas 统计分析）"></a>数据分析与可视化 上机实践2（Pandas 统计分析）</h2><hr><h3 id="一、实践目的"><a href="#一、实践目的" class="headerlink" title="一、实践目的"></a>一、实践目的</h3><p><strong>1.了解 Pandas 库的基本功能。</strong></p><p><strong>2.掌握 Pandas 库的使用方法。</strong></p><hr><h3 id="二、数据集介绍"><a href="#二、数据集介绍" class="headerlink" title="二、数据集介绍"></a>二、数据集介绍</h3><p>本实验使用酒品消耗量数据集，其记录了全球 193 个国家某年的各类酒品消<br>耗数据，主要数据集变量如下：</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301523886.jpg" alt="img-202304301523886" style="zoom:67%;" /><p><a href="https://pan.baidu.com/s/1Mfwg9hICfGhxFHTnaXxmAg?pwd=2023">drinks.csv 数据集下载</a></p><hr><h3 id="三、实践内容要求"><a href="#三、实践内容要求" class="headerlink" title="三、实践内容要求"></a>三、实践内容要求</h3><ol><li>数据预处理</li></ol><p>（1）导入 excel 表格中的数据到 DataFrame 中；</p><p>（2）查看数据的前 5 行和后 8 行。</p><ol start="2"><li>数据操作</li></ol><p>（1）查看数据中各变量类型；</p><p>（2）将啤酒销量改成 object 类型；</p><p>（3）将列名的英文改为中文格式；</p><p>（4）初步查看数据类型和大小；</p><p>（5）查看数据数值统计情况；</p><p>（6）查看索引值；</p><p>（7）将索引值修改为所在的大洲；</p><p>（8）查看缺失值情况；</p><p>（9）采用恰当的方法对缺失值进行填充。</p><ol start="3"><li>饮酒情况对比</li></ol><p>（1）查找啤酒、烈酒和红酒的消耗量都高于相应酒种消耗量 75%分位数的<br>国家；</p><p>（2）统计（1）中各大洲国家的个数；</p><p>（3）统计各个大洲各类酒的消耗总量；</p><p>（4）计算各类酒占各大洲总消耗量的比重。</p><p>4．通过饮酒情况对比，对各大洲的饮酒习惯进行分析。</p><hr><h3 id="四、完成情况"><a href="#四、完成情况" class="headerlink" title="四、完成情况"></a>四、完成情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 数据预处理</span></span><br><span class="line"><span class="comment">#（1）导入 excel 表格中的数据到 DataFrame 中；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>,<span class="literal">True</span>)</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;drinks.csv&#x27;</span>, sep =<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">df.head()  <span class="comment"># 默认显示前5行</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111800278.jpg" alt="img-202304111800278"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail(<span class="number">8</span>) <span class="comment"># 查看数据的后8行</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111801331.jpg" alt="img-202304111801331"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 数据操作</span></span><br><span class="line"><span class="comment">#（1）查看数据中各变量类型；</span></span><br><span class="line"></span><br><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><pre><code>country                          objectbeer_servings                   float64spirit_servings                 float64wine_servings                   float64total_litres_of_pure_alcohol    float64continent                        objectdtype: object</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）将啤酒消耗量改成 object 类型；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;beer_servings&#x27;</span>] = df[<span class="string">&#x27;beer_servings&#x27;</span>].astype(<span class="built_in">object</span>)</span><br><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><pre><code>country                          objectbeer_servings                    objectspirit_servings                 float64wine_servings                   float64total_litres_of_pure_alcohol    float64continent                        objectdtype: object</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）将列名的英文改为中文格式；</span></span><br><span class="line"></span><br><span class="line">df.rename(columns = &#123;<span class="string">&#x27;country&#x27;</span>:<span class="string">&#x27;国家&#x27;</span>, <span class="string">&#x27;beer_servings&#x27;</span>:<span class="string">&#x27;啤酒消耗量&#x27;</span>, <span class="string">&#x27;spirit_servings&#x27;</span>:<span class="string">&#x27;烈酒消耗量&#x27;</span>, <span class="string">&#x27;wine_servings&#x27;</span>:<span class="string">&#x27;红酒消耗量&#x27;</span>, <span class="string">&#x27;total_litres_of_pure_alcohol&#x27;</span>:<span class="string">&#x27;总酒精消耗量&#x27;</span>, <span class="string">&#x27;continent&#x27;</span>:<span class="string">&#x27;所在大洲&#x27;</span>&#125;, inplace = <span class="literal">True</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111801050.jpg" alt="img-202304111801050"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）初步查看数据类型和大小；</span></span><br><span class="line"></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 193 entries, 0 to 192Data columns (total 6 columns): #   Column  Non-Null Count  Dtype  ---  ------  --------------  -----   0   国家      193 non-null    object  1   啤酒消耗量   190 non-null    object  2   烈酒消耗量   190 non-null    float64 3   红酒消耗量   190 non-null    float64 4   总酒精消耗量  193 non-null    float64 5   所在大洲    170 non-null    object dtypes: float64(3), object(3)memory usage: 9.2+ KB</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）查看数据数值统计情况；</span></span><br><span class="line"></span><br><span class="line">df[[<span class="string">&#x27;啤酒消耗量&#x27;</span>, <span class="string">&#x27;烈酒消耗量&#x27;</span>, <span class="string">&#x27;红酒消耗量&#x27;</span>, <span class="string">&#x27;总酒精消耗量&#x27;</span>]].describe()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111801126.jpg" alt="img-202304111801126" style="zoom: 80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）查看索引值；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list(df.index) # 行索引是0到192</span></span><br><span class="line"><span class="built_in">list</span>(df.columns)</span><br></pre></td></tr></table></figure><pre><code>[&#39;国家&#39;, &#39;啤酒消耗量&#39;, &#39;烈酒消耗量&#39;, &#39;红酒消耗量&#39;, &#39;总酒精消耗量&#39;, &#39;所在大洲&#39;]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）将索引值修改为所在的大洲；</span></span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&#x27;所在大洲&#x27;</span>,drop=<span class="literal">False</span>)    <span class="comment"># 将列转化为行索引</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111802383.jpg" alt="img-202304111802383" style="zoom:80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（8）查看缺失值情况；</span></span><br><span class="line"></span><br><span class="line">df.isnull().<span class="built_in">sum</span>() <span class="comment"># 缺失值的统计</span></span><br></pre></td></tr></table></figure><pre><code>国家             0啤酒消耗量       3烈酒消耗量       3红酒消耗量       3总酒精消耗量     0所在大洲        23dtype: int64</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（9）采用恰当的方法对缺失值进行填充。</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;啤酒消耗量&#x27;</span>] = df[<span class="string">&#x27;啤酒消耗量&#x27;</span>].fillna(df[<span class="string">&#x27;啤酒消耗量&#x27;</span>].mean()) <span class="comment"># 对酒的消耗量缺失值用平均值填充</span></span><br><span class="line">df[<span class="string">&#x27;烈酒消耗量&#x27;</span>] = df[<span class="string">&#x27;烈酒消耗量&#x27;</span>].fillna(df[<span class="string">&#x27;烈酒消耗量&#x27;</span>].mean())</span><br><span class="line">df[<span class="string">&#x27;红酒消耗量&#x27;</span>] = df[<span class="string">&#x27;红酒消耗量&#x27;</span>].fillna(df[<span class="string">&#x27;红酒消耗量&#x27;</span>].mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对所在大洲的缺失值不做处理</span></span><br><span class="line">df.isnull().<span class="built_in">sum</span>() <span class="comment"># 缺失值的统计</span></span><br></pre></td></tr></table></figure><pre><code>国家             0啤酒消耗量       0烈酒消耗量       0红酒消耗量       0总酒精消耗量     0所在大洲        23dtype: int64</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 饮酒情况对比</span></span><br><span class="line"><span class="comment">#（1）查找啤酒、烈酒和红酒的消耗量都高于相应酒种消耗量 75%分位数的国家；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;啤酒消耗量&#x27;</span>].quantile(<span class="number">0.75</span>) <span class="comment"># 或者用des = df.describe(include=&quot;all&quot;) 和 des.loc[&#x27;75%&#x27;,&#x27;啤酒消耗量&#x27;] 来取出各类酒对75%分位数的值</span></span><br><span class="line"></span><br><span class="line">alcohol = df.loc[ (df[<span class="string">&#x27;啤酒消耗量&#x27;</span>]&gt;df[<span class="string">&#x27;啤酒消耗量&#x27;</span>].quantile(<span class="number">0.75</span>)) &amp; (df[<span class="string">&#x27;烈酒消耗量&#x27;</span>]&gt;df[<span class="string">&#x27;烈酒消耗量&#x27;</span>].quantile(<span class="number">0.75</span>)) &amp; (df[<span class="string">&#x27;红酒消耗量&#x27;</span>]&gt;df[<span class="string">&#x27;红酒消耗量&#x27;</span>].quantile(<span class="number">0.75</span>)) ]</span><br><span class="line">alcohol <span class="comment"># 显示满足条件的每行详细记录（含国家名，各类酒的消耗量，所在大洲）</span></span><br><span class="line"></span><br><span class="line">alcohol[<span class="string">&#x27;国家&#x27;</span>] <span class="comment"># 显示满足条件的国家</span></span><br></pre></td></tr></table></figure><pre><code>3                 Andorra25               Bulgaria44                 Cyprus45         Czech Republic60                Finland75                Hungary93                 Latvia99             Luxembourg141    Russian Federation151                Serbia155              Slovakia160                 Spain184                   USAName: 国家, dtype: object</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）统计（1）中各大洲国家的个数；</span></span><br><span class="line"></span><br><span class="line">alcohol[<span class="string">&#x27;所在大洲&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure><pre><code>EU    11AS     1Name: 所在大洲, dtype: int64</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）统计各个大洲各类酒的消耗总量；</span></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;所在大洲&#x27;</span>).<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111803376.jpg" alt="img-202304111803376" style="zoom:80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）计算各类酒占各大洲总消耗量的比重。</span></span><br><span class="line"></span><br><span class="line">d = df.groupby(<span class="string">&#x27;所在大洲&#x27;</span>).<span class="built_in">sum</span>()</span><br><span class="line">d.drop(<span class="string">&#x27;总酒精消耗量&#x27;</span>,axis = <span class="number">1</span>,inplace = <span class="literal">True</span>) <span class="comment"># axis=1，删除总酒精消耗量这一列</span></span><br><span class="line">d.div(d.<span class="built_in">sum</span>(axis=<span class="number">1</span>), axis=<span class="number">0</span>) <span class="comment"># 按列（即投影到列）求和, 再按行（即投影到行）除法</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111803314.jpg" alt="img-202304111803314" style="zoom:80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4．通过饮酒情况对比，对各大洲的饮酒习惯进行分析。</span></span><br><span class="line"></span><br><span class="line">d1 = df.groupby(<span class="string">&#x27;所在大洲&#x27;</span>).<span class="built_in">sum</span>()</span><br><span class="line">d1[<span class="string">&#x27;总酒精消耗量&#x27;</span>]</span><br><span class="line"><span class="comment"># 由上面（4）中的各类酒的占比分析及总酒精消耗量得知，</span></span><br><span class="line"><span class="comment"># 几乎所有大洲都对啤酒的消耗量较高，尤其是AF（非洲）；但对红酒的消耗量较低</span></span><br><span class="line"><span class="comment"># 同时EU（欧洲）人群对酒精的依赖度最高，OC（大洋洲）人群对酒精的依赖度最低</span></span><br></pre></td></tr></table></figure><pre><code>所在大洲AF    159.4AS     95.5EU    387.8OC     54.1SA     75.7Name: 总酒精消耗量, dtype: float64</code></pre><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p><a href="https://pan.baidu.com/s/1Mfwg9hICfGhxFHTnaXxmAg?pwd=2023">drinks.csv 数据集下载</a></p><p><a href="https://blog.csdn.net/HunGRy_FOOliSHhh/article/details/113762347">使用Pandas获取数据以及数据概览</a></p><p><a href="https://blog.csdn.net/u013177138/article/details/121689496">DataFrame的修改方法(值、列、索引)</a></p><p><a href="https://blog.csdn.net/dair6/article/details/121352283">Pandas中计算分位数的方法describe、quantile</a></p><p><a href="https://blog.csdn.net/weixin_46945026/article/details/116670239">Pandas进一步实战_酒品数据初步探索</a></p><p><a href="https://blog.csdn.net/baidu_34454863/article/details/100859928">Pandas入门_探索酒类消费数据</a></p><p><strong>遇到问题及解决方案</strong></p><p><a href="https://blog.csdn.net/weixin_37474682/article/details/121059702">Python报错解决：TypeError: Cannot interpret ‘＜attribute ‘dtype‘ of ‘numpy.generic‘objects＞‘as a data type</a></p><p>成功更新pandas后，问题得到解决</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301519590.jpg" alt="img-202304301519590"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析与可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析与可视化 上机实践1（Numpy 数值计算）</title>
      <link href="/posts/8203.html"/>
      <url>/posts/8203.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析与可视化-上机实践1（Numpy-数值计算）"><a href="#数据分析与可视化-上机实践1（Numpy-数值计算）" class="headerlink" title="数据分析与可视化 上机实践1（Numpy 数值计算）"></a>数据分析与可视化 上机实践1（Numpy 数值计算）</h2><h3 id="一、实践目的"><a href="#一、实践目的" class="headerlink" title="一、实践目的"></a>一、实践目的</h3><p><strong>1.掌握 Numpy 库的使用方法。</strong></p><p><strong>2.灵活应用 Numpy 库解决数值计算和图像处理的相关问题。</strong> </p><hr><h3 id="二、彩色向灰度图转换原理"><a href="#二、彩色向灰度图转换原理" class="headerlink" title="二、彩色向灰度图转换原理"></a>二、彩色向灰度图转换原理</h3><p>图像是由若干个像素组成，每个像素有明确的位置和被分配的颜色值。</p><p>一张图像就构成了一个像素矩阵。彩色图像的每个像素由 R、G、B 分量构成;分量值介于 0到255 之间。灰度图像是每个像素只有一个采样颜色的图像，显示为从最 暗黑色到最亮的白色的灰度，取值范围 0到255。</p><p>彩色图像向灰度图像转换的常用公式为：<br>Gray = R * 0.299 + G * 0.587 + B * 0.114<br>利用矩阵运算，即可将彩色图像转换为灰度图像。 </p><hr><h3 id="三、实践内容要求"><a href="#三、实践内容要求" class="headerlink" title="三、实践内容要求"></a>三、实践内容要求</h3><ol><li><p>数组的创建<br>（1）创建全 0 数组，全 1 数组，随机数数组； </p><p>（2）创建一个数值范围为 0~1，间隔为 0.01 的数组。</p></li><li><p>任意创建一个二维数组，对其维度进行操作 </p><p> （1）将数组的行变列； </p><p> （2）返回最后一个元素； </p><p> （3）返回第 2 到第 4 个元素； </p><p> （4）返回逆序数组。 </p></li><li><p>任意创建两个二维的数组 arr1、arr2，对两个数组进行四则运算：arr1+arr2、 arr1-arr2、arr1*arr2、arr1/arr2。 </p></li><li><p>创建数组 arr3=[3 6 9 3 1 5 7 2]，分别完成排序、去重、总和、累计和、均 值、标准差、方差、最小值和最大值的统计。</p></li><li><p>了解图像的构成，结合 Matplotlib 和 NumPy 实现彩色图像到灰色图像的 转换，将彩色图像转换为灰度图像。 </p></li><li><p>5 的实验步骤包括以下几个： 1. 导入 numpy 和 matplotlib 模块； 2. 读取彩色图像(plt.imread)； 3. 显示彩色图像(plt.imshow)； 4. 通过数组间的运算，计算灰度图像的像素值； 5. 显示灰度图像</p></li></ol><hr><h3 id="四、完成情况"><a href="#四、完成情况" class="headerlink" title="四、完成情况"></a>四、完成情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.数组的创建；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#（1）创建全 0 数组，全 1 数组，随机数数组；</span></span><br><span class="line">a = np.zeros((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = np.ones((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">c = np.random.random((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）创建一个数值范围为 0~1，间隔为 0.01 的数组。</span></span><br><span class="line">a = np.arange(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.01</span>) <span class="comment"># 第3个参数为间隔距离</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[[0. 0. 0.]</span><br><span class="line"> [0. 0. 0.]</span><br><span class="line"> [0. 0. 0.]]</span><br><span class="line">[[1. 1. 1.]</span><br><span class="line"> [1. 1. 1.]</span><br><span class="line"> [1. 1. 1.]]</span><br><span class="line">[[0.59795796 0.47702449 0.90950593]</span><br><span class="line"> [0.27112045 0.53074871 0.70262116]</span><br><span class="line"> [0.97665706 0.43174363 0.17952276]]</span><br><span class="line">[0.   0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1  0.11 0.12 0.13</span><br><span class="line"> 0.14 0.15 0.16 0.17 0.18 0.19 0.2  0.21 0.22 0.23 0.24 0.25 0.26 0.27</span><br><span class="line"> 0.28 0.29 0.3  0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4  0.41</span><br><span class="line"> 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5  0.51 0.52 0.53 0.54 0.55</span><br><span class="line"> 0.56 0.57 0.58 0.59 0.6  0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69</span><br><span class="line"> 0.7  0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8  0.81 0.82 0.83</span><br><span class="line"> 0.84 0.85 0.86 0.87 0.88 0.89 0.9  0.91 0.92 0.93 0.94 0.95 0.96 0.97</span><br><span class="line"> 0.98 0.99]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 任意创建一个二维数组，对其维度进行操作；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.T) <span class="comment"># 数组转置</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>, <span class="number">2</span>]) <span class="comment"># 返回最后一个元素值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>, <span class="number">2</span>]) <span class="comment"># 返回第2到第4个元素</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>, : <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[: : -<span class="number">1</span>, : : -<span class="number">1</span>]) <span class="comment"># 先对所有行处理返回逆序序列，再对列做逆序处理</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[[0 1 2]</span><br><span class="line"> [3 4 5]</span><br><span class="line"> [6 7 8]]</span><br><span class="line">[[0 3 6]</span><br><span class="line"> [1 4 7]</span><br><span class="line"> [2 5 8]]</span><br><span class="line">8</span><br><span class="line">2</span><br><span class="line">[3 4]</span><br><span class="line">[[8 7 6]</span><br><span class="line"> [5 4 3]</span><br><span class="line"> [2 1 0]]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.任意创建两个二维的数组 arr1、arr2，对两个数组进行四则运算：arr1+arr2、arr1-arr2、arr1*arr2、arr1/arr2；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>) <span class="comment"># 0~8的二维方阵</span></span><br><span class="line">b = np.ones( (<span class="number">3</span>, <span class="number">3</span>) ) <span class="comment"># 全1的方阵</span></span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="built_in">print</span>(a - b)</span><br><span class="line"><span class="built_in">print</span>(a * b)</span><br><span class="line"><span class="built_in">print</span>(a / b)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[[1. 2. 3.]</span><br><span class="line"> [4. 5. 6.]</span><br><span class="line"> [7. 8. 9.]]</span><br><span class="line">[[-1.  0.  1.]</span><br><span class="line"> [ 2.  3.  4.]</span><br><span class="line"> [ 5.  6.  7.]]</span><br><span class="line">[[0. 1. 2.]</span><br><span class="line"> [3. 4. 5.]</span><br><span class="line"> [6. 7. 8.]]</span><br><span class="line">[[0. 1. 2.]</span><br><span class="line"> [3. 4. 5.]</span><br><span class="line"> [6. 7. 8.]]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 创建数组 arr3=[3 6 9 3 1 5 7 2]，分别完成排序、去重、总和、累计和、均值、标准差、方差、最小值和最大值的统计。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(np.sort(a)) <span class="comment"># 升序排列</span></span><br><span class="line"><span class="built_in">print</span>(np.unique(a)) <span class="comment"># 去重</span></span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">sum</span>()) <span class="comment"># 求总和</span></span><br><span class="line"><span class="built_in">print</span>(a.mean()) <span class="comment"># 求均值</span></span><br><span class="line"><span class="built_in">print</span>(a.std()) <span class="comment"># 求标准差</span></span><br><span class="line"><span class="built_in">print</span>(a.var()) <span class="comment"># 求方差</span></span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">min</span>()) <span class="comment"># 求最小值</span></span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">max</span>()) <span class="comment"># 求最大值</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[1 2 3 3 5 6 7 9]</span><br><span class="line">[1 2 3 5 6 7 9]</span><br><span class="line">36</span><br><span class="line">4.5</span><br><span class="line">2.5495097567963922</span><br><span class="line">6.5</span><br><span class="line">1</span><br><span class="line">9</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5.将彩色图像转换为灰度图像 RGB to GRAY</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># matplotlib.pyplot.imread(path)用于读取一张图片，将图像数据变成数组array.</span></span><br><span class="line">img = plt.imread(<span class="string">&#x27;logo.png&#x27;</span>) <span class="comment"># plt读取的通道顺序为R、G、B</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用subplot展示</span></span><br><span class="line">plt.figure(figsize = (<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">image1 = plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">image1.set_title(<span class="string">&#x27;Raw Image&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gray转化公式，red*0.299 + green*0.587 + blue*0.114</span></span><br><span class="line">img1 = <span class="number">0.2989</span> * img[:,:,<span class="number">0</span>] + <span class="number">0.5870</span> * img[:,:,<span class="number">1</span>] + <span class="number">0.114</span> * img[:,:,<span class="number">2</span>]</span><br><span class="line">image2 = plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">image2.set_title(<span class="string">&#x27;Gray Image&#x27;</span>)</span><br><span class="line">plt.imshow(img1, cmap = <span class="string">&#x27;gray&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301449380.png" alt="img-202304301449380"></p><hr><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p><a href="https://ariesfun.gitee.io/posts/85c6.html">计算机视觉 上机实践一 图像的基本操作 </a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析与可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> NumPy </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析与可视化 实践基础练习六（Pandas）</title>
      <link href="/posts/1c4c.html"/>
      <url>/posts/1c4c.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习六-（Pandas）"><a href="#数据分析与可视化-实践基础练习六-（Pandas）" class="headerlink" title="数据分析与可视化 实践基础练习六 （Pandas）"></a>数据分析与可视化 实践基础练习六 （Pandas）</h2><h3 id="一、本节需要掌握的Pandas相关函数或属性"><a href="#一、本节需要掌握的Pandas相关函数或属性" class="headerlink" title="一、本节需要掌握的Pandas相关函数或属性"></a>一、本节需要掌握的Pandas相关函数或属性</h3><ol><li><p>数据清洗：<strong>缺失值处理、重复值处理、异常值处理</strong></p></li><li><p>数据标准化方法：<strong>离差标准化、标准差标准化、小数定标标准化</strong></p></li><li><p>数据转换：<strong>类别型数据的亚变量处理、连续变量的离散化</strong></p></li></ol><hr><h3 id="二、实训案例"><a href="#二、实训案例" class="headerlink" title="二、实训案例"></a>二、实训案例</h3><h4 id="1-本数据集为一个包含30000个样本的美国高中生社交网络信息数据集。"><a href="#1-本数据集为一个包含30000个样本的美国高中生社交网络信息数据集。" class="headerlink" title="1. 本数据集为一个包含30000个样本的美国高中生社交网络信息数据集。"></a>1. 本数据集为一个包含30000个样本的美国高中生社交网络信息数据集。</h4><p>数据均匀采样于2006年到2009年，每个样本包含40个变量，其中gradyear、gender、age和friends四个变量代表高中生的毕业年份、性别、年龄和好友数等基本信息，剩余36个关键词代表了高中生的5大兴趣类：课外活动、时尚、宗教、浪漫和反社会行为，具体描述如下：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301347552.png" alt="img-202304301347552"></p><p><a href="https://pan.baidu.com/s/16NFEosBYX3F_o-oP5Vdpeg?pwd=2023">teenager 数据集下载</a></p><hr><h4 id="2-结合数据集完成以下操作。"><a href="#2-结合数据集完成以下操作。" class="headerlink" title="2. 结合数据集完成以下操作。"></a>2. 结合数据集完成以下操作。</h4><p>（1）读取数据并查看数据的前5行；</p><p>（2）查看数据集整体情况；</p><p>（3）查看缺失值的统计性描述分布情况；</p><p>（4）假设青少年的年龄范围为13-20岁，我们将不在此范围的数据记为缺失值，重新统计缺失值数目；</p><p>（5）选取年龄的均值填充年龄缺失值；</p><p>（6）统计性别缺失值并将其删除；</p><p>（7）采用箱线图对friend列数据进行异常值检测；</p><p>（8）删除异常值（规定：超过上四分位+1.5倍IQR距离，或者下四分位-1.5倍IQR距离的点为异常值，四分位距(IQR)就是上四分位与下四分位的差值，我们以IQR的1.5倍为标准）</p><p>（9）采用箱线图查看异常值剔除后的数据分布情况；</p><p>（10）对friend列进行标准差标准化处理；</p><p>（11）对gender列进行One-Hot编码；</p><p>（12）采用等距离散化方法对friends进行划分。</p><hr><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）读取数据并查看数据的前5行；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;teenager_sns.csv&#x27;</span>, sep = <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">df.head(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211857175.jpg" alt="img-202304211857175"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）查看数据集整体情况；</span></span><br><span class="line"></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 30000 entries, 0 to 29999</span><br><span class="line">Data columns (total 40 columns):</span><br><span class="line"> #   Column        Non-Null Count  Dtype  </span><br><span class="line">---  ------        --------------  -----  </span><br><span class="line"> 0   gradyear      30000 non-null  int64  </span><br><span class="line"> 1   gender        27276 non-null  object </span><br><span class="line"> 2   age           24914 non-null  float64</span><br><span class="line"> 3   friends       30000 non-null  int64  </span><br><span class="line"> 4   basketball    30000 non-null  int64  </span><br><span class="line"> 5   football      30000 non-null  int64  </span><br><span class="line"> 6   soccer        30000 non-null  int64  </span><br><span class="line"> 7   softball      30000 non-null  int64  </span><br><span class="line"> 8   volleyball    30000 non-null  int64  </span><br><span class="line"> 9   swimming      30000 non-null  int64  </span><br><span class="line"> 10  cheerleading  30000 non-null  int64  </span><br><span class="line"> 11  baseball      30000 non-null  int64  </span><br><span class="line"> 12  tennis        30000 non-null  int64  </span><br><span class="line"> 13  sports        30000 non-null  int64  </span><br><span class="line"> 14  cute          30000 non-null  int64  </span><br><span class="line"> 15  sex           30000 non-null  int64  </span><br><span class="line"> 16  sexy          30000 non-null  int64  </span><br><span class="line"> 17  hot           30000 non-null  int64  </span><br><span class="line"> 18  kissed        30000 non-null  int64  </span><br><span class="line"> 19  dance         30000 non-null  int64  </span><br><span class="line"> 20  band          30000 non-null  int64  </span><br><span class="line"> 21  marching      30000 non-null  int64  </span><br><span class="line"> 22  music         30000 non-null  int64  </span><br><span class="line"> 23  rock          30000 non-null  int64  </span><br><span class="line"> 24  god           30000 non-null  int64  </span><br><span class="line"> 25  church        30000 non-null  int64  </span><br><span class="line"> 26  jesus         30000 non-null  int64  </span><br><span class="line"> 27  bible         30000 non-null  int64  </span><br><span class="line"> 28  hair          30000 non-null  int64  </span><br><span class="line"> 29  dress         30000 non-null  int64  </span><br><span class="line"> 30  blonde        30000 non-null  int64  </span><br><span class="line"> 31  mall          30000 non-null  int64  </span><br><span class="line"> 32  shopping      30000 non-null  int64  </span><br><span class="line"> 33  clothes       30000 non-null  int64  </span><br><span class="line"> 34  hollister     30000 non-null  int64  </span><br><span class="line"> 35  abercrombie   30000 non-null  int64  </span><br><span class="line"> 36  die           30000 non-null  int64  </span><br><span class="line"> 37  death         30000 non-null  int64  </span><br><span class="line"> 38  drunk         30000 non-null  int64  </span><br><span class="line"> 39  drugs         30000 non-null  int64  </span><br><span class="line">dtypes: float64(1), int64(38), object(1)</span><br><span class="line">memory usage: 9.2+ MB</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）查看缺失值的统计性描述分布情况；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;gender&#x27;</span>].describe()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">count     27276</span><br><span class="line">unique        2</span><br><span class="line">top           F</span><br><span class="line">freq      22054</span><br><span class="line">Name: gender, dtype: object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;age&#x27;</span>].describe()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count    24914.000000</span><br><span class="line">mean        17.993949</span><br><span class="line">std          7.858054</span><br><span class="line">min          3.086000</span><br><span class="line">25%         16.312000</span><br><span class="line">50%         17.287000</span><br><span class="line">75%         18.259000</span><br><span class="line">max        106.927000</span><br><span class="line">Name: age, dtype: float64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）假设青少年的年龄范围为13-20岁，我们将不在此范围的数据记为缺失值，重新统计缺失值数目；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;age&#x27;</span>].isnull().<span class="built_in">sum</span>() <span class="comment"># 先统计年龄的缺失值数目；</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5086</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将不在此范围的数据记为缺失值(np.nan)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df[<span class="string">&#x27;age&#x27;</span>] = df.apply(<span class="keyword">lambda</span> x : np.nan <span class="keyword">if</span> (x[<span class="string">&#x27;age&#x27;</span>]&lt;<span class="number">13.0</span>) | (x[<span class="string">&#x27;age&#x27;</span>]&gt;<span class="number">20.0</span>) <span class="keyword">else</span> x[<span class="string">&#x27;age&#x27;</span>], axis = <span class="number">1</span>) </span><br><span class="line">df[<span class="string">&#x27;age&#x27;</span>].isnull().<span class="built_in">sum</span>() <span class="comment"># 再次统计值</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5523</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）选取年龄的均值填充年龄缺失值；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># df[&#x27;fill_age&#x27;]=df[&#x27;age&#x27;].fillna(df[&#x27;age&#x27;].mean()) # 增加了新列,使用均值来填充缺失值</span></span><br><span class="line">df.insert(<span class="number">3</span>, <span class="string">&#x27;fill_age&#x27;</span>, df[<span class="string">&#x27;age&#x27;</span>].fillna(df[<span class="string">&#x27;age&#x27;</span>].mean())) <span class="comment"># 插到age这列后面</span></span><br><span class="line">df.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211857172.jpg" alt="img-202304211857172"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）统计性别缺失值并将其删除；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;gender&#x27;</span>].isnull().<span class="built_in">sum</span>() <span class="comment"># 2724</span></span><br><span class="line">df.dropna(subset=[<span class="string">&#x27;gender&#x27;</span>], inplace=<span class="literal">True</span>) <span class="comment"># subset[&#x27;col&#x27;],即丢子列&#x27;col&#x27;中含有缺失值的行</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;gender&#x27;</span>].isnull().<span class="built_in">sum</span>() <span class="comment"># 性别的缺失值变为0</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）采用箱线图对friend列数据进行异常值检测；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>,<span class="number">6</span>)) <span class="comment"># 只对friends这列进行处理</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.boxplot(x = df.friends) <span class="comment"># 画箱体图</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;friends&#x27;</span>, fontsize = <span class="number">14</span>) <span class="comment"># 横坐标名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Count&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分布情况</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.hist(df.friends, bins = <span class="number">15</span>) <span class="comment"># 画直方图</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;friends&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Count&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211858295.jpg" alt="img-202304211858295"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（8）删除异常值（规定：超过上四分位+1.5倍IQR距离，或者下四分位-1.5倍IQR距离的点为异常值，四分位距(IQR)就是上四分位与下四分位的差值，我们以IQR的1.5倍为标准）</span></span><br><span class="line"></span><br><span class="line">IQR = df[<span class="string">&#x27;friends&#x27;</span>].quantile(<span class="number">0.75</span>) - df[<span class="string">&#x27;friends&#x27;</span>].quantile(<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">up = df[<span class="string">&#x27;friends&#x27;</span>].quantile(<span class="number">0.75</span>) + IQR*<span class="number">1.5</span> <span class="comment"># 表示上限，最大值</span></span><br><span class="line">down = df[<span class="string">&#x27;friends&#x27;</span>].quantile(<span class="number">0.25</span>) - IQR*<span class="number">1.5</span> <span class="comment"># 表示下限，最低值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对friends的这列进行判断，为真的会保留，其余的都是异常值</span></span><br><span class="line">teenager = df[ (df[<span class="string">&#x27;friends&#x27;</span>] &gt; down) &amp; (df[<span class="string">&#x27;friends&#x27;</span>] &lt; up)] </span><br><span class="line">teenager[<span class="string">&#x27;friends&#x27;</span>].describe()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count    26122.000000</span><br><span class="line">mean        25.409425</span><br><span class="line">std         24.951122</span><br><span class="line">min          0.000000</span><br><span class="line">25%          4.000000</span><br><span class="line">50%         19.000000</span><br><span class="line">75%         40.000000</span><br><span class="line">max        103.000000</span><br><span class="line">Name: friends, dtype: float64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（9）采用箱线图查看异常值剔除后的数据分布情况；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>,<span class="number">6</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.boxplot(x = teenager.friends) <span class="comment"># 画箱体图</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;friends&#x27;</span>, fontsize = <span class="number">14</span>) <span class="comment"># 横坐标名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Count&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分布情况</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.hist(teenager.friends, bins = <span class="number">15</span>) <span class="comment"># 直方图</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;friends&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Count&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211852442.png" alt="img-202304211852442"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（10）对friend列进行标准差标准化处理；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">StandarScaler</span>(<span class="params">data</span>):</span><br><span class="line">    data=(data - data.mean()) / data.std() <span class="comment"># 标准差标准化转化公式</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增一列表示标准差标准化处理后的结果</span></span><br><span class="line">teenager.insert(<span class="number">4</span>, <span class="string">&#x27;firStd&#x27;</span>, StandarScaler(teenager[<span class="string">&#x27;friends&#x27;</span>]))</span><br><span class="line">teenager.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211858472.jpg" alt="img-202304211858472"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（11）对gender列进行One-Hot编码；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行哑变量变换，变为数值型</span></span><br><span class="line">pd.get_dummies(teenager).head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211859905.jpg" alt="img-202304211859905"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（12）采用等距离散化方法对friends进行划分。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等距离散化,在friends后新增一列</span></span><br><span class="line">col_new = <span class="string">&#x27;group&#x27;</span></span><br><span class="line">teenager.insert(<span class="number">4</span>, col_new, pd.cut(teenager[<span class="string">&#x27;friends&#x27;</span>], <span class="number">3</span>, labels = [<span class="string">&#x27;好友少&#x27;</span>, <span class="string">&#x27;好友正常&#x27;</span>, <span class="string">&#x27;好友多&#x27;</span>])) <span class="comment"># 按从小到大等距排列，分为三组（自定义标签名）</span></span><br><span class="line">teenager.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211859133.jpg" alt="img-202304211859133"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">teenager[<span class="string">&#x27;group&#x27;</span>].value_counts() <span class="comment"># 统计各个分组的数量</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">好友少     18226</span><br><span class="line">好友正常     5847</span><br><span class="line">好友多      2049</span><br><span class="line">Name: group, dtype: int64</span><br></pre></td></tr></table></figure><hr><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://pan.baidu.com/s/16NFEosBYX3F_o-oP5Vdpeg?pwd=2023">teenager 数据集下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析与可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析与可视化 实践基础练习五（Pandas）</title>
      <link href="/posts/1aee.html"/>
      <url>/posts/1aee.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习五-（Pandas）"><a href="#数据分析与可视化-实践基础练习五-（Pandas）" class="headerlink" title="数据分析与可视化 实践基础练习五 （Pandas）"></a>数据分析与可视化 实践基础练习五 （Pandas）</h2><h3 id="一、本节需要掌握的Pandas相关函数或属性"><a href="#一、本节需要掌握的Pandas相关函数或属性" class="headerlink" title="一、本节需要掌握的Pandas相关函数或属性"></a>一、本节需要掌握的Pandas相关函数或属性</h3><ol><li><p>Pandas数据运算    </p></li><li><p>Pandas常用的汇总与统计性方法</p></li><li><p>数据分组<strong>df.groupby( )</strong>   </p><p> 参数by：可以是函数，字典，Series; axis=0是按列，1是按行</p></li><li><p>数据聚合<strong>agg()、apply()、transform()</strong>     </p><p> agg(): 可对分组后的数据进行一系列的操作包含求和求最值，均值等</p><p> apply(): 可自定义面向分组的聚合函数（Series对象是对每个元素处理，DataFrame对象是对一行或一列处理，groupby对象是对一个分组进行处理）</p><p> transfrom(): 不对数据进行聚合输出，而只是对每一行记录提供了相应的聚合结果（输出结果有冗余）</p></li></ol><h3 id="二、实训案例"><a href="#二、实训案例" class="headerlink" title="二、实训案例"></a>二、实训案例</h3><h4 id="1-行星数据集记录了2014年之前发现的行星的信息，数据中主要特征有："><a href="#1-行星数据集记录了2014年之前发现的行星的信息，数据中主要特征有：" class="headerlink" title="1.行星数据集记录了2014年之前发现的行星的信息，数据中主要特征有："></a>1.行星数据集记录了2014年之前发现的行星的信息，数据中主要特征有：</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301300306.png" alt="img-202304301300306" style="zoom: 80%;" /><p><a href="https://pan.baidu.com/s/1joADk3p2taeNvDEhrkkLgg?pwd=2023">planets.csv 数据集下载</a></p><h4 id="2-结合数据集完成以下操作。"><a href="#2-结合数据集完成以下操作。" class="headerlink" title="2. 结合数据集完成以下操作。"></a>2. 结合数据集完成以下操作。</h4><p>（1）读取planets.csv文件；</p><p>（2）查看数据前5行；</p><p>（3）查看数据基本情况；</p><p>（4）按method特征对数据进行分组，并将新数据记为grouped；</p><p>（5）将数据按发现年份在2000年前和2000年后进行分组；</p><p>（6）求2000年前和2000年后的分组均值；</p><p>（7）查看不同方法发现的行星与地球距离的中位数；</p><p>（8）按发现行星的方法和发现的年代进行分组，并统计相应分组下发现的行星的总数；</p><p>（9）计算不同方法发现的行星在各特征上的极差；</p><p>（10）分别计算各种方法发现的行星的距离的均值和发现的数量之和。</p><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）读取planets.csv文件,导入行星数据表到DataFrame中；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;planets.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）查看数据前5行；</span></span><br><span class="line"></span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211841741.jpg" alt="img-202304211841741" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）查看数据基本情况；</span></span><br><span class="line"></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 1035 entries, 0 to 1034</span><br><span class="line">Data columns (total 6 columns):</span><br><span class="line"> #   Column          Non-Null Count  Dtype  </span><br><span class="line">---  ------          --------------  -----  </span><br><span class="line"> 0   method          1035 non-null   object </span><br><span class="line"> 1   number          1035 non-null   int64  </span><br><span class="line"> 2   orbital_period  992 non-null    float64</span><br><span class="line"> 3   mass            513 non-null    float64</span><br><span class="line"> 4   distance        808 non-null    float64</span><br><span class="line"> 5   year            1035 non-null   int64  </span><br><span class="line">dtypes: float64(3), int64(2), object(1)</span><br><span class="line">memory usage: 48.6+ KB</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）按method特征对数据进行分组，并将新数据记为grouped；</span></span><br><span class="line"></span><br><span class="line">grouped = df.groupby(<span class="string">&#x27;method&#x27;</span>)</span><br><span class="line">grouped.head(<span class="number">3</span>) <span class="comment">#对每个分组后的数据显示前3行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grouped.size() # 可统计每个分组的数量 </span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211842491.jpg" alt="img-202304211842491" style="zoom: 67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）将数据按发现年份在2000年前和2000年后进行分组；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行分段分组</span></span><br><span class="line">col_new = <span class="string">&#x27;Before 2000&#x27;</span> <span class="comment"># true就是在2000年前发现的</span></span><br><span class="line">df.insert(<span class="number">6</span>, col_new, df[<span class="string">&#x27;year&#x27;</span>] &lt; <span class="number">2000</span>) <span class="comment"># insert()用于插入列</span></span><br><span class="line"></span><br><span class="line">group = df.groupby(<span class="string">&#x27;Before 2000&#x27;</span>)</span><br><span class="line">group.head() <span class="comment"># 查看分组后各自前5行数据</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211843859.jpg" alt="img-202304211843859" style="zoom:80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）求2000年前和2000年后的分组均值；</span></span><br><span class="line"></span><br><span class="line">group.mean() <span class="comment"># 用于求按按年份分组后数据的均值</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211843676.jpg" alt="img-20230421184367"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）查看不同方法发现的行星与地球距离的中位数；</span></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;method&#x27;</span>)[<span class="string">&#x27;distance&#x27;</span>].median() <span class="comment"># 先按methood分组，取&#x27;distance&#x27;的这列数据再求中位数</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">method</span><br><span class="line">Astrometry                         17.875</span><br><span class="line">Eclipse Timing Variations         315.360</span><br><span class="line">Imaging                            40.395</span><br><span class="line">Microlensing                     3840.000</span><br><span class="line">Orbital Brightness Modulation    1180.000</span><br><span class="line">Pulsar Timing                    1200.000</span><br><span class="line">Pulsation Timing Variations           NaN</span><br><span class="line">Radial Velocity                    40.445</span><br><span class="line">Transit                           341.000</span><br><span class="line">Transit Timing Variations         855.000</span><br><span class="line">Name: distance, dtype: float64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（8）按发现行星的方法和发现的年代进行分组，并统计相应分组下发现的行星的总数；</span></span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="number">40</span>) <span class="comment"># 为了让数据更全显示，可指定最大显示的行数</span></span><br><span class="line">df.groupby([<span class="string">&#x27;method&#x27;</span>, <span class="string">&#x27;year&#x27;</span>])[<span class="string">&#x27;number&#x27;</span>].<span class="built_in">sum</span>() <span class="comment"># 先对数据按&#x27;method&#x27;和&#x27;year&#x27;来分组</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">method                     year</span><br><span class="line">Astrometry                 2010     1</span><br><span class="line">                           2013     1</span><br><span class="line">Eclipse Timing Variations  2008     4</span><br><span class="line">                           2009     1</span><br><span class="line">                           2010     4</span><br><span class="line">                                   ..</span><br><span class="line">Transit                    2014    93</span><br><span class="line">Transit Timing Variations  2011     2</span><br><span class="line">                           2012     2</span><br><span class="line">                           2013     2</span><br><span class="line">                           2014     3</span><br><span class="line">Name: number, Length: 69, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（9）计算不同方法发现的行星在各特征上的极差；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在上面的（5）中引入了一列布尔值变量，为了便于数值计算此时可将该列删掉</span></span><br><span class="line">df.drop(<span class="string">&#x27;Before 2000&#x27;</span>, axis = <span class="number">1</span>, inplace = <span class="literal">True</span>) <span class="comment"># 确认替换原数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保证分组数据grouped不含boolean类型</span></span><br><span class="line">grouped.apply(<span class="keyword">lambda</span> x: x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>()) <span class="comment"># apply可自定义面向分组的聚合函数，对每一列计算极差函数（相当于grouped.max() - grouped.min()）</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211844285.jpg" alt="img-20230421184428" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（10）分别计算各种方法发现的行星的距离的均值和发现的数量之和。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用聚合函数</span></span><br><span class="line">grouped.agg(&#123;<span class="string">&#x27;distance&#x27;</span>: [np.mean], <span class="string">&#x27;number&#x27;</span>: [np.<span class="built_in">sum</span>]&#125;) <span class="comment"># 使用字典作为参数,来求距离的均值和数量之和</span></span><br><span class="line">                                                         <span class="comment"># 也可使用grouped[&#x27;distance&#x27;].mean() 和 grouped[&#x27;number&#x27;].sum()</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211844643.jpg" alt="img-202304211844643" style="zoom: 50%;" /><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://pan.baidu.com/s/1joADk3p2taeNvDEhrkkLgg?pwd=2023">planets.csv 数据集下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析与可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春季每日一题2023 已完结</title>
      <link href="/posts/3f57.html"/>
      <url>/posts/3f57.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-春季每日一题2023-已完结"><a href="#AcWing-春季每日一题2023-已完结" class="headerlink" title="AcWing 春季每日一题2023 (已完结)"></a>AcWing 春季每日一题2023 (已完结)</h2><h3 id="打卡题目（内容有疑问或错误，欢迎随时询问或指正哈-）"><a href="#打卡题目（内容有疑问或错误，欢迎随时询问或指正哈-）" class="headerlink" title="打卡题目（内容有疑问或错误，欢迎随时询问或指正哈~）"></a>打卡题目（内容有疑问或错误，欢迎随时询问或指正哈~）</h3><hr><p><strong>Day17: 05/08</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3483/">【棋盘游戏】</a>    考查知识点： <u>单源最短路径，SPFA，图论</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6419849/">AcWing 3480. 棋盘游戏</a></p><hr><p><strong>Day16: 05/07</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/description/3485/">【大数运算】</a>    考查知识点： <u>高精度，符号判断，模板题</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6414963/">AcWing 3482. 大数运算</a></p><hr><p><strong>Day15: 05/06</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3500/">【质数】</a>    考查知识点： <u>筛质数，线性筛法，埃氏筛法，模板题</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9193593/">AcWing 3497. 质数</a></p><hr><p><strong>Day14: 05/05</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3515/">【最短距离总和】</a>    考查知识点： <u>最短距离总和，Floyd，DP</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9182517/">AcWing 3512. 最短距离总和</a></p><p>题目：<a href="https://www.acwing.com/problem/content/856/">【 Floyd求最短路】</a>    考查知识点： <u> 最短路，Floyd，求每一对顶点的最短距离，模板题</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6399816/">AcWing 854. Floyd求最短路</a></p><hr><p><strong>Day13: 05/03</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3501/">【日期差值】</a>    考查知识点： <u>模拟题，日期计算</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6388230/">AcWing 3498. 日期差值</a></p><hr><p><strong>Day12: 05/02</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3476/">【鸡兔同笼】</a>    考查知识点： <u>直接模拟，贪心</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6383154/">AcWing 3473. 鸡兔同笼</a></p><hr><p><strong>Day11: 05/01</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3454/">【 字符串排序II】</a>    考查知识点： <u>对字符排序，cmp函数，pair排序</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9155991/">AcWing 3451. 字符串排序II</a></p><p>题目：<a href="https://www.acwing.com/problem/content/3428/">【 小白鼠排队】</a>    考查知识点： <u>sort() 排序，pair二元组排序</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9155751/">AcWing 3425. 小白鼠排队</a></p><hr><p><strong>Day10: 04/30</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/description/3398/">【 10进制 VS 2进制】</a>    考查知识点： <u>C++高精度处理，进位制</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6373717/">AcWing 3395. 10进制 VS 2进制 </a></p><p>题目：<a href="https://www.acwing.com/problem/content/3478/">【 简单密码】</a>    考查知识点： <u>模拟题，字符串处理</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6372935/">AcWing 3475. 简单密码 </a></p><hr><p><strong>Day9: 04/29</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3579/">【 分组统计】</a>    考查知识点： <u>模拟题，数组去重</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6370000/">AcWing 3576. 分组统计 </a></p><hr><p><strong>Day8: 04/28</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3546/">【 三元组】</a>    考查知识点： <u>简单模拟，(考研机试题)</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6362210/">AcWing 3543. 三元组 </a></p><hr><p><strong>Day7: 04/27</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3511/">【最长公共子串】</a>    考查知识点： <u>最长公共子串问题，二分，字符串哈希，哈希表(STL)</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9132682/">AcWing 3508. 最长公共子串 </a></p><hr><p><strong>Day6: 04/26</strong> </p><p>题目：<a href="https://www.acwing.com/problem/content/3449/">【整数奇偶排序】</a>    考查知识点： <u>模拟题，简单排序</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9126853/">AcWing 3446. 整数奇偶排序</a></p><p>题目：<a href="https://www.acwing.com/problem/content/3434/">【skew数】</a>    考查知识点： <u>模拟题，字符串处理</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9126817/">AcWing 3431. skew数 </a></p><hr><p><strong>Day5: 04/25（补）</strong> 很有思维难度，写了好久呜呜~~</p><p>题目：<a href="https://www.acwing.com/problem/content/4967/">【子矩阵】</a>    考查知识点： <u>（二维）单调队列，滑动窗口拓展</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9122007/">AcWing 4964. 子矩阵 </a></p><hr><p><strong>Day4: 04/22</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/4961/">【接龙数列】</a>    考查知识点： <u>动态规划，线性DP，最长上升子序列变形</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6320641/">AcWing 4958. 接龙数列</a></p><hr><p><strong>Day3: 04/12</strong> </p><p>题目：<a href="https://www.acwing.com/problem/content/4960/">【飞机降落】</a>    考查知识点： <u>DFS，全排列，(状态压缩DP)</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6260091/">AcWing 4957. 飞机降落</a></p><hr><p><strong>Day2: 04/11</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/4959/">【冶炼金属】</a>    考查知识点： <u>二分，推公式，整除性质</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6254141/">AcWing 4956. 冶炼金属</a></p><hr><p><strong>Day1: 04/09</strong> </p><p>题目：<a href="https://www.acwing.com/problem/content/description/3387/">【二叉树遍历】</a>    考查知识点： <u>DFS，树的遍历(前中后)，递归搜索树</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6237121/">AcWing 3384. 二叉树遍历</a></p><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>活动地址：<a href="https://www.acwing.com/activity/content/introduction/3166/">AcWing-春季每日一题</a></p>]]></content>
      
      
      <categories>
          
          <category> 每日一题打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 刷题记录 </tag>
            
            <tag> 每日一题 </tag>
            
            <tag> 经典算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础 第三讲 Shell语法</title>
      <link href="/posts/1e1a.html"/>
      <url>/posts/1e1a.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux基础-第三讲-shell语法"><a href="#Linux基础-第三讲-shell语法" class="headerlink" title="Linux基础 第三讲 shell语法"></a>Linux基础 第三讲 shell语法</h2><h2 id="1-shell语法"><a href="#1-shell语法" class="headerlink" title="1. shell语法"></a>1. shell语法</h2><h3 id="1-概论"><a href="#1-概论" class="headerlink" title="(1) 概论"></a>(1) 概论</h3><p><strong>shell是我们通过命令行与操作系统沟通的语言。</strong></p><p>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。<br><code>AC Terminal</code>中的命令行可以看成是一个“<strong>shell脚本在逐行执行</strong>”。</p><p>Linux中常见的shell脚本有很多种，常见的有：</p><ul><li><p>Bourne Shell(/usr/bin/sh或/bin/sh)</p></li><li><p><strong>Bourne Again Shell(/bin/bash)</strong></p></li><li><p>C Shell(/usr/bin/csh)</p></li><li><p>K Shell(/usr/bin/ksh)</p></li><li><p>zsh</p></li><li><p>…</p></li></ul><p><strong>Linux系统中一般默认使用bash</strong>，所以接下来讲解bash中的语法。<br>文件开头需要写<code>#! /bin/bash</code>，指明bash为脚本解释器。</p><p><strong>学习技巧</strong><br><strong>不要死记硬背，遇到含糊不清的地方，可以在AC Terminal里实际运行一遍。</strong></p><p><strong>脚本示例</strong><br>新建一个<code>test.sh</code>文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash  <span class="comment"># 指明解释器</span></span></span><br><span class="line">echo &quot;Hello World!&quot; # echo表示输出</span><br></pre></td></tr></table></figure><p><strong>运行方式</strong></p><ul><li><p>用解释器执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bash + 脚本文件名</span></span><br><span class="line"></span><br><span class="line">bash test.sh</span><br><span class="line">Hello World!  # 脚本输出</span><br></pre></td></tr></table></figure></li><li><p>作为可执行文件运行</p></li></ul><p><code>ls -l filename</code> 查看文件权限</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230201125236717.png" alt="image-20230201125236717"></p><p>每组共三个权限<strong>rwx</strong>,即读写执行权限（上图都无可执行权限）</p><p>有三组：1 作者本身的权限， 2  同组的权限， 3 其他用户的权限</p><p><code>chmod +x test.sh</code>  <strong>使脚本具有可执行权限</strong>（增加权限），同时文件名颜色从白到绿色</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./test.sh # 当前路径下执行</span><br><span class="line">Hello World! # 脚本输出</span><br><span class="line"></span><br><span class="line">/home/acs/test.sh  # 绝对路径下执行</span><br><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">~/test.sh  # 家目录路径下执行</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h3 id="2-注释"><a href="#2-注释" class="headerlink" title="(2) 注释"></a>(2) 注释</h3><p><strong>单行注释</strong><br>每行中<code>#</code>之后的内容均是注释。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一行注释</span></span><br><span class="line">echo &#x27;Hello World&#x27;  # 这也是注释</span><br></pre></td></tr></table></figure><p><strong>多行注释</strong></p><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;EOF   # 注意冒号也可以不用加</span><br><span class="line">第一行注释</span><br><span class="line">第二行注释</span><br><span class="line">第三行注释</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其中EOF可以换成其它任意字符串。 EOF == abc == !</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="(3) 变量"></a>(3) 变量</h3><p><strong>定义变量</strong><br>定义变量，不需要加<code>$</code>符号，例如：</p><p>ps: 定义变量时，赋值时<strong>等号两边</strong>不能有空格。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name1=&#x27;ariesfun&#x27;  # 单引号定义字符串，</span><br><span class="line">name2=&quot;ariesfun&quot;  # 双引号定义字符串</span><br><span class="line">name3=ariesfun    # 也可以不加引号，同样表示字符串</span><br></pre></td></tr></table></figure><p><strong>使用变量</strong><br>使用变量，需要加上<code>$</code>符号，或者<code>$&#123;&#125;</code>符号。花括号是可选的，主要为了<strong>帮助解释器识别变量边界</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun</span><br><span class="line">echo $name  # 输出ariesfun</span><br><span class="line">echo $&#123;name&#125; # 输出ariesfun</span><br><span class="line">echo $&#123;name&#125;hhhh  # 输出ariesfunhhhh</span><br></pre></td></tr></table></figure><p>定义变量的时候变量都是字符串，但当变量需要是整数时，会自动把变量转换成整数。</p><p><strong>只读变量</strong><br>使用<code>readonly</code>或者<code>declare</code>可以将变量<strong>变为只读</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun</span><br><span class="line">readonly name</span><br><span class="line">declare -r name  # 两种写法均可</span><br><span class="line">name=abc  # 会报错，因为此时name只读</span><br></pre></td></tr></table></figure><p><strong>删除变量</strong><br><code>unset</code>可以删除变量。</p><p>同时被声明为只读的变量无法被unset删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun</span><br><span class="line">unset name</span><br><span class="line">echo $name  # 输出空行</span><br></pre></td></tr></table></figure><p><strong>变量类型</strong></p><p>配环境会用到。</p><p><strong>1)</strong> 自定义变量（<strong>局部变量</strong>）<br>    子进程不能访问的变量</p><p><strong>2)<strong>环境变量（</strong>全局变量</strong>）<br>    子进程可以访问的变量</p><p>自定义变量改成全局变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun  # 定义变量</span><br><span class="line">export name  # 第一种方法，只在当前bash中有效</span><br><span class="line">declare -x name # 第二种方法</span><br></pre></td></tr></table></figure><p>环境变量改为局部变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export name=ariesfun  # 定义环境变量</span><br><span class="line">declare +x name  # 改为自定义变量</span><br></pre></td></tr></table></figure><p><strong>字符串</strong><br>字符串可以用单引号或双引号，也可以不用引号。</p><p>单引号与双引号的区别：</p><ul><li>单引号中的内容会原样输出，不会执行、不会取变量；</li><li><strong>双引号中的内容可以执行、可以取变量；</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun  # 不用引号</span><br><span class="line">echo &#x27;hello, $name \&quot;hh\&quot;&#x27;  # 单引号字符串，输出 hello, $name \&quot;hh\&quot;</span><br><span class="line">echo &quot;hello, $name \&quot;hh\&quot;&quot;  # 双引号字符串，输出 hello, ariesfun &quot;hh&quot;</span><br></pre></td></tr></table></figure><p><strong>获取字符串长度</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;ariesfun&quot;</span><br><span class="line">echo $&#123;#name&#125;  # 输出8</span><br></pre></td></tr></table></figure><p><strong>提取子串</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;hello, ariesfun&quot;</span><br><span class="line">echo $&#123;name:0:5&#125;  # 提取从0开始的5个字符(类python中的切片，左闭右开)</span><br></pre></td></tr></table></figure><p>ps : </p><p><code>top</code>输出正在执行的进程，按<code>q</code>退出</p><p><code>type+命令</code>可以解释该命令的来源（内嵌命令、第三方命令等）</p><p><code>bash</code>可以用来开一个新的进程(原进程会休眠)，输入<code>exit</code>或按<code>ctrl+d</code>退出新的<code>bash</code></p><p><code>bash</code>：开启子进程，<code>exit</code>或<code>ctrl+d</code> : 退出子进程<br><code>export</code>变为环境变量，<code>declare +x</code>变为自定义变量</p><hr><h3 id="4-默认变量"><a href="#4-默认变量" class="headerlink" title="(4) 默认变量"></a>(4) 默认变量</h3><p><strong>文件参数变量</strong><br>在执行shell脚本时，可以向脚本传递参数。<code>$1</code>是第一个参数，<code>$2</code>是第二个参数，以此类推。</p><p>特殊的，**$0是文件名（包含路径）**。</p><p>其实就是我们输入的第一段，输入<strong>绝对路径</strong>就显示绝对路径，输入<strong>相对路径</strong>就显示相对路径</p><p>eg. 创建文件<code>test.sh</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;文件名：&quot;$0</span><br><span class="line">echo &quot;参数一：&quot;$1</span><br><span class="line">echo &quot;参数二：&quot;$2</span><br><span class="line">echo &quot;参数三：&quot;$3</span><br><span class="line">echo &quot;参数四：&quot;$4  #echo $&#123;10&#125; 多位参数需要加大括号</span><br></pre></td></tr></table></figure><p>然后执行该脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./test.sh 1 2 3 4</span><br><span class="line">文件名：./test.sh</span><br><span class="line">参数一：1</span><br><span class="line">参数二：2</span><br><span class="line">参数三：3</span><br><span class="line">参数四：4</span><br></pre></td></tr></table></figure><p><strong>其它参数相关变量</strong></p><table><thead><tr><th align="left">参数</th><th>说明</th></tr></thead><tbody><tr><td align="left"><code>$#</code></td><td>代表文件传入的参数个数，如上例中值为4</td></tr><tr><td align="left"><code>$*</code></td><td>由所有参数构成的用空格隔开的字符串，如上例中值为<code>&quot;$1 $2 $3 $4&quot;</code></td></tr><tr><td align="left"><code>$@</code></td><td>每个参数分别用双引号括起来的字符串，如上例中值为<code>&quot;$1&quot; &quot;$2&quot; &quot;$3&quot; &quot;$4&quot;</code></td></tr><tr><td align="left"><code>$$</code></td><td>脚本当前运行的进程ID</td></tr><tr><td align="left"><code>$?</code></td><td>返回上一条命令的<strong>退出状态</strong>（注意不是stdout，而是<strong>exit code</strong>）,<strong>0表示正常退出</strong>，其他值表示错误</td></tr><tr><td align="left"><code>$(command)</code></td><td>获取标准输出，返回<code>command</code>这条命令的stdout<strong>（可嵌套，能实现多个命令）</strong></td></tr><tr><td align="left">command，用``包起来（键盘左上角）</td><td>返回<code>command</code>这条命令的stdout（不可嵌套）</td></tr></tbody></table><p>ps:</p><p><code>$* </code> 会把几个参数合并成一个参数,<br><code>&amp;@</code> 结果出来的这几个参数仍然是独立的。</p><hr><h3 id="5-数组"><a href="#5-数组" class="headerlink" title="(5) 数组"></a>(5) 数组</h3><p>数组中可以存放多个不同类型的值，</p><p><strong>只支持一维数组，初始化时不需要指明数组大小, 数组下标从0开始。</strong></p><p><strong>定义</strong><br><u>数组用小括号表示，元素之间用空格隔开</u>。例如：</p><p><code>array=(1 abc &quot;def&quot; yyy)</code><br>也可以直接定义数组中某个元素的值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array[0]=1</span><br><span class="line">array[1]=abc</span><br><span class="line">array[2]=&quot;def&quot;</span><br><span class="line">array[3]=yyy</span><br></pre></td></tr></table></figure><p><strong>读取数组中某个元素的值</strong><br>格式：</p><p><code>$&#123;array[index]&#125;</code></p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yyy)</span><br><span class="line">echo $&#123;array[0]&#125;</span><br><span class="line">echo $&#123;array[1]&#125;</span><br><span class="line">echo $&#123;array[2]&#125;</span><br><span class="line">echo $&#123;array[3]&#125;</span><br></pre></td></tr></table></figure><p><strong>读取整个数组, 并输出</strong><br>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yyy)</span><br><span class="line"></span><br><span class="line">echo $&#123;array[@]&#125;  # 第一种写法</span><br><span class="line">echo $&#123;array[*]&#125;  # 第二种写法</span><br></pre></td></tr></table></figure><p><strong>数组长度</strong><br>类似于字符串,使用<code>#</code>号</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yyy)</span><br><span class="line"></span><br><span class="line">echo $&#123;#array[@]&#125;  # 第一种写法</span><br><span class="line">echo $&#123;#array[*]&#125;  # 第二种写法</span><br></pre></td></tr></table></figure><p>ps: 注意<br><strong>在读取整个数组时，未定义的部分就不会显示</strong>。比如定义了<code>a[0] a[1] a[2] a[1000]</code>,</p><p>利用<code>echo $&#123;a[@]&#125;</code>输出时，只会显示定义的数组那4个元素的值</p><p>对上例求长度时，结果是4，而不是1000</p><hr><h3 id="6-expr命令"><a href="#6-expr命令" class="headerlink" title="(6) expr命令"></a>(6) expr命令</h3><p><strong>expr命令用于求表达式的值</strong>，格式为：<code>expr 表达式</code></p><p><strong>expr可以用<code>$()</code>和``来取返回值。</strong></p><p><strong>乘号和括号都需要转义才能使用,因为单个符号有自己含义</strong></p><p><strong>表达式说明：</strong></p><ul><li><p>用空格隔开每一项</p></li><li><p>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可试试转义）</p></li><li><p>对包含空格和其他特殊字符的字符串要用引号括起来</p></li><li><p>expr会在<code>stdout</code>中输出结果。如果为<strong>逻辑关系表达式</strong>，则结果为真时，<code>stdout</code>输出1，否则输出0。</p></li><li><p>expr的<code>exit code</code>：如果为<strong>逻辑关系表达式</strong>，则结果为真时，<code>exit code</code>为0，否则为1。</p></li></ul><p>例如：（非重点）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr 3 &#x27;&gt;&#x27; 2 # 结果为真，stdout输出1，exit code为0 </span><br><span class="line">expr 3 &#x27;&lt;&#x27; 2 # 结果为假，stdout输出0，exit code为1</span><br></pre></td></tr></table></figure><p><strong>字符串表达式</strong></p><ul><li><p><code>length STRING</code> ps: 取得得字符串要<strong>加双引号</strong>,以防中间含有空格<br>  返回<code>STRING</code>的<strong>长度</strong></p></li><li><p><code>index STRING CHARSET</code><br>  <code>CHARSET</code>中任意单个字符在STRING中<strong>最前面的字符位置</strong>，<strong>下标从1开始</strong>。</p><p>  如果在STRING中完全不存在<code>CHARSET</code>中的字符，则返回0。</p></li><li><p><code>substr STRING POSITION LENGTH</code><br>  返回<code>STRING</code>字符串中从<code>POSITION</code>开始，长度最大为<code>LENGTH</code>的子串, <strong>截取子串</strong></p><p>  如果<code>POSITION</code>或<code>LENGTH</code>为负数，0或非数值，则返回空字符串。</p></li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;Hello World!&quot;</span><br><span class="line"></span><br><span class="line">echo `expr length &quot;$str&quot;`  # ``不是单引号，表示执行该命令，会输出12</span><br><span class="line">echo `expr index &quot;$str&quot; aWd`  # 输出7，下标从1开始</span><br><span class="line">echo `expr substr &quot;$str&quot; 2 3`  # 输出 ell</span><br></pre></td></tr></table></figure><p><strong>整数表达式</strong><br><code>expr</code>支持普通的算术操作，<u>算术表达式优先级低于字符串表达式，高于逻辑关系表达式</u>。</p><ul><li><code>+ - </code><br>加减运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><ul><li><p><code>* / %</code><br>乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</p><p>求n的m次幂 ： <code>echo $[n**m]</code> </p></li></ul><ul><li><code>()</code> 可以改变优先级，但<strong>需要用反斜杠转义</strong>。</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一行注释</span></span><br><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a + $b`  # 输出7</span><br><span class="line">echo `expr $a - $b`  # 输出-1</span><br><span class="line">echo `expr $a \* $b`  # 输出12，*需要转义(加单引号也可)</span><br><span class="line">echo `expr $a / $b`  # 输出0，整除</span><br><span class="line">echo `expr $a % $b` # 输出3</span><br><span class="line">echo $( expr \( $a + 1 \) \* \( $b + 1 \) )</span><br><span class="line">echo `expr \( $a + 1 \) \* \( $b + 1 \)`     # 输出20，值为(a +1) * (b + 1)</span><br></pre></td></tr></table></figure><p><strong>逻辑关系表达式</strong></p><ul><li><p><code>|</code><br>  如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。</p></li><li><p><code>&amp;</code><br>  如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</p></li><li><p><code>&lt; &lt;= = == != &gt;= &gt;</code><br>  比较两端的参数，如果为true，则返回1，否则返回0。”==”是”=”的同义词。</p><p>  <code>expr</code>首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</p></li><li><p><code>()</code> 可以改变优先级，但需要<strong>用反斜杠转义</strong>。</p></li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a \&gt; $b`  # 输出0，&gt;需要转义</span><br><span class="line">echo `expr $a &#x27;&lt;&#x27; $b`  # 输出1，也可以将特殊字符用引号引起来</span><br><span class="line">echo `expr $a &#x27;&gt;=&#x27; $b`  # 输出0</span><br><span class="line">echo `expr $a \&lt;\= $b`  # 输出1</span><br><span class="line"></span><br><span class="line">c=0</span><br><span class="line">d=5</span><br><span class="line"></span><br><span class="line">echo `expr $c \&amp; $d`  # 输出0</span><br><span class="line">echo `expr $a \&amp; $b`  # 输出3</span><br><span class="line">echo `expr $c \| $d`  # 输出5</span><br><span class="line">echo `expr $a \| $b`  # 输出3</span><br></pre></td></tr></table></figure><hr><h3 id="7-read命令"><a href="#7-read命令" class="headerlink" title="(7) read命令"></a>(7) read命令</h3><p><code>read</code>命令用于<strong>从标准输入中读取单行数据</strong>。当读到文件结束符时，<strong>exit code为1</strong>，否则为0。</p><p><strong>参数说明</strong></p><ul><li><code>-p</code>: 后面可以接提示信息<br>  <code>-t</code>: 后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</li></ul><p>实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">read name  # 读入name的值</span><br><span class="line">acwing yyy  # 标准输入</span><br><span class="line">echo $name  # 输出name的值</span><br><span class="line">acwing yyy  # 标准输出 </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;Please input your name: &quot; -t 5 name  # 读入name的值，等待时间5秒</span><br><span class="line">  # -t 和 -p 的顺序不影响实际效果</span><br><span class="line">Please input your name: acwing yyy  # 标准输入</span><br><span class="line">echo $name  # 输出name的值</span><br><span class="line">acwing yyy  # 标准输出</span><br></pre></td></tr></table></figure><hr><h3 id="8-echo命令"><a href="#8-echo命令" class="headerlink" title="(8) echo命令"></a>(8) echo命令</h3><p><strong><code>echo</code> 输出变量</strong>时需要加上<code>$</code>, 输出常量时不要加<code>$</code>.</p><p><strong><code>echo</code>用于输出字符串</strong>。命令格式：<code>echo STRING</code></p><p>ps: 查看命令用法<code>help commond</code>, eg.<code>help echo</code></p><p><strong>显示普通字符串</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello AC Terminal&quot;</span><br><span class="line">echo Hello AC Terminal  # 引号可以省略</span><br></pre></td></tr></table></figure><p><strong>显示转义字符</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;\&quot;Hello AC Terminal\&quot;&quot;  # 注意只能使用双引号，如果使用单引号，则不转义</span><br><span class="line">echo \&quot;Hello AC Terminal\&quot;  # 也可以省略双引号</span><br></pre></td></tr></table></figure><p><strong>显示变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=yyy</span><br><span class="line">echo &quot;My name is $name&quot;  # 输出 My name is yyy</span><br></pre></td></tr></table></figure><p><strong>显示换行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hi\n&quot;  # -e 开启转义</span><br><span class="line">echo &quot;acwing&quot;</span><br><span class="line">输出结果：</span><br><span class="line">Hi</span><br><span class="line"></span><br><span class="line">acwing</span><br></pre></td></tr></table></figure><p><strong>显示不换行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hi \c&quot; # -e 开启转义 \c 不换行</span><br><span class="line">echo &quot;acwing&quot;</span><br><span class="line">输出结果：</span><br><span class="line">Hi acwing</span><br></pre></td></tr></table></figure><p><strong>显示结果定向至文件</strong></p><p><code>echo &quot;Hello World&quot; &gt; output.txt  # 将内容以覆盖的方式输出到output.txt中</code></p><p><strong>原样输出字符串，不进行转义或取变量(用单引号)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=acwing</span><br><span class="line">echo &#x27;$name\&quot;&#x27;</span><br><span class="line">输出结果:</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">name\&quot;</span></span><br></pre></td></tr></table></figure><p><strong>显示命令的执行结果</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo `date`</span><br><span class="line">输出结果：</span><br><span class="line"></span><br><span class="line">Wed Sep 1 11:45:33 CST 2021</span><br></pre></td></tr></table></figure><hr><h3 id="9-printf命令"><a href="#9-printf命令" class="headerlink" title="(9) printf命令"></a>(9) printf命令</h3><p><strong>printf命令用于格式化输出</strong>，类似于C/C++中的printf函数。</p><p><u>默认不会在字符串末尾添加换行符。</u></p><p><strong>命令格式：</strong></p><p><code>printf format-string [arguments...]</code></p><p><strong>用法示例</strong><br>脚本文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%10d.\n&quot; 123  # 占10位，右对齐</span><br><span class="line">printf &quot;%-10.2f.\n&quot; 123.123321  # 占10位，保留2位小数（不完全的四舍五入），左对齐</span><br><span class="line">printf &quot;My name is %s\n&quot; &quot;yyy&quot;  # 格式化输出字符串</span><br><span class="line">printf &quot;%d * %d = %d\n&quot;  2 3 `expr 2 \* 3` # 表达式的值作为参数</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   123.</span><br><span class="line">   123.12    .</span><br><span class="line">My name is yyy</span><br><span class="line">2 * 3 = 6</span><br></pre></td></tr></table></figure><hr><h3 id="10-test命令与判断符号"><a href="#10-test命令与判断符号" class="headerlink" title="(10) test命令与判断符号[]"></a>(10) test命令与判断符号[]</h3><p><strong>短路原则</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A | B</span><br><span class="line">A非0非空，直接返回A,不计算B</span><br><span class="line">A为0，返回B</span><br><span class="line"></span><br><span class="line">A &amp; B    </span><br><span class="line">A，B有0或空， 就是0</span><br><span class="line">A非0，返回A, 忽略B (短路原则)</span><br></pre></td></tr></table></figure><p><strong>逻辑运算符<code>&amp;&amp;</code>和<code>||</code></strong></p><ul><li><p><code>&amp;&amp;</code> 表示与，<code>|| </code>表示或</p></li><li><p>二者具有短路原则：</p><p>  <code>expr1 &amp;&amp; expr2</code>：当<code>expr1</code>为假时，直接忽略<code>expr2</code></p><p>  <code>expr1 || expr2</code>：当<code>expr1</code>为真时，直接忽略<code>expr2</code></p></li><li><p>表达式的<code>exit code</code><strong>为0，表示真</strong>；为非零，表示假。（与<code>C/C++</code>中的定义相反）</p></li></ul><p><strong><code>test</code>命令</strong><br>在命令行中输入<code>help test</code>，可以查看<code>test</code>命令的用法。</p><p><strong><code>test</code>命令用于判断文件类型，以及对变量做比较。</strong></p><p><strong><code>test</code>命令用<code>exit code</code>返回结果</strong>，而不是使用<code>stdout</code>。<strong>0表示真</strong>，非0表示假。</p><p><code>if</code>也是返回真的时候可以执行。<code>exit code</code>为0表示真，所以可以执行。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test 2 -lt 3  # 为真，返回值为0</span><br><span class="line">echo $?  # 输出上个命令的返回值，输出0</span><br><span class="line">ls  # 列出当前目录下的所有文件</span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line"></span><br><span class="line">test -e test.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">exist  # test.sh 文件存在</span><br><span class="line">test -e test2.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">Not exist  # testh2.sh 文件不存在</span><br></pre></td></tr></table></figure><p><strong>文件类型判断</strong></p><p>命令格式：</p><p><code>test -e filename  # 判断文件是否存在</code></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-e</td><td>文件是否存在</td></tr><tr><td>-f</td><td>是否为文件</td></tr><tr><td>-d</td><td>是否为目录</td></tr></tbody></table><p><strong>文件权限判断</strong></p><p>命令格式：</p><p><code>test -r filename  # 判断文件是否可读</code></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-r</td><td>文件是否可读</td></tr><tr><td>-w</td><td>文件是否可写</td></tr><tr><td>-x</td><td>文件是否可执行</td></tr><tr><td>-s</td><td>是否为非空文件</td></tr></tbody></table><p><strong>整数间的比较</strong></p><p>命令格式：</p><p><code>test $a -eq $b  # a是否等于b</code></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-eq</td><td>a是否等于b</td></tr><tr><td>-ne</td><td>a是否不等于b</td></tr><tr><td>-gt</td><td>a是否大于b</td></tr><tr><td>-lt</td><td>a是否小于b</td></tr><tr><td>-ge</td><td>a是否大于等于b</td></tr><tr><td>-le</td><td>a是否小于等于b</td></tr></tbody></table><p><strong>字符串比较</strong></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>test <strong>-z</strong> STRING</td><td>判断STRING<strong>是否为空</strong>，如果为空，则返回true</td></tr><tr><td>test <strong>-n</strong> STRING</td><td>判断STRING<strong>是否非空</strong>，如果非空，则返回true（-n可以省略）</td></tr><tr><td>test str1 == str2</td><td>判断str1是否<strong>等于</strong>str2</td></tr><tr><td>test str1 != str2</td><td>判断str1是否不<strong>等于</strong>str2</td></tr></tbody></table><p>​    </p><p><strong>多重条件判定</strong></p><p>命令格式：</p><p><code>test -r filename -a -x filename</code></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-a</td><td>两条件<strong>是否同时成立</strong></td></tr><tr><td>-o</td><td>两条件<strong>是否至少一个成立</strong></td></tr><tr><td>!</td><td><strong>取反</strong>。如 test ! -x file，当file不可执行时，返回true</td></tr></tbody></table><p>​<br><strong>判断符号[]</strong><br><code>[]</code>与<code>test</code>用法几乎一模一样，更常用于<code>if</code>语句中。另外<code>[[]]</code>是<code>[]</code>的加强版，支持的特性更多。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ 2 -lt 3 ]  # 为真，返回值为0</span><br><span class="line">echo $?  # 输出上个命令的返回值，输出0</span><br><span class="line"></span><br><span class="line">ls  # 列出当前目录下的所有文件</span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line">[ -e test.sh ] &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">exist  # test.sh 文件存在</span><br><span class="line">[ -e test2.sh ] &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">Not exist  # test2.sh 文件不存在</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>[]</code>内的<strong>每一项都要用空格隔开</strong></li><li>中括号内的<strong>变量，最好用双引号括起来</strong></li><li>中括号内的<strong>常数，最好用单或双引号括起来</strong></li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;acwing yyy&quot;</span><br><span class="line">[ $name == &quot;acwing yyy&quot; ]  # 错误，等价于 [ acwing yxc == &quot;acwing yyy&quot; ]，参数太多</span><br><span class="line">[ &quot;$name&quot; == &quot;acwing yyy&quot; ]  # 正确</span><br></pre></td></tr></table></figure><hr><h3 id="11-判断语句"><a href="#11-判断语句" class="headerlink" title="(11) 判断语句"></a>(11) 判断语句</h3><p><strong>if…then形式</strong><br>类似于<code>C/C++</code>中的<code>if-else</code>语句。</p><p>ps: 当条件<code>condition</code>的<code>exit code</code>退出状态为0，表示为真时才会执行<code>then</code>后边的语句</p><hr><p><strong>单层if</strong><br>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">if [ &quot;$a&quot; -lt &quot;$b&quot; ] &amp;&amp; [ &quot;$a&quot; -gt 2 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;在范围内</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>3在范围内</code></p><hr><p><strong>单层if-else</strong><br>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">else</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">if ! [ &quot;$a&quot; -lt &quot;$b&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;不小于$&#123;b&#125;</span><br><span class="line">else</span><br><span class="line">    echo $&#123;a&#125;小于$&#123;b&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>3小于4</code></p><hr><p><strong>多层if-elif-elif-else</strong><br>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">elif condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">elif condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">else</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line">if [ $a -eq 1 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于1</span><br><span class="line">elif [ $a -eq 2 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于2</span><br><span class="line">elif [ $a -eq 3 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于3</span><br><span class="line">else</span><br><span class="line">    echo 其他</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>其他</code></p><hr><p><strong>case…esac形式</strong><br>类似于<code>C/C++</code>中的<code>switch</code>语句。</p><p>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case $变量名称 in</span><br><span class="line">    值1)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;  # 类似于C/C++中的break</span><br><span class="line">    值2)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">    *)  # 类似于C/C++中的default</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line">case $a in</span><br><span class="line">    1)</span><br><span class="line">        echo $&#123;a&#125;等于1</span><br><span class="line">        ;;  </span><br><span class="line">    2)</span><br><span class="line">        echo $&#123;a&#125;等于2</span><br><span class="line">        ;;  </span><br><span class="line">    3)                                                </span><br><span class="line">        echo $&#123;a&#125;等于3</span><br><span class="line">        ;;  </span><br><span class="line">    *)</span><br><span class="line">        echo 其他</span><br><span class="line">        ;;  </span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>其他</code></p><hr><h3 id="12-循环语句"><a href="#12-循环语句" class="headerlink" title="(12) 循环语句"></a>(12) 循环语句</h3><p><strong>for…in…do…done</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for var in val1 val2 val3</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例1，输出a 2 cc，<strong>每个元素一行</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in a 2 cc</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例2，输出当前路径下的所有文件名，<strong>每个文件名一行</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for file in `ls`</span><br><span class="line">do</span><br><span class="line">    echo $file</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例3，输出1-10</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in $(seq 1 10)  # seq只支持数字遍历，可产生左闭右闭的区间的所有整数</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例4，<strong>使用{1..10} 或者 {a..z}</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;a..z&#125;</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p><strong>for ((…;…;…)) do…done</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for ((expression; condition; expression))</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，输出1-10，每个数占一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1; i&lt;=10; i++))</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p><strong>while…do…done循环</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，文件结束符为<code>ctrl+d</code>，输入文件结束符后<code>read</code>指令返回false。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while read name</span><br><span class="line">do</span><br><span class="line">    echo $name</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p><strong>until…do…done循环</strong><br><strong>当条件为真时结束。</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，当用户输入yes或者YES时结束，否则一直等待读入。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ &quot;$&#123;word&#125;&quot; == &quot;yes&quot; ] || [ &quot;$&#123;word&#125;&quot; == &quot;YES&quot; ]</span><br><span class="line">do</span><br><span class="line">    read -p &quot;Please input yes/YES to stop this program: &quot; word</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p><strong>break命令</strong><br><u>跳出当前一层循环</u>，<strong>注意与C/C++不同的是：break不能跳出case语句</strong>。</p><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">while read name</span><br><span class="line">do</span><br><span class="line">    for ((i=1;i&lt;=10;i++))</span><br><span class="line">    do</span><br><span class="line">        case $i in</span><br><span class="line">            8)</span><br><span class="line">                break</span><br><span class="line">                ;;</span><br><span class="line">            *)</span><br><span class="line">                echo $i</span><br><span class="line">                ;;</span><br><span class="line">        esac</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>该示例每读入非EOF的字符串，会输出一遍1-7。<br>该程序可以输入<code>ctrl+d</code>文件结束符来结束，也可以直接用<code>ctrl+c</code>杀掉该进程。</p><hr><p><code>continue命令</code><br>跳出当前循环。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1;i&lt;=10;i++))</span><br><span class="line">do</span><br><span class="line">    if [ `expr $i % 2` -eq 0 ]</span><br><span class="line">    then</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>该程序输出1-10中的所有奇数。</p><hr><p><strong>死循环的处理方式</strong><br>如果<code>AC Terminal</code>可以打开该程序，则输入<code>ctrl+c</code>即可。</p><p>否则可以直接关闭进程：</p><ul><li>使用<code>top</code>命令找到进程的PID（按q可以退出）,  <code>ps aux</code>可查看当前所有的进程</li><li>输入<code>kill -9 PID</code>即可关掉此进程</li></ul><hr><h3 id="13-函数"><a href="#13-函数" class="headerlink" title="(13) 函数"></a>(13) 函数</h3><p><code>bash</code>中的函数类似于<code>C/C++</code>中的函数，但return的返回值与C/C++不同，<strong>返回的是exit code，取值为0-255</strong>，<strong>0表示正常结束。</strong></p><p>如果想获取函数的输出结果，可以通过<code>echo</code>输出到<code>stdout</code>中，然后通过<code>$(function_name)</code>来获取<code>stdout</code>中的结果。</p><p><strong>函数的<code>return值</code>可以通过<code>$?</code>来获取。</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[function] func_name() &#123;  # function关键字可以省略</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>不获取 return值和 stdout值</strong><br>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;</span><br><span class="line">    name=yyy</span><br><span class="line">    echo &quot;Hello $name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>Hello yyy</code></p><hr><p><strong>获取 return值和stdout值</strong><br>不写<code>return</code>时，默认<code>return 0</code>。</p><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;</span><br><span class="line">    name=yyy</span><br><span class="line">    echo &quot;Hello $name&quot;</span><br><span class="line"></span><br><span class="line">    return 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output=$(func)</span><br><span class="line">ret=$?</span><br><span class="line"></span><br><span class="line">echo &quot;output = $output&quot;</span><br><span class="line">echo &quot;return = $ret&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>output = Hello yyy</code><br><code>return = 123</code></p><hr><p><strong>函数的输入参数</strong><br>在函数内，<code>$1</code>表示第一个输入参数，<code>$2</code>表示第二个输入参数，依此类推。</p><p>注意：<strong>函数内的<code>$0</code>仍然是文件名</strong>，而不是函数名。</p><p>ps: <code>$()</code>会读取函数的<code>stdout</code>，而不会直接输出来，导致屏幕上没输出</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;  # 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span><br><span class="line">    word=&quot;&quot;</span><br><span class="line">    while [ &quot;$&#123;word&#125;&quot; != &#x27;y&#x27; ] &amp;&amp; [ &quot;$&#123;word&#125;&quot; != &#x27;n&#x27; ]</span><br><span class="line">    do</span><br><span class="line">        read -p &quot;要进入func($1)函数吗？请输入y/n：&quot; word</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    if [ &quot;$word&quot; == &#x27;n&#x27; ]</span><br><span class="line">    then</span><br><span class="line">        echo 0</span><br><span class="line">        return 0</span><br><span class="line">    fi  </span><br><span class="line">    </span><br><span class="line">    if [ $1 -le 0 ] </span><br><span class="line">    then</span><br><span class="line">        echo 0</span><br><span class="line">        return 0</span><br><span class="line">    fi  </span><br><span class="line">    </span><br><span class="line">    sum=$(func $(expr $1 - 1))</span><br><span class="line">    echo $(expr $sum + $1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo $(func 10)</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>55</code></p><hr><p><strong>函数内的局部变量</strong><br>可以在函数内定义局部变量，作用范围仅在当前函数内。</p><p>可以在递归函数中定义局部变量。</p><p>命令格式：</p><p><code>local 变量名=变量值</code><br>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">func() &#123;</span><br><span class="line">    local name=yyy</span><br><span class="line">    echo $name</span><br><span class="line">&#125;</span><br><span class="line">func</span><br><span class="line"></span><br><span class="line">echo $name</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>yyy</code></p><p>第一行为函数内的name变量，<strong>第二行为函数外调用name变量</strong>，会发现此时该变量不存在。</p><hr><h3 id="14-exit命令"><a href="#14-exit命令" class="headerlink" title="(14) exit命令"></a>(14) exit命令</h3><p><strong>使用exit会结束整个shell脚本</strong></p><p><code>exit</code>命令用来退出当前<code>shell</code>进程，并返回一个退出状态；使用<code>$?</code>可以接收这个退出状态。</p><p><code>exit</code>命令可以接受一个整数值作为参数，代表退出状态。<strong>如果不指定，默认状态值是 0</strong>。</p><p><code>exit</code>退出状态只能是一个介于 <strong>0~255 之间的整数</strong>，其中<strong>只有 0 表示成功</strong>，其它值都表示失败。</p><p>示例：</p><p>创建脚本<code>test.sh</code>，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $# -ne 1 ]  # 如果传入参数个数等于1，则正常退出；否则非正常退出。</span><br><span class="line">then</span><br><span class="line">    echo &quot;arguments not valid&quot;</span><br><span class="line">    exit 1</span><br><span class="line">else</span><br><span class="line">    echo &quot;arguments valid&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行该脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh </span><br><span class="line">./test.sh acwing</span><br><span class="line">arguments valid</span><br><span class="line"></span><br><span class="line">echo $?  # 传入一个参数，则正常退出，exit code为0</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">./test.sh </span><br><span class="line">arguments not valid</span><br><span class="line">echo $?  # 传入参数个数不是1，则非正常退出，exit code为1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><hr><h3 id="15-文件重定向"><a href="#15-文件重定向" class="headerlink" title="(15) 文件重定向"></a>(15) 文件重定向</h3><p>每个进程默认打开3个文件描述符：</p><ul><li><p><code>stdin</code>标准输入，从命令行读取数据，文件描述符为0</p></li><li><p><code>stdout</code>标准输出，向命令行输出数据，文件描述符为1</p></li><li><p><code>stderr</code>标准错误输出，向命令行输出数据，文件描述符为2</p></li></ul><p>可以用文件重定向将这三个文件重定向到其他文件中。</p><hr><p><strong>重定向命令列表</strong></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>command &gt; file</code></td><td>将<code>stdout</code>重定向到<code>file</code>中</td></tr><tr><td><code>command &lt; file</code></td><td>将<code>stdin</code>重定向到<code>file</code>中</td></tr><tr><td><code>command &gt;&gt; file</code></td><td>将<code>stdout</code>以<strong>追加方式</strong>重定向到<code>file</code>中</td></tr><tr><td><code>command n&gt; file</code></td><td>将文件描述符<code>n</code>重定向到<code>file</code>中</td></tr><tr><td><code>command n&gt;&gt; file</code></td><td>将文件描述符<code>n</code>以追加方式重定向到<code>file</code>中</td></tr></tbody></table><hr><p><strong>输入和输出重定向</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hello \c&quot; &gt; output.txt  # 将stdout重定向到output.txt中</span><br><span class="line">echo &quot;World&quot; &gt;&gt; output.txt  # 将字符串追加到output.txt中</span><br><span class="line"></span><br><span class="line">read str &lt; output.txt  # 从output.txt中读取字符串</span><br><span class="line"></span><br><span class="line">echo $str  # 输出结果：Hello World</span><br></pre></td></tr></table></figure><hr><p><strong>同时重定向stdin和stdout</strong><br>创建bash脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line"></span><br><span class="line">read a</span><br><span class="line">read b</span><br><span class="line"></span><br><span class="line">echo $(expr &quot;$a&quot; + &quot;$b&quot;)</span><br></pre></td></tr></table></figure><p>创建input.txt，里面的内容为：</p><p>3<br>4</p><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh  # 添加可执行权限</span><br><span class="line">./test.sh &lt; input.txt &gt; output.txt  # 从input.txt中读取内容，将输出写入output.txt中</span><br><span class="line">cat output.txt  # 查看output.txt中的内容</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p>ps: (补充内容)<br>1.<code>ls -l &gt;文件 </code>（列表的内容写入文件a.txt中 覆盖写）</p><p>2.<code>ls -al &gt;&gt;文件</code> （列表的内容文件追加到文件aa.txt的末尾）</p><p>3.<code>cat 文件1 &gt;文件2</code> （将文件1的内容覆盖到文件2）</p><p>4.<code>echo “内容” &gt;&gt;文件</code> (将echo的内容追加到文件末尾)</p><hr><h3 id="16-引入外部脚本"><a href="#16-引入外部脚本" class="headerlink" title="(16) 引入外部脚本"></a>(16) 引入外部脚本</h3><p>类似于<code>C/C++</code>中的<code>include</code>操作，**<code>bash</code>也可以引入其他文件中的代码**。</p><p>语法格式：</p><p><code>. filename </code>  注意点和文件名之间有一个空格</p><p><code>source filename</code>  这里<strong>会将filename执行一遍</strong></p><p>示例<br>创建<code>test1.sh</code>，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">name=yyy  # 定义变量name</span><br></pre></td></tr></table></figure><p>然后创建test2.sh，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">source test1.sh # 或 . test1.sh</span><br><span class="line"></span><br><span class="line">echo My name is: $name  # 可以使用test1.sh中的变量</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test2.sh </span><br><span class="line">./test2.sh </span><br><span class="line">My name is: yyy</span><br></pre></td></tr></table></figure><p>ps:</p><p><code>ll</code>等价于<code>ls -a</code>查看隐藏文件</p><hr><h2 id="2-创建作业-amp-测试作业的正确性"><a href="#2-创建作业-amp-测试作业的正确性" class="headerlink" title="2.创建作业 &amp; 测试作业的正确性"></a>2.创建作业 &amp; 测试作业的正确性</h2><pre><code>homework 3 create 可以重新创建所有lesson_3的作业homework 3 create id 可以单独创建lesson_3的第id个作业.e.g.homework 3 create 0 可以只重新创建lesson_3的第0个作业homework 3 test 可以评测lesson_3的所有作业</code></pre><hr><h2 id="3-章节作业"><a href="#3-章节作业" class="headerlink" title="3.章节作业"></a>3.章节作业</h2><p>创建好作业后，先进入文件夹<code>/home/acs/homework/lesson_3/</code>，然后：</p><h3 id="homework-0"><a href="#homework-0" class="headerlink" title="homework_0:"></a>homework_0:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(0) 进入homework_0文件夹，编写自动完成lesson_1作业的脚本helper.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含helper.sh</span><br><span class="line">    [2] helper.sh具有可执行权限</span><br><span class="line">    [3] 在任意路径依次执行下列命令后，lesson_1的作业可以得到满分：</span><br><span class="line">        1) homework 1 create</span><br><span class="line">        2) /home/acs/homework/lesson_3/homework_0/helper.sh</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-0"><a href="#作业笔记：homework-0" class="headerlink" title="作业笔记：homework_0"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6296012/">homework_0</a></h4><hr><h3 id="homework-1"><a href="#homework-1" class="headerlink" title="homework_1:"></a>homework_1:</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(1) 进入homework_1文件夹，编写脚本check_file.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含check_file.sh。</span><br><span class="line">    [2] check_file.sh具有可执行权限。</span><br><span class="line">    [3] check_file.sh接收一个传入参数。格式为 ./check_file.sh file</span><br><span class="line">    [4] 判断传递参数，分别在标准输出中输出如下内容（不包括双引号）：</span><br><span class="line">    1) 如果传入参数个数不是1，则输出一行：&quot;arguments not valid&quot;，然后退出，退出状态等于1。</span><br><span class="line">    2) 如果file文件不存在，则输出一行：&quot;not exist&quot;，然后退出，退出状态等于2。</span><br><span class="line">    3) 如果file文件存在，则输出分别进行如下5个判断，然后退出，退出状态等于0。</span><br><span class="line">        1] 如果file为普通文件，则输出一行：&quot;regular file&quot;</span><br><span class="line">        2] 如果file为目录（文件夹），则输出一行：&quot;directory&quot;</span><br><span class="line">        3] 如果file具有可读权限，则输出一行：&quot;readable&quot;</span><br><span class="line">        4] 如果file具有可写权限，则输出一行：&quot;writable&quot;</span><br><span class="line">        5] 如果file具有可执行权限，则输出一行：&quot;executable&quot;</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-1"><a href="#作业笔记：homework-1" class="headerlink" title="作业笔记：homework_1"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6310307/">homework_1</a></h4><hr><h3 id="homework-2"><a href="#homework-2" class="headerlink" title="homework_2:"></a>homework_2:</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(2) 进入homework_2文件夹，编写脚本main.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含main.sh</span><br><span class="line">    [2] main.sh具有可执行权限</span><br><span class="line">    [3] 该文件从stdin(标准输入)中读取一个整数n</span><br><span class="line">    [4] 在stdout(标准输出)输出斐波那契数列的第n项。即：a[0] = 1, a[1] = 1, a[i] = a[i - 1] + a[i - 2], 求a[n]。</span><br><span class="line">    [5] 数据保证 0 &lt;= n &lt;= 20，脚本不需要判断n的合法性。</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-2"><a href="#作业笔记：homework-2" class="headerlink" title="作业笔记：homework_2"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6310364/">homework_2</a></h4><hr><h3 id="homework-3"><a href="#homework-3" class="headerlink" title="homework_3:"></a>homework_3:</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(3) 进入homework_3文件夹，编写脚本main.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含main.sh</span><br><span class="line">    [2] main.sh具有可执行权限</span><br><span class="line">    [3] 该文件从stdin(标准输入)中读取两行整数n和m</span><br><span class="line">    [4] 在stdout(标准输出)中输出1~n的按字典序从小到大的顺序数第m个全排列，输出一行，用空格隔开所有数，行末可以有多余空格。</span><br><span class="line">    [5] 数据保证 1 &lt;= n &lt;= 10, 1 &lt;= m &lt;= min(100, n!)，脚本不需要判断数据的合法性。</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-3"><a href="#作业笔记：homework-3" class="headerlink" title="作业笔记：homework_3"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6310370/">homework_3</a></h4><hr><h3 id="homework-4"><a href="#homework-4" class="headerlink" title="homework_4:"></a>homework_4:</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(4) 进入homework_4文件夹，编写脚本main.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含main.sh</span><br><span class="line">    [2] main.sh具有可执行权限</span><br><span class="line">    [3] main.sh接收两个传入参数。格式为 ./main.sh input_file output_file</span><br><span class="line">    [4] 从input_file中读取一个正整数n，然后将前n个正整数的平方和写入output_file中</span><br><span class="line">    [5] 数据保证 1 &lt;= n &lt;= 100，脚本不需要判断所有数据的合法性。</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-4"><a href="#作业笔记：homework-4" class="headerlink" title="作业笔记：homework_4"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6310385/">homework_4</a></h4><hr><h2 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4.参考资料"></a>4.参考资料</h2><p>讲义整理自Linux基础课讲义，及评论区的问答整理</p><p><a href="https://www.acwing.com/activity/content/57/">Linux基础课程-AcWing</a></p><p><a href="https://www.acwing.com/activity/content/57/">https://www.acwing.com/activity/content/57/</a>)</p><p>章节作业打卡笔记：</p><p><a href="https://www.acwing.com/activity/content/code/content/6296012/">homework_0</a>    <a href="https://www.acwing.com/activity/content/code/content/6310307/">homework_1</a>    <a href="https://www.acwing.com/activity/content/code/content/6310364/">homework_2</a><br><a href="https://www.acwing.com/activity/content/code/content/6310370/">homework_3</a>    <a href="https://www.acwing.com/activity/content/code/content/6310385/">homework_4</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing-周赛 第97场题解</title>
      <link href="/posts/420.html"/>
      <url>/posts/420.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-周赛-第97场题解"><a href="#AcWing-周赛-第97场题解" class="headerlink" title="AcWing-周赛 第97场题解"></a>AcWing-周赛 第97场题解</h2><h3 id="T1-AcWing-4944-热身计算"><a href="#T1-AcWing-4944-热身计算" class="headerlink" title="T1: AcWing 4944. 热身计算"></a>T1: AcWing 4944. 热身计算</h3><p>给定两个正整数 a, b，请你分别计算 min(a,b) 以及 ⌊|a−b|/2⌋的值。⌊|a−b|/2⌋表示不大于 |a−b|/2的最大整数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含两个正整数 a,b。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，输出两个整数，分别表示 min(a,b)以及 ⌊|a−b|/2⌋。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>所有测试点满足 1 ≤ a, b ≤ 100。</p><h4 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h4><p>3  1</p><h4 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h4><p>1  1</p><h4 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h4><p>2  3</p><h4 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h4><p>2  0</p><h4 id="输入样例3"><a href="#输入样例3" class="headerlink" title="输入样例3"></a>输入样例3</h4><p>7  3</p><h4 id="输出样例3："><a href="#输出样例3：" class="headerlink" title="输出样例3："></a>输出样例3：</h4><p>3  2</p><hr><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">min</span>(a, b) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="built_in">abs</span>(a - b) / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="T2-AcWing-4945-比大小"><a href="#T2-AcWing-4945-比大小" class="headerlink" title="T2: AcWing 4945. 比大小"></a>T2: AcWing 4945. 比大小</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个 n 位 bx 进制数 X 和一个 m位 by进制数 Y。</p><p>X 和 Y 都为正整数，且都不含前导 0。</p><p>请你比较它们的大小。</p><h4 id="输入格式。"><a href="#输入格式。" class="headerlink" title="输入格式。"></a>输入格式。</h4><p>第一行包含两个整数 n, bx。</p><p>第二行包含 n 个整数 x1,x2,…,x，表示 X的各位数字，它们按照从最高有效位到最低有效位的顺序给出。</p><p>第三行包含两个整数 m,by。</p><p>第四行包含 m 个整数 y1,y2,…,y，表示 Y 的各位数字，它们按照从最高有效位到最低有效位的顺序给出。</p><p>X 和 Y 的各位数字在输入中均按十进制表示给出。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行：</p><ul><li><p>如果 X &lt; Y，则输出 <code>&lt;</code>。</p></li><li><p>如果 X &gt; Y，则输出 <code>&gt;</code>。</p></li><li><p>如果 X = Y，则输出 <code>=</code>。</p></li></ul><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 6 个测试点满足 2 ≤ bx, by ≤ 16。<br>所有测试点满足 1 ≤ n, m ≤ 1，2 ≤ bx, by ≤ 40，bx ≠ by，0 ≤ xi &lt; bx，0 ≤ yi&lt; by。</p><h4 id="输入样例1-1"><a href="#输入样例1-1" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">1 0 1 1 1 1</span><br><span class="line">2 10</span><br><span class="line">4 7</span><br></pre></td></tr></table></figure><h4 id="输出样例1-1"><a href="#输出样例1-1" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=</span><br></pre></td></tr></table></figure><h4 id="输入样例2-1"><a href="#输入样例2-1" class="headerlink" title="输入样例2"></a>输入样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 0 2</span><br><span class="line">2 5</span><br><span class="line">2 4</span><br></pre></td></tr></table></figure><h4 id="输出样例2-1"><a href="#输出样例2-1" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;</span><br></pre></td></tr></table></figure><h4 id="输入样例3-1"><a href="#输入样例3-1" class="headerlink" title="输入样例3"></a>输入样例3</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7 16</span><br><span class="line">15 15 4 0 0 7 10</span><br><span class="line">7 9</span><br><span class="line">4 8 0 3 1 5 0</span><br></pre></td></tr></table></figure><h4 id="输出样例3"><a href="#输出样例3" class="headerlink" title="输出样例3"></a>输出样例3</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p><strong>直接模拟，快速幂计算</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, bx, x, m, by, y;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; bx;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> X = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n --)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x; <span class="comment">// 共循读n次（n-1 ~ 0）</span></span><br><span class="line">        X += <span class="built_in">pow</span>(bx, n) * x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; m &gt;&gt; by;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> Y = <span class="number">0</span>; <span class="comment">// 最大到40^9级别（会爆int）</span></span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; y;</span><br><span class="line">        Y += <span class="built_in">pow</span>(by, m) * y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(X &lt; Y) <span class="built_in">puts</span>(<span class="string">&quot;&lt;&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; Y) <span class="built_in">puts</span>(<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>秦九韶算法，数学公式推导</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long LL;</span><br><span class="line"></span><br><span class="line">LL get()</span><br><span class="line">&#123;</span><br><span class="line">    int n, b;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; b;</span><br><span class="line">    LL res = 0;</span><br><span class="line">    while(n --) // n最大是10位</span><br><span class="line">    &#123;</span><br><span class="line">        int x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        res = res * b + x; // 秦九韶算法，数学公式推导</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    LL x = get();</span><br><span class="line">    LL y = get();</span><br><span class="line"></span><br><span class="line">    if(x &gt; y) puts(&quot;&gt;&quot;);</span><br><span class="line">    else if(x &lt; y) puts(&quot;&lt;&quot;);</span><br><span class="line">    else puts(&quot;=&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="T3-AcWing-4946-叶子节点"><a href="#T3-AcWing-4946-叶子节点" class="headerlink" title="T3: AcWing 4946. 叶子节点"></a>T3: AcWing 4946. 叶子节点</h3><p>给定一棵 n 个节点的树，节点编号 1 ∼ n。</p><p>1号节点为树的根节点。</p><p>每个节点要么是黑色的，要么是白色的。</p><p>对于一个叶子节点，如果从该节点到根节点的路径（包括两端节点）中有超过 m 个</p><p>黑色节点连续的排列在一起，则称该节点为无效叶子节点。</p><p>有效叶子节点数量 = 总叶子节点数量 - 无效叶子节点数量</p><p>请你统计，给定树中有效叶子节点的数量。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n, m。</p><p>第二行包含 n 个整数 a1, a2, …, an，其中 ai表示第 i 个节点的颜色，1 表示黑色，0 表示白色。</p><p>接下来 n−1 行，每行包含两个整数 x, y，表示节点 x 和节点 y 之间存在一条无向边。</p><p>保证输入给定的是一棵树。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，表示给定树中<strong>有效</strong>叶子节点的数量。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 66 个测试点满足 2 ≤ n ≤ 10。<br>所有测试点满足 2 ≤ n ≤ 10e5，1 ≤ m ≤ n，0 ≤ ai ≤ 1，1 ≤ x, y ≤ n，x ≠ y。</p><h4 id="输入样例1-2"><a href="#输入样例1-2" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 1</span><br><span class="line">1 1 0 0</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure><h4 id="输出样例1-2"><a href="#输出样例1-2" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="输入样例2-2"><a href="#输入样例2-2" class="headerlink" title="输入样例2"></a>输入样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7 1</span><br><span class="line">1 0 1 1 0 0 0</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">2 5</span><br><span class="line">3 6</span><br><span class="line">3 7</span><br></pre></td></tr></table></figure><h4 id="输出样例2-2"><a href="#输出样例2-2" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><hr><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">2</span> * N; <span class="comment">// 无向边，需存两次 10万范围O(N)或O（nlogn）</span></span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx; <span class="comment">// 定义邻接表</span></span><br><span class="line"><span class="type">int</span> c[N]; <span class="comment">// 存结点颜色</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">// 加边，头插法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa, <span class="type">int</span> cnt, <span class="type">bool</span> vaild)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c[u]) cnt ++;</span><br><span class="line">    <span class="keyword">else</span> cnt = <span class="number">0</span>; <span class="comment">// 不连续就清零</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt &gt; m) vaild = <span class="literal">false</span>; <span class="comment">// 无效叶子结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, sons = <span class="number">0</span>; <span class="comment">// 存子节点数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i]) <span class="comment">// 树的遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == fa) <span class="keyword">continue</span>; <span class="comment">// j是父结点，继续遍历</span></span><br><span class="line">        <span class="keyword">else</span> sons ++; <span class="comment">// 是子结点</span></span><br><span class="line">        <span class="comment">// j是当前结点, u是父结点</span></span><br><span class="line">        res += <span class="built_in">dfs</span>(j, u, cnt, vaild); <span class="comment">// 递归下一个节点，加上子树中满足有效子节点数量 </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!sons &amp;&amp; vaild) res ++; <span class="comment">// 若sons为0则代表没有子节点，即叶子节点</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]); <span class="comment">// 颜色数组c[]下标1开始读</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h); <span class="comment">// 初始化头结点,加&lt;cstring&gt;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a, b), <span class="built_in">add</span>(b, a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化dfs, 第4个参数表示该叶子结点是有效的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="literal">true</span>)); <span class="comment">// 树的深度优先遍历</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.acwing.com/video/4679/">题目讲解 - y总</a></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/8883176/">单链表题目</a></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/8854336/">类似题型 - 树的重心（树与图的深度优先遍历DFS）</a></p>]]></content>
      
      
      <categories>
          
          <category> AcWing周赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> AcWing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析与可视化 实践基础练习四（Pandas）</title>
      <link href="/posts/341a.html"/>
      <url>/posts/341a.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习四-（Pandas）"><a href="#数据分析与可视化-实践基础练习四-（Pandas）" class="headerlink" title="数据分析与可视化 实践基础练习四 （Pandas）"></a>数据分析与可视化 实践基础练习四 （Pandas）</h2><hr><h3 id="一、本节需掌握的Pandas相关函数或属性"><a href="#一、本节需掌握的Pandas相关函数或属性" class="headerlink" title="一、本节需掌握的Pandas相关函数或属性"></a>一、本节需掌握的Pandas相关函数或属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Series和DataFrame数据类型的创建</span><br><span class="line"></span><br><span class="line"><span class="comment"># Series创建（可以是列表，标量值，字典，ndarray，其他函数），index是行索引</span></span><br><span class="line">pd.Series(data=<span class="literal">None</span>, index=<span class="literal">None</span>, dtype=<span class="literal">None</span>, name=<span class="literal">None</span>, copy=<span class="literal">False</span>, fastpath)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DataFrame创建（有行索引和列索引，其类型可以是列表，字典，元组或Series，n维的ndarray）</span></span><br><span class="line">eg. pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> Series的基本操作（类似ndarray，字典类型的操作）</span><br><span class="line">可通过自定义索引列表来切片，自定义索引访问，get()方法</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> DataFrame数据查找、增加、删除和修改</span><br><span class="line"></span><br><span class="line">d[ [<span class="string">&#x27;col_1&#x27;</span>,<span class="string">&#x27;col_2&#x27;</span>] ] <span class="comment"># 通过列索引或以属性的方式可单独或取DataFrame的列数据 </span></span><br><span class="line">d[<span class="number">0</span>:<span class="number">2</span>] <span class="comment"># 切片方式，取0到1行</span></span><br><span class="line"></span><br><span class="line">head(),tail() <span class="comment"># 获取连续的数据</span></span><br><span class="line">loc(),iloc() <span class="comment"># 一个是跟行/列索引名（或是条件查询）loc的切片方式是闭区间，一个是跟行/列索引下标</span></span><br><span class="line"></span><br><span class="line">append() <span class="comment"># 增加一行数据</span></span><br><span class="line">insert() <span class="comment"># 可插入新的一列数据</span></span><br><span class="line"></span><br><span class="line">drop() <span class="comment">#删除， ！！！稍微特殊：axis为1是按列删，0是按行删</span></span><br><span class="line">set_index() <span class="comment">#更换索引</span></span><br><span class="line"></span><br><span class="line">直接修改是对DataFrame数据修改</span><br><span class="line">replace() <span class="comment"># 对数据进行替换,以字典形式</span></span><br><span class="line">rename() <span class="comment"># 修改列名，需传入需要修改列名的字典</span></span><br><span class="line">eg. d.rename(colmus=&#123;<span class="string">&#x27;城市&#x27;</span>:<span class="string">&#x27;city&#x27;</span>&#125;),inplace=<span class="literal">True</span>) <span class="comment"># 将右值赋给左值，加上布尔值是否要替换</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> DataFrame索引重建reindex( )  </span><br><span class="line">.reindex(index=<span class="literal">None</span>, columns=<span class="literal">None</span>, fill_value...) <span class="comment">#可进行新的自定义索引，填充指定值</span></span><br></pre></td></tr></table></figure><hr><h3 id="二、实训案例"><a href="#二、实训案例" class="headerlink" title="二、实训案例"></a>二、实训案例</h3><h4 id="1-Pokemon宠物小精灵数据初步探索。"><a href="#1-Pokemon宠物小精灵数据初步探索。" class="headerlink" title="1. Pokemon宠物小精灵数据初步探索。"></a>1. Pokemon宠物小精灵数据初步探索。</h4><p><a href="https://pan.baidu.com/s/1T6mHGFvxg6W7RRX3JMq-Mg?pwd=2023">Pokemon数据集下载</a></p><p>案例中使用宠物小精灵的相关数据进行分析，其中各列的列名意义为：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011253221.jpg" alt="img-202304011253221"></p><p>·    name：宠物小精灵的名称</p><p>·    Type 1：宠物小精灵的第一类型    Type 2：宠物小精灵的第二类型</p><p>·    Total：综合能力（生命点数、攻击强度、防御强度、特殊攻击强度、特殊防御强度和速度的总和）</p><p>·    HP：生命点数</p><p>·    Attack：攻击强度          Defense：防御强度</p><p>·    Sp.Atk：特殊攻击强度        Sp.Def：特殊防御强度</p><p>·    Speed：速度            Generation：世代数</p><p>·    Lengendary：True表示为传奇小精灵，False表示非传奇小精灵</p><hr><h4 id="2-结合数据集完成以下相关操作。"><a href="#2-结合数据集完成以下相关操作。" class="headerlink" title="2. 结合数据集完成以下相关操作。"></a>2. 结合数据集完成以下相关操作。</h4><p>（1）读取Pokemon.csv文件；</p><p>（2）展示数据前10行；</p><p>（3）删除名为“#”的列；</p><p>（4）将各列名改为中文, 参数inplace设置替换原数据；</p><p>（5）分别查看数据表的行、列索引；</p><p>（6）查看第一类型的唯一值；</p><p>（7）查看行标签为2、4小精灵的名称和综合能力；</p><p>（8）查看行标签为5到10小精灵的名称和综合能力；</p><p>（9）通过切片方式查看前6个小精灵的数据；</p><p>（10）查看攻击强度大于160的小精灵的所有数据；</p><p>（11）查看传奇小精灵的数据，只展示前十行数据；</p><p>（12）创建新列“能力600”，插入到综合能力一列的后面，该列显示综合能力大于等于600的为True，小于600为False；</p><p>（13）创建新列“世代456”，插入到最后一列，该列显示世代数为4、5和6的小精灵为True, 其他为False，随机选取10行数据进行展示。</p><hr><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （1）读取Pokemon.csv文件；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">d = pd.read_csv(<span class="string">&#x27;Pokemon.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>) <span class="comment"># 读取文件</span></span><br><span class="line">d.head() <span class="comment"># 默认输出前5行数据</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011925325.jpg" alt="001"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （2）展示数据前10行；</span></span><br><span class="line"></span><br><span class="line">d.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011925442.jpg" alt="002"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （3）删除名为“#”的列；</span></span><br><span class="line"></span><br><span class="line">d.drop(<span class="string">&#x27;#&#x27;</span>, axis = <span class="number">1</span>, inplace = <span class="literal">True</span>) <span class="comment"># 确认替换原数据</span></span><br><span class="line">d.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011925979.jpg" alt="003"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （4）将各列名改为中文, 参数inplace设置替换原数据；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入字典类型值</span></span><br><span class="line">d.rename(columns=&#123;<span class="string">&#x27;Name&#x27;</span>:<span class="string">&#x27;名称&#x27;</span>, <span class="string">&#x27;Type 1&#x27;</span>:<span class="string">&#x27;第一类型&#x27;</span>, <span class="string">&#x27;Type 2&#x27;</span>:<span class="string">&#x27;第一类型&#x27;</span>, <span class="string">&#x27;Total&#x27;</span>:<span class="string">&#x27;综合能力&#x27;</span>, <span class="string">&#x27;HP&#x27;</span>:<span class="string">&#x27;生命点数&#x27;</span>, <span class="string">&#x27;Attack&#x27;</span>:<span class="string">&#x27;攻击强度&#x27;</span>, <span class="string">&#x27;Defense&#x27;</span>:<span class="string">&#x27;防御强度&#x27;</span>, <span class="string">&#x27;Sp.Atk&#x27;</span>:<span class="string">&#x27;特殊攻击强度&#x27;</span>, <span class="string">&#x27;Sp.Def&#x27;</span>:<span class="string">&#x27;特殊攻击强度&#x27;</span>, <span class="string">&#x27;Speed&#x27;</span>:<span class="string">&#x27;速度&#x27;</span>, <span class="string">&#x27;Generation&#x27;</span>:<span class="string">&#x27;世代数&#x27;</span>, <span class="string">&#x27;Legendary&#x27;</span>:<span class="string">&#x27;传奇小精灵&#x27;</span>, &#125;, inplace = <span class="literal">True</span>)</span><br><span class="line">d.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011926259.jpg" alt="004"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （5）分别查看数据表的行、列索引；</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(d.index) <span class="comment"># 共800行</span></span><br><span class="line"><span class="built_in">list</span>(d.columns) <span class="comment"># 输出列索引</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;名称&#x27;,</span><br><span class="line">    &#x27;第一类型&#x27;,</span><br><span class="line">    &#x27;第一类型&#x27;,</span><br><span class="line">    &#x27;综合能力&#x27;,</span><br><span class="line">    &#x27;生命点数&#x27;,</span><br><span class="line">    &#x27;攻击强度&#x27;,</span><br><span class="line">    &#x27;防御强度&#x27;,</span><br><span class="line">    &#x27;Sp. Atk&#x27;,</span><br><span class="line">    &#x27;Sp. Def&#x27;,</span><br><span class="line">    &#x27;速度&#x27;,</span><br><span class="line">    &#x27;世代数&#x27;,</span><br><span class="line">    &#x27;传奇小精灵&#x27;]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （6）查看第一类型的唯一值；</span></span><br><span class="line"></span><br><span class="line">d[<span class="string">&#x27;第一类型&#x27;</span>].nunique() </span><br><span class="line"><span class="comment"># nunique统计去重后元素的个数（过滤掉nan，但会统计空字符串）</span></span><br><span class="line"><span class="comment"># unique统计去重后所有元素（包含nan以及空字符串）</span></span><br><span class="line"><span class="comment"># value_counts()是Series拥有的方法，一般在DataFrame中使用时，需要指定对哪一列或行</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一类型    18</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （7）查看行标签为2、4小精灵的名称和综合能力；</span></span><br><span class="line"></span><br><span class="line">d.loc[ [<span class="number">2</span>, <span class="number">4</span>], [<span class="string">&#x27;名称&#x27;</span>, <span class="string">&#x27;综合能力&#x27;</span>] ]</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011927577.jpg" alt="007" style="zoom: 67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （8）查看行标签为5到10小精灵的名称和综合能力；</span></span><br><span class="line"></span><br><span class="line">d.iloc[ <span class="number">5</span>:<span class="number">11</span>, [<span class="number">0</span>, <span class="number">3</span>] ] <span class="comment"># 名称和综合能力分别在第0列和第3列</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011927045.jpg" alt="008" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （9）通过切片方式查看前6个小精灵的数据；</span></span><br><span class="line"></span><br><span class="line">d.loc[<span class="number">0</span>:<span class="number">5</span>] <span class="comment"># 索引值是闭区间</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011928939.jpg" alt="009"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （10）查看攻击强度大于160的小精灵的所有数据；</span></span><br><span class="line"></span><br><span class="line">d.loc[d[<span class="string">&#x27;攻击强度&#x27;</span>] &gt; <span class="number">160</span>] <span class="comment"># 条件查询，返回结果为True的那些行</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011928156.jpg" alt="010"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  （11）查看传奇小精灵的数据，只展示前十行数据；</span></span><br><span class="line"></span><br><span class="line">d1 = d.loc[d[<span class="string">&#x27;传奇小精灵&#x27;</span>] == <span class="literal">True</span>]</span><br><span class="line">d1.head(<span class="number">10</span>) <span class="comment"># 或者 d[d[&#x27;传奇小精灵&#x27;] == True].head(10)</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011929780.jpg" alt="011"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （12）创建新列“能力600”，插入到综合能力一列的后面，该列显示综合能力大于等于600的为True，小于600为False；</span></span><br><span class="line"></span><br><span class="line">col_new = <span class="string">&#x27;能力600&#x27;</span></span><br><span class="line">d.insert(<span class="number">4</span>, col_new, d[<span class="string">&#x27;综合能力&#x27;</span>] &gt; <span class="number">600</span>) <span class="comment"># insert()用于插入列（参数跟插入列后的位置，列索引名，插入的值）</span></span><br><span class="line">d</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011932776.jpg" alt="012"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （13）创建新列“世代456”，插入到最后一列，该列显示世代数为4、5和6的小精灵为True, 其他为False，随机选取10行数据进行展示。</span></span><br><span class="line"></span><br><span class="line">col_new1 = <span class="string">&#x27;世代456&#x27;</span></span><br><span class="line">d.insert(<span class="number">13</span>, col_new1, d[<span class="string">&#x27;世代数&#x27;</span>].isin([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]) ) <span class="comment"># 最后一列的下标是12, isin()接受一个列表，来判断该列中元素是否在列表中</span></span><br><span class="line">d.sample(<span class="number">10</span>) <span class="comment"># sample()用于从DataFrame中随机选择行或列</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011929160.jpg" alt="013"></p><hr><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://pan.baidu.com/s/1T6mHGFvxg6W7RRX3JMq-Mg?pwd=2023">Pokemon数据集</a></p><p><a href="https://blog.csdn.net/m0_49705298/article/details/119142523">Pandas统计函数count，unique，nunique的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析与可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析与可视化 实践基础练习三（NumPy）</title>
      <link href="/posts/dfda.html"/>
      <url>/posts/dfda.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习三-（NumPy）"><a href="#数据分析与可视化-实践基础练习三-（NumPy）" class="headerlink" title="数据分析与可视化 实践基础练习三 （NumPy）"></a>数据分析与可视化 实践基础练习三 （NumPy）</h2><h3 id="一、实训要求"><a href="#一、实训要求" class="headerlink" title="一、实训要求"></a>一、实训要求</h3><p><strong>实训：葡萄酒品质数据NumPy基础分析</strong></p><p>本次案例使用葡萄酒品质数据，该数据集包含1599种红葡萄酒的各种信息，如酒的固定酸度、挥发性酸度和pH值等测量值，也包括一个酒的品质得分，该得分是至少三类口味测试者给该款酒打分的平均值。该数据来源于公开数据库UCI，更多详细信息可以查看  <a href="https://archive.ics.uci.edu/ml/datasets/Wine+Quality">https://archive.ics.uci.edu/ml/datasets/Wine+Quality</a> 。</p><p>数据集下载，<a href="https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/">DataSet</a>。</p><p>数据说明：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011237728.jpg" alt="img-202304011237728"></p><hr><h3 id="二、练习题目"><a href="#二、练习题目" class="headerlink" title="二、练习题目"></a>二、练习题目</h3><p>请完成以下操作：</p><p>1、提取第一种葡萄酒的所有数据；</p><p>2、将葡萄酒数据降为一维数据；</p><p>3、将降维后的数组重新恢复成以前的形状；</p><p>4、我们计划引入一种新的葡萄酒品质打分方法，同时保留原来的品质得分，所以需要添加一列新值在原始数组后，初始值全为0；</p><p>5、我们认为葡萄酒数据中的品质得分普遍偏低，打算将所有葡萄酒的品质得分加10；</p><p>6、我们想要选择最大化酒精含量和品质的葡萄酒（我们想喝醉，但我们想喝好酒），需要计算各葡萄酒酒精度数乘以品质得分的值;</p><p>7、计算品质得分数据的标准差;</p><p>8、哪些葡萄酒的酒精度数高于10 ，并统计其个数。</p><hr><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础实训3：葡萄酒品质数据NumPy基础分析</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.导入数据</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># numpy主要用于对多维数组进行计算</span></span><br><span class="line"></span><br><span class="line">wines = np.loadtxt(<span class="string">&quot;./winequality-red.csv&quot;</span>, delimiter = <span class="string">&quot;;&quot;</span>, skiprows = <span class="number">1</span>) <span class="comment"># 原数据集第1行是字符串，读取数据时要跳过1行(skiprows=1)</span></span><br><span class="line">wines <span class="comment"># 输出</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array([[ 7.4  ,  0.7  ,  0.   , ...,  0.56 ,  9.4  ,  5.   ],</span><br><span class="line">       [ 7.8  ,  0.88 ,  0.   , ...,  0.68 ,  9.8  ,  5.   ],</span><br><span class="line">       [ 7.8  ,  0.76 ,  0.04 , ...,  0.65 ,  9.8  ,  5.   ],</span><br><span class="line">       ...,</span><br><span class="line">       [ 6.3  ,  0.51 ,  0.13 , ...,  0.75 , 11.   ,  6.   ],</span><br><span class="line">       [ 5.9  ,  0.645,  0.12 , ...,  0.71 , 10.2  ,  5.   ],</span><br><span class="line">       [ 6.   ,  0.31 ,  0.47 , ...,  0.66 , 11.   ,  6.   ]])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、提取第一种葡萄酒的所有数据；</span></span><br><span class="line"></span><br><span class="line">wines[<span class="number">0</span>] <span class="comment"># 输出第一行</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([ 7.4   ,  0.7   ,  0.    ,  1.9   ,  0.076 , 11.    , 34.    ,</span><br><span class="line">        0.9978,  3.51  ,  0.56  ,  9.4   ,  5.    ])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2、将葡萄酒数据降为一维数据；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">wines.flatten() <span class="comment"># flatten()函数只能适用于numpy对象, 返回一个折叠成一维的数组且原数组不变。</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([ 7.4 ,  0.7 ,  0.  , ...,  0.66, 11.  ,  6.  ])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wines.shape</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1599, 12)</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">wines.reshape(<span class="number">1</span>, <span class="number">1599</span>*<span class="number">12</span>) <span class="comment"># 获取数组的尺寸后，用reshape()重塑为1行n列</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([[ 7.4 ,  0.7 ,  0.  , ...,  0.66, 11.  ,  6.  ]])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3、将降维后的数组重新恢复成以前的形状；</span></span><br><span class="line"></span><br><span class="line">wines.reshape(<span class="number">1599</span>,<span class="number">12</span>) <span class="comment"># 还原数组尺寸</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array([[ 7.4  ,  0.7  ,  0.   , ...,  0.56 ,  9.4  ,  5.   ],</span><br><span class="line">       [ 7.8  ,  0.88 ,  0.   , ...,  0.68 ,  9.8  ,  5.   ],</span><br><span class="line">       [ 7.8  ,  0.76 ,  0.04 , ...,  0.65 ,  9.8  ,  5.   ],</span><br><span class="line">       ...,</span><br><span class="line">       [ 6.3  ,  0.51 ,  0.13 , ...,  0.75 , 11.   ,  6.   ],</span><br><span class="line">       [ 5.9  ,  0.645,  0.12 , ...,  0.71 , 10.2  ,  5.   ],</span><br><span class="line">       [ 6.   ,  0.31 ,  0.47 , ...,  0.66 , 11.   ,  6.   ]])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4、我们计划引入一种新的葡萄酒品质打分方法，同时保留原来的品质得分，所以需要添加一列新值在原始数组后，初始值全为0；</span></span><br><span class="line"></span><br><span class="line">new_col = np.zeros((<span class="number">1599</span>)) <span class="comment"># 相当于初始化一列全0</span></span><br><span class="line">wines = np.insert(wines, <span class="number">12</span>, new_col, axis = <span class="number">1</span>) <span class="comment"># 在最后一列位置引入新列（轴向，0：行，1：列）</span></span><br><span class="line">wines</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array([[ 7.4  ,  0.7  ,  0.   , ...,  9.4  ,  5.   ,  0.   ],</span><br><span class="line">       [ 7.8  ,  0.88 ,  0.   , ...,  9.8  ,  5.   ,  0.   ],</span><br><span class="line">       [ 7.8  ,  0.76 ,  0.04 , ...,  9.8  ,  5.   ,  0.   ],</span><br><span class="line">       ...,</span><br><span class="line">       [ 6.3  ,  0.51 ,  0.13 , ..., 11.   ,  6.   ,  0.   ],</span><br><span class="line">       [ 5.9  ,  0.645,  0.12 , ..., 10.2  ,  5.   ,  0.   ],</span><br><span class="line">       [ 6.   ,  0.31 ,  0.47 , ..., 11.   ,  6.   ,  0.   ]])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5、我们认为葡萄酒数据中的品质得分普遍偏低，打算将所有葡萄酒的品质得分加10；</span></span><br><span class="line"></span><br><span class="line">wines[:, -<span class="number">2</span>] = wines[:, -<span class="number">2</span>] + <span class="number">10</span> <span class="comment"># 将倒2列的值更新为加10后的值</span></span><br><span class="line">wines</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array([[ 7.4  ,  0.7  ,  0.   , ...,  9.4  , 15.   ,  0.   ],</span><br><span class="line">       [ 7.8  ,  0.88 ,  0.   , ...,  9.8  , 15.   ,  0.   ],</span><br><span class="line">       [ 7.8  ,  0.76 ,  0.04 , ...,  9.8  , 15.   ,  0.   ],</span><br><span class="line">       ...,</span><br><span class="line">       [ 6.3  ,  0.51 ,  0.13 , ..., 11.   , 16.   ,  0.   ],</span><br><span class="line">       [ 5.9  ,  0.645,  0.12 , ..., 10.2  , 15.   ,  0.   ],</span><br><span class="line">       [ 6.   ,  0.31 ,  0.47 , ..., 11.   , 16.   ,  0.   ]])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6、我们想要选择最大化酒精含量和品质的葡萄酒（我们想喝醉，但我们想喝好酒），需要计算各葡萄酒酒精度数乘以品质得分的值。</span></span><br><span class="line"></span><br><span class="line">a = wines[:, -<span class="number">3</span>] * wines[:, -<span class="number">2</span>] <span class="comment"># 倒3列时酒精度数，倒2列是品质得分相乘即可</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">np.<span class="built_in">max</span>(a) <span class="comment">#再利用numpy求最大值即可</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[141. 147. 147. ... 176. 153. 176.]</span><br><span class="line"></span><br><span class="line">252.0</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7、计算品质得分数据的标准差。</span></span><br><span class="line"></span><br><span class="line">np.std(wines[:, -<span class="number">2</span>]) <span class="comment"># 计算品质得分的标准差</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.8073168769639513</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8、哪些葡萄酒的酒精度数高于10 ，并统计其个数。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(wines[:, -<span class="number">3</span>] &gt; <span class="number">10</span>) <span class="comment"># sum会计算为True的数量</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">852</span><br></pre></td></tr></table></figure><hr><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/">实训数据集（DataSet）</a></p><p><a href="https://blog.csdn.net/ACID_lv_ing/article/details/87092714">np.loadtxt()的详细用法</a></p><p><a href="https://blog.csdn.net/Mxeron/article/details/113405004">np.insert的用法</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析与可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> NumPy </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing-周赛 第96场题解</title>
      <link href="/posts/c171.html"/>
      <url>/posts/c171.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-周赛-第96场题解"><a href="#AcWing-周赛-第96场题解" class="headerlink" title="AcWing-周赛 第96场题解"></a>AcWing-周赛 第96场题解</h2><h3 id="T1-AcWing-4876-完美数"><a href="#T1-AcWing-4876-完美数" class="headerlink" title="T1: AcWing 4876. 完美数"></a>T1: AcWing 4876. 完美数</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>如果一个正整数能够被 2520 整除，则称该数为完美数。<br>给定一个正整数 n，请你计算 [1,n] 范围内有多少个完美数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>一个整数 n。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，表示 [1,n] 范围内完美数的个数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 3个测试点满足 1≤n≤3000。<br>所有测试点满足 1≤n≤1e18。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3000</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><hr><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n; <span class="comment">// 会爆int(2.1 x 10 ^9)</span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">// 完美数的个数k,应要满足 k * 2520 &lt;= n, 即 k &lt;= (n / 2520) 下取整即可</span></span><br><span class="line">    cout &lt;&lt; n / <span class="number">2520</span> &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="T2-AcWing-4877-最大价值"><a href="#T2-AcWing-4877-最大价值" class="headerlink" title="T2: AcWing 4877. 最大价值"></a>T2: AcWing 4877. 最大价值</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>有一个容量为 n 的背包和 m+1 种物品，每种物品都有无限多个。</p><p>物品种类编号为 0∼m。</p><p>第 i种物品的体积为 vi，价值为 wi。</p><p>在使用背包装入物品时，每种物品的限重如下：</p><ul><li>第 0 种物品：重量忽略不计，在装入时没有重量限制。</li><li>第 1∼m 种物品：第 i 种物品的单个重量为 hi，如果该种物品的装入总重量超过 li，则视为超重。</li></ul><p>现在，请你挑选物品装入背包，要求</p><ul><li>所有装入物品的总体积不得超过背包容量。</li><li>所有存在重量限制的物品均不得超重。</li><li>满足以上所有条件的前提下，所有装入物品的总价值尽可能大。</li></ul><p>输出总价值的最大可能值。</p><p>注意审题，不要将 n,m的含义弄混。</p><h4 id="输入格式。"><a href="#输入格式。" class="headerlink" title="输入格式。"></a>输入格式。</h4><p>第一行包含四个整数 n,m,v0,w0。</p><p>接下来 m 行，每行包含四个整数 li,hi,vi,wi。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，表示总价值的最大可能值。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 44 个测试点满足 1≤n≤100，1≤m≤2。<br>所有测试点满足 1≤n≤1000，1≤m≤10，1≤li,hi,vi,wi≤100。</p><h4 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 2 2 1</span><br><span class="line">7 3 2 100</span><br><span class="line">12 3 1 10</span><br></pre></td></tr></table></figure><h4 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">241</span><br></pre></td></tr></table></figure><h4 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100 1 25 50</span><br><span class="line">15 5 20 10</span><br></pre></td></tr></table></figure><h4 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">200</span><br></pre></td></tr></table></figure><hr><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m, v[N], w[N];</span><br><span class="line"><span class="type">int</span> dp[N]; <span class="comment">// dp[j]表示背包容量为j时的最大价值</span></span><br><span class="line"><span class="type">int</span> s[N]; <span class="comment">// 每个物品最多有s[i]个转化为多重背包问题</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 数组范围10^6，完全背包+多重背包优化结合</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; v[<span class="number">0</span>] &gt;&gt; w[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, h;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; h &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">        s[i] = l / h;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第0种物品m0，有无限多个，完全背包问题</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = v[<span class="number">0</span>]; i &lt;= n; i ++) <span class="comment">// 预处理第0件物品的最大价值</span></span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i], dp[i - v[<span class="number">0</span>]] + w[<span class="number">0</span>]); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第1∼m种物品，最多有(l/h)个，多重背包问题(三重for循环)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = n; j &gt;= <span class="number">1</span>; j --)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k ++)</span><br><span class="line">                <span class="comment">// 该状态是从(i-1)层转移过来，需从大到小来枚举体积n</span></span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - k * v[i]] + k *w[i]); </span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; dp[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.acwing.com/video/4674/">y总直播讲解</a><br><a href="https://www.acwing.com/solution/content/179457/">最大价值？披着羊皮的多重背包！！</a><br><a href="https://www.acwing.com/activity/content/code/content/4663006/">AcWing 3. 完全背包问题</a><br><a href="https://www.acwing.com/activity/content/code/content/6062057/">AcWing 4. 多重背包问题I</a><br><a href="https://www.acwing.com/activity/content/code/content/6062906/">AcWing 4877. 最大价值 - 打卡记录</a></p><p><a href="https://www.bilibili.com/video/BV1RU4y1h7BN/?share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">B站-动态规划dp求解01背包问题讲解</a></p>]]></content>
      
      
      <categories>
          
          <category> AcWing周赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> AcWing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing-周赛 第95场题解</title>
      <link href="/posts/ce81.html"/>
      <url>/posts/ce81.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-周赛-第95场题解"><a href="#AcWing-周赛-第95场题解" class="headerlink" title="AcWing-周赛 第95场题解"></a>AcWing-周赛 第95场题解</h2><h3 id="T1-AcWing-4873-简单计算"><a href="#T1-AcWing-4873-简单计算" class="headerlink" title="T1:AcWing 4873. 简单计算"></a>T1:AcWing 4873. 简单计算</h3><p>给定四个整数 x1,y1,x2,y2，请你计算 max(|x1−x2|,|y1−y2|)。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 x1,y1。</p><p>第二行包含两个整数 x2,y2。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，表示 max(|x1−x2|,|y1−y2|)的值。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 44 个测试点满足 −10≤x1,y1,x2,y2≤10。<br>所有测试点满足 −10e9≤x1,y1,x2,y2≤10e9。</p><h4 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 0</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">6 1</span><br></pre></td></tr></table></figure><h4 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><hr><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x1,x2,y1,y2;</span><br><span class="line">    cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(<span class="built_in">abs</span>(x1 - x2), <span class="built_in">abs</span>(y1 - y2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="T2-AcWing-4874-约数"><a href="#T2-AcWing-4874-约数" class="headerlink" title="T2:AcWing 4874.约数"></a>T2:AcWing 4874.约数</h3><p>如果一个正整数的约数个数恰好为 33，则称该数为美丽数。</p><p>给定 n个正整数 a1,a2,…,an, 请你依次判断每个数是否是美丽数。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>第二行包含 n个整数 a1,a2,…,an。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 n行，其中第 i行输出对 ai的判断，如果 ai是美丽数，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 6个测试点满足 1≤n≤10。<br>所有测试点满足 1≤n≤105，1≤ai≤10121。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4 5 6</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><hr><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>参考y总的讲解，优化处理yyds!!!</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>; <span class="comment">// 优化处理即判断r=sqrt(n)，看平方根r是否是质数</span></span><br><span class="line"><span class="type">int</span> primes[N]; <span class="comment">// 用于存储N个待判断的整数</span></span><br><span class="line"><span class="type">bool</span> st[N]; <span class="comment">// 用于标记该位置上的数是否为质数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span> <span class="comment">// 筛质数(线性筛法)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// !!!需要手动特判一下，1的约数个数为1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) primes[cnt ++] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] * i &lt;= n; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>; <span class="comment">// 即将非质数的状态更新为true</span></span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 即sqrt(x)是质数，等价于约数个数为（1, x, r=sqrt(x)）这三个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">get_primes</span>(N - <span class="number">1</span>); <span class="comment">// 预处理这N个数，标记状态</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n --)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x; <span class="comment">// 用long long存,12位数会爆int</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">        LL r = <span class="built_in">sqrt</span>(x); <span class="comment">// 记得加&lt;cmath&gt;头文件</span></span><br><span class="line">        <span class="keyword">if</span> (r * r == x &amp;&amp; !st[r]) <span class="comment">// 满足x是平方数的且平方根为奇数的，才是美丽数</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps: </p><p>完全平方数定义，若一个数能表示成某个整数的平方的形式，则称这个数为完全平方数。</p><p>eg. 36 = 6 * 6, 称36为完全平方数。</p><p>参考资料：</p><p><a href="https://www.acwing.com/video/4666/">T2视频讲解</a></p><p><a href="https://www.acwing.com/blog/content/32/">数据范围</a></p><p><a href="http://baike.baidu.com/l/COk2KzST">完全平方数</a></p><p><a href="http://t.csdn.cn/nR7Wo">判断一个数是否为素数时，只需开平方根</a></p><p>相关例题：<br><a href="https://www.acwing.com/problem/content/728/">质数(语法题)</a></p><p><a href="https://www.acwing.com/activity/content/code/content/5050226/">枚举约数题</a></p><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://t.csdn.cn/D5VJO">同类题解【蓝桥杯集训·周赛】AcWing 第 95 场周赛</a></p>]]></content>
      
      
      <categories>
          
          <category> AcWing周赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> AcWing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机视觉 上机实践一 图像的基本操作</title>
      <link href="/posts/85c6.html"/>
      <url>/posts/85c6.html</url>
      
        <content type="html"><![CDATA[<h2 id="计算机视觉-上机实践一-图像的基本操作"><a href="#计算机视觉-上机实践一-图像的基本操作" class="headerlink" title="计算机视觉 上机实践一 图像的基本操作"></a>计算机视觉 上机实践一 图像的基本操作</h2><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><p>通过本次实验，掌握图像的读取、显示、保存、绘制等基本操作；</p><p>熟悉图像的灰度直方图原理，并对图像进行灰度变换和颜色空间变换；</p><p>能绘制自定义图像。</p><h3 id="二、实验环境"><a href="#二、实验环境" class="headerlink" title="二、实验环境"></a>二、实验环境</h3><ol><li><p>硬件环境：一台笔电</p></li><li><p>软件环境：Windows10环境、Jupyter Notebook软件;</p></li></ol><h3 id="三、实验内容及代码实现"><a href="#三、实验内容及代码实现" class="headerlink" title="三、实验内容及代码实现"></a>三、实验内容及代码实现</h3><h4 id="1-读取、显示、保存图像"><a href="#1-读取、显示、保存图像" class="headerlink" title="1. 读取、显示、保存图像"></a>1. 读取、显示、保存图像</h4><p>源文件lena.png:</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303081507561.jpg" alt="img-202303081507561" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.读取、显示、保存Lena图像；(使用matplotlib库)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg </span><br><span class="line"></span><br><span class="line"><span class="comment"># mipimg读取图片</span></span><br><span class="line">lena = mpimg.imread(<span class="string">&#x27;lean.png&#x27;</span>) </span><br><span class="line"></span><br><span class="line">plt.imshow(lena) <span class="comment"># plt.imshow()函数负责对图像进行处理，并显示其格式</span></span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>) <span class="comment"># 不显示坐标轴</span></span><br><span class="line">plt.title(<span class="string">&#x27;Lena.png&#x27;</span>) <span class="comment"># 显示标题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="comment">#bbox_inches=&#x27;tight&#x27;表示指定将图表多余的空白区域裁减掉</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;lean-new.png&#x27;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)  <span class="comment"># 注意：保存需要在显示的前面，否则保存的图片会是空白</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示经imshow处理的图片</span></span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303182252441.png" alt="img-202303182252441"></p><hr><h4 id="2-直方图均衡化"><a href="#2-直方图均衡化" class="headerlink" title="2.直方图均衡化"></a>2.直方图均衡化</h4><p>内容：选择一张有明暗对比的图片(网上找一张即可)，读取并绘制图像的直方图；对输入图像进行直方图均衡化并输出结果；</p><p>（1）使用Matplotlib库实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.选择一张有明暗对比的图片，读取并绘制图像的直方图；对输入图像进行直方图均衡化并输出结果；（使用Matplotlib库实现）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="comment"># opencv读取的图片数值为BGR格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取并显示原始图像</span></span><br><span class="line">original = cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>) <span class="comment"># 第2个参数flags表示标记位，读入灰度图片可用0作为实参替代</span></span><br><span class="line"><span class="comment"># 创建1个图形figure</span></span><br><span class="line">plt.figure(figsize=(<span class="number">18</span>, <span class="number">18</span>)) </span><br><span class="line">image1 = plt.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>) <span class="comment"># 为方便观察结果，这里创建了多个子图subplot</span></span><br><span class="line">image1.set_title(<span class="string">&#x27;Original Image&#x27;</span>)</span><br><span class="line">plt.imshow(original)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原图的直方图</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>,<span class="number">0</span>) <span class="comment"># 第2个参数flags表示标记位，读入灰度图片可用0作为实参替代</span></span><br><span class="line"><span class="comment"># 这里使用Matplotlib库自带的计算并绘制直方图功能</span></span><br><span class="line">image2 = plt.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">image2.set_title(<span class="string">&#x27;Original Histogram&#x27;</span>)</span><br><span class="line">plt.hist(img.ravel(),<span class="number">256</span>,[<span class="number">0</span>,<span class="number">255</span>]) <span class="comment"># 绘制原图像的灰度直方图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 均衡化后的直方图</span></span><br><span class="line">img2 = cv2.equalizeHist(img)</span><br><span class="line">image4 = plt.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">image4.set_title(<span class="string">&#x27;Equalized Histogram&#x27;</span>)</span><br><span class="line">plt.hist(img2.ravel(),<span class="number">256</span>,[<span class="number">0</span>,<span class="number">255</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303182257597.png" alt="img-202303182257597"></p><hr><p>（2）使用opencv库实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.更好的阅读体验，使用subplot创建单个子图（使用opencv库实现）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>, <span class="number">0</span>) <span class="comment"># 读取原始图的灰度度</span></span><br><span class="line">img_eq = cv2.equalizeHist(img) <span class="comment"># 用opencv库实现图像直方图均衡化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># opencv库calcHist()来计算直方图</span></span><br><span class="line">hist = cv2.calcHist([img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>,<span class="number">255</span>]) <span class="comment"># 第1个参数表示要计算的原图 </span></span><br><span class="line">hist_eq = cv2.calcHist([img_eq], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>,<span class="number">255</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建1个图形figure</span></span><br><span class="line">plt.figure(figsize=(<span class="number">13</span>, <span class="number">13</span>)) </span><br><span class="line">image1 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">image1.set_title(<span class="string">&#x27;Oringinal Image&#x27;</span>)</span><br><span class="line">plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>) <span class="comment"># cmap:颜色图谱（colormap),这里是绘制灰图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 均衡化后的图片</span></span><br><span class="line">image2 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">image2.set_title(<span class="string">&#x27;Equalized Image&#x27;</span>)</span><br><span class="line">plt.imshow(img_eq,cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原图的直方图</span></span><br><span class="line">image3 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">image3.set_title(<span class="string">&#x27;Oringinal Histogram&#x27;</span>)</span><br><span class="line">plt.plot(hist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均衡化后的直方图</span></span><br><span class="line">image4 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">image4.set_title(<span class="string">&#x27;Equalized Histogram&#x27;</span>)</span><br><span class="line">plt.plot(hist_eq)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303182259322.png" alt="img-202303182259322" style="zoom:67%;" /><hr><h4 id="3-对图像进行灰度变换、颜色空间转换等基本操作"><a href="#3-对图像进行灰度变换、颜色空间转换等基本操作" class="headerlink" title="3. 对图像进行灰度变换、颜色空间转换等基本操作"></a>3. 对图像进行灰度变换、颜色空间转换等基本操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.对读入图像进行灰度变换、颜色空间转换等基本操作；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像,opencv读取图像是BGR顺序</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;lean.png&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确显示图片</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>)) </span><br><span class="line">image1 = plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">image1.set_title(<span class="string">&#x27;Raw Image&#x27;</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(img.astype(np.uint8), cv2.COLOR_BGR2RGB)) <span class="comment"># 保证显示出的图像是RGB顺序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行灰度变换：RGB to GRAY</span></span><br><span class="line"><span class="comment"># 方法1，使用公式：Gray = 0.2989*R+0.5870*G+0.1140*B</span></span><br><span class="line">img1 = <span class="number">0.2989</span> * img[:,:,<span class="number">2</span>] + <span class="number">0.5870</span> * img[:,:,<span class="number">1</span>] + <span class="number">0.1140</span> * img[:,:,<span class="number">0</span>] <span class="comment"># 分别取出img数组中的RGB二维数组计算</span></span><br><span class="line">plt.figure(figsize = (<span class="number">16</span>, <span class="number">16</span>))</span><br><span class="line">image2 = plt.subplot(<span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">image2.set_title(<span class="string">&#x27;Gray Image1&#x27;</span>)</span><br><span class="line">plt.imshow(img1, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2，使用openCV自带函数进行转换</span></span><br><span class="line">image3 = plt.subplot(<span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">image3.set_title(<span class="string">&#x27;Gray Image2&#x27;</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(img.astype(np.uint8), cv2.COLOR_BGR2GRAY), cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法3，根据Gray公式自定义函数将RGB转为灰度图（类似方法一）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rgb2gray</span>(<span class="params">rgb</span>):</span><br><span class="line">    <span class="keyword">return</span> np.dot(rgb[:, :,:<span class="number">3</span>], [<span class="number">0.299</span>, <span class="number">0.587</span>, <span class="number">0.114</span>]) <span class="comment"># 进行向量点乘</span></span><br><span class="line">gray = rgb2gray(img)</span><br><span class="line">image4 = plt.subplot(<span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">image4.set_title(<span class="string">&#x27;Gray Image3&#x27;</span>)</span><br><span class="line">plt.imshow(gray, cmap=<span class="string">&#x27;Greys_r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 颜色空间转换, RGB to HSV</span></span><br><span class="line">img2 = cv2.cvtColor(img, cv2.COLOR_BGR2HSV) <span class="comment"># HSV常用于分割指定颜色的物体</span></span><br><span class="line">image5 = plt.subplot(<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">image5.set_title(<span class="string">&#x27;RGB to HSV&#x27;</span>)</span><br><span class="line">plt.imshow(img2)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303182306684.jpg" alt="img-202303182306684" style="zoom: 50%;" /><hr><h4 id="4-自定义图像绘制"><a href="#4-自定义图像绘制" class="headerlink" title="4. 自定义图像绘制"></a>4. 自定义图像绘制</h4><p>内容：定义一个像素为512*512的图像平面，黑色背景，在该图像上面生成一个正方形和圆，要求正方形的四个点为A（256，64）、B（256，256）、C（448，256）、D（448，64）；要求圆的半径r=100，圆心为（256，256）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.自定义图像绘制。定义一个像素为512*512的图像平面，黑色背景，在该图像上面生成一个正方形和圆，</span></span><br><span class="line"><span class="comment">#   要求正方形的四个点为A（256，64）、B（256，256）、C（448，256）、D（448，64）；</span></span><br><span class="line"><span class="comment">#   要求圆的半径r=100，圆心为（256，256）。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个像素为512*512的图像平面，黑色背景</span></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义正方形的四个点</span></span><br><span class="line">A = (<span class="number">256</span>, <span class="number">64</span>)</span><br><span class="line">B = (<span class="number">256</span>, <span class="number">256</span>)</span><br><span class="line">C = (<span class="number">448</span>, <span class="number">256</span>)</span><br><span class="line">D = (<span class="number">448</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制正方形</span></span><br><span class="line">cv2.line(img, A, B, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)  <span class="comment"># AB</span></span><br><span class="line">cv2.line(img, B, C, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)  <span class="comment"># BC</span></span><br><span class="line">cv2.line(img, C, D, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)  <span class="comment"># CD</span></span><br><span class="line">cv2.line(img, D, A, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)  <span class="comment"># DA</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义圆心和半径</span></span><br><span class="line">center = (<span class="number">256</span>, <span class="number">256</span>)</span><br><span class="line">r = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制圆</span></span><br><span class="line">cv2.circle(img, center, r, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图像</span></span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.title(<span class="string">&#x27;Custom Drawing&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303182309347.png" alt="img-202303182309347"  /><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://www.bilibili.com/video/BV1EG4y1B7Wz/?share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">OpenCV计算机视觉教程</a></p><p><a href="https://www.cnblogs.com/wojianxin/p/12611909.html">OpenCV绘制图像直方图，实现直方图均衡化，自适应均衡化</a></p><p><a href="https://blog.csdn.net/yukinoai/article/details/87900860">图像直方图的计算、绘制与分析</a></p><p><a href="https://www.cnblogs.com/zizz/p/15964240.html">plt.imshow的cmap参数代表</a></p><p><a href="https://blog.csdn.net/weixin_44015965/article/details/109547129">cv2.imread()函数</a></p><p><a href="https://blog.csdn.net/stefanjoe/article/details/112095856">matplotlib之figure()详解</a></p><p><a href="https://blog.csdn.net/baoziqyp/article/details/111239877">plt.figure()参数使用详解及运行演示</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉（CV） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Anaconda3中安装OpenCV库报错问题解决（使用命令行安装 Pip Install Opencv-Python -I）</title>
      <link href="/posts/c0cf.html"/>
      <url>/posts/c0cf.html</url>
      
        <content type="html"><![CDATA[<h2 id="在Anaconda3中安装OpenCV库问题解决（使用命令行安装-pip-install-opencv-python-i-）"><a href="#在Anaconda3中安装OpenCV库问题解决（使用命令行安装-pip-install-opencv-python-i-）" class="headerlink" title="在Anaconda3中安装OpenCV库问题解决（使用命令行安装 pip install opencv-python -i ）"></a>在Anaconda3中安装OpenCV库问题解决（使用命令行安装 pip install opencv-python -i ）</h2><hr><h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><p>我最近因做计算机视觉课程的上机实验，需要对图像做一些处理，具体实验要求中会用到<code>cv2</code>库，需要我们提前安装，配置好自己的电脑环境。<br>我就按着常规的方式从Anaconda3软件中的环境配置选项里下载对应的库文件。虽说opencv库已经安装好了，但在Jupyter Notebook中执行python程序时，导入 <code>cv2</code> 库时会发生报错现象，这说明我的opencv库并没有正确安装成功。网上冲浪一番，才知道opencv库安装这个问题确实很让人苦恼，我尝试了一些教程但还是以失败告终。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160053507.jpg" alt="img-202303160053507"></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160045386.jpg" alt="img-202303160045386" style="zoom: 150%;" /><p>也上了B站，翻看一些课程教学<a href="https://www.bilibili.com/video/BV1EG4y1B7Wz/?p=2&share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">OpenCV计算机视觉实战</a>的安装步骤，还是不太行。。。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160053800.jpg" alt="img-202303160053800"></p><h3 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h3><p>接着又听了同学建议，让我试试这篇文章的教程，<a href="http://t.csdn.cn/slbBq">Anaconda安装OpenCV</a>，但还是出了一堆问题。</p><p>大致步骤如下，你可能会用上哈。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 打开Anaconda Prompt命令行工具</span><br><span class="line">2. 输入 d: 回车</span><br><span class="line">3. 接着进入到你的Anaconda安装目录下的Scripts文件夹   </span><br><span class="line">   cd D:\Anaconda3\Scripts</span><br><span class="line">4. 输入 pip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">   (这里用清华镜像来下载opencv库，国内网站访问的速度会亿点~)</span><br></pre></td></tr></table></figure><hr><p>这里爆红的错误大致跟上面用命令行安装的出现的问题一致。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160054158.jpg" alt="img-202303160054158"></p><p>然后我就找是否有与我遇到同类型问题的解决方案，<a href="http://t.csdn.cn/xr18Y">pip安装OpenCV报错</a>，哈哈果不其然让我找到了。</p><p>我在试了试评论区这位老哥说的方法，遇到佬了，亲测有效哈。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160055515.jpg" alt="img-202303160055515" style="zoom: 80%;" /><p>这里在Windows 上更新了pip软件包安装程序：<code>python -m pip install -U pip</code></p><p>接着我试了前面步骤里的镜像安装库的方式，就可以成功安装了。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160055717.jpg" alt="img-202303160055717"></p><h3 id="三、测试OpenCV库"><a href="#三、测试OpenCV库" class="headerlink" title="三、测试OpenCV库"></a>三、测试OpenCV库</h3><p>使用 <code>pip list</code> 命令可查看当前Python中已安装的库及版本号，这时候发现opencv库已经安装好了。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160055609.jpg" alt="img-202303160055609"  /><p>最后到Jupyter Notebook中测试发现，已经可以正常导入<code>cv2</code>库了。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160055448.jpg" alt="img-202303160055448" style="zoom: 67%;" /><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://www.bilibili.com/video/BV1EG4y1B7Wz/?p=2&share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">OpenCV计算机视觉实战</a></p><p><a href="http://t.csdn.cn/PfPbY">谈谈全自动安装常使用的pip install的原理及作用</a></p><p><a href="http://t.csdn.cn/slbBq">Anaconda安装OpenCV</a></p><p><a href="http://t.csdn.cn/xr18Y">pip安装OpenCV报错</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉（CV） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析与可视化 实践基础练习二（NumPy）</title>
      <link href="/posts/91d1.html"/>
      <url>/posts/91d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习二（NumPy）"><a href="#数据分析与可视化-实践基础练习二（NumPy）" class="headerlink" title="数据分析与可视化    实践基础练习二（NumPy）"></a>数据分析与可视化    实践基础练习二（NumPy）</h2><hr><h3 id="一、Numpy相关函数或属性"><a href="#一、Numpy相关函数或属性" class="headerlink" title="一、Numpy相关函数或属性"></a>一、Numpy相关函数或属性</h3><ul><li><strong>数组的索引和切片</strong></li><li><strong>数组的运算</strong></li></ul><p><strong>1.Numpy的一元函数</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303091942166.png" alt="img-202303091942166" style="zoom: 67%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303091944208.png" alt="img-202303091944208.png" style="zoom:85%;" /><p><strong>2.Numpy的二元函数</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303091944093.png" alt="img-202303091944093" style="zoom: 82%;" /><ul><li><strong>数组的读/写</strong></li></ul><p><strong>1.np.savetxt() 和np.loadtxt()</strong><br>np.savetxt() np.loadtxt()只能有效存取一维和二维数组</p><p><strong>(1).  np.savetxt()</strong> </p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121252720.jpg" alt="img-202303121252720" style="zoom: 33%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121253508.jpg" alt="img-202303121253508" style="zoom:33%;" /><p><strong>(2).  np.loadtxt()</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121255236.jpg" alt="img-202303121255236" style="zoom:33%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121255615.png" alt="img-202303121255615" style="zoom: 67%;" /><p><strong>2.tofile() 和 np.fromfile()</strong><br>任意维度的存取, 该方法需要读取时知道存入文件时数组的维度和元素类型</p><p><strong>(1). tofile()</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121302821.jpg" alt="Snipaste_2023-03-12_12-59-29" style="zoom: 33%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121302563.jpg" alt="Snipaste_2023-03-12_13-01-22" style="zoom:33%;" /><p><strong>(2). np.fromfile()</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121302943.jpg" alt="Snipaste_2023-03-12_12-59-40" style="zoom:33%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121318728.jpg" alt="img-202303121318728" style="zoom: 50%;" /><p><strong>3.np.save()、np.savez() 和np.load()</strong><br>numpy的便捷文件存取</p><p><strong>(1). np.save() 和 np.load()</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121310258.jpg" alt="Snipaste_2023-03-12_13-07-42" style="zoom:33%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121311552.jpg" alt="Snipaste_2023-03-12_13-07-57" style="zoom: 40%;" /> <p><strong>(2). np.savez()</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.savez(file, *args, **kwds)</span><br></pre></td></tr></table></figure><p>  以未压缩的<code>.npz</code> 格式将多个数组保存到一个文件中。</p><p>  提供数组作为关键字参数，以将它们存储在输出文件中的相应名称下：<code>savez(fn, x=x, y=y)</code>。</p><hr><h3 id="二、练习题"><a href="#二、练习题" class="headerlink" title="二、练习题"></a>二、练习题</h3><ol><li><p>从数组np.arange(15)中提取5到10之间的所有数字 .</p></li><li><p>交换数组np.arange(9).reshape(3,3)中的第1列和第2列.</p></li><li><p>交换数组np.arange(9).reshape(3,3)中的第1行和第2行.</p></li><li><p>获取数组a = np.array([1,2,3,2,3,4,3,4,5,6])和数组b = np.array([7,2,10,2,7,4,9,4,9,8])之间的共同元素.</p></li><li><p>查找数组np.array([1,2,3,2,3,4,3,4,5,6])中的唯一值的数量.</p></li><li><p>查找二维数组np.arange(9).reshape(3,3)每一行中的最大值.</p></li><li><p>计算数组a = np.array([1,2,3,2,3,4,3,4,5,6])和数组b = np.array([7,2,10,2,7,4,9,4,9,8])之间的欧式距离.</p></li><li><p>查找数组np.array([7,2,10,2,7,4,9,4,9,8])中的第二大值.</p></li></ol><hr><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.从数组np.arange(15)中提取5到10之间的所有数字 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">15</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>,a[<span class="number">5</span>:<span class="number">11</span>])</span><br></pre></td></tr></table></figure><pre><code>a: [ 5  6  7  8  9 10]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.交换数组np.arange(9).reshape(3,3)中的第1列和第2列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">a[ : , [<span class="number">0</span>,<span class="number">1</span>]] = a[ : , [<span class="number">1</span>,<span class="number">0</span>]] <span class="comment"># [ : , [0,1]]表示得到第一列和第二列的所有元素值，交换列数下标即可</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[[1 0 2] [4 3 5] [7 6 8]]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.交换数组np.arange(9).reshape(3,3)中的第1行和第2行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">a[[<span class="number">0</span>,<span class="number">1</span>], : ] = a[[<span class="number">1</span>,<span class="number">0</span>], : ] <span class="comment"># [[0,1], : ]表示得到第一行和第二行的所有元素值，交换行数下标即可</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[[3 4 5] [0 1 2] [6 7 8]]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.获取数组a = np.array([1,2,3,2,3,4,3,4,5,6])和数组b = np.array([7,2,10,2,7,4,9,4,9,8])之间的共同元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">b = np.array([<span class="number">7</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>]) </span><br><span class="line">c = np.intersect1d(a,b) <span class="comment"># np.intersect1d()会返回两个数组中的共同元素，并且排序后输出</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><pre><code>[2 4]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5.查找数组np.array([1,2,3,2,3,4,3,4,5,6])中的唯一值的数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">unique_words, counts = np.unique(a, return_counts=<span class="literal">True</span>) <span class="comment"># 使用np.unique()会返回数组中的唯一值（去重）</span></span><br><span class="line">                                                         <span class="comment"># 加上return_counts参数会返回去重后的数组及相应的出现的频次（数量用counts来接收）</span></span><br><span class="line"><span class="built_in">print</span>(unique_words)</span><br><span class="line"><span class="built_in">print</span>(counts)</span><br></pre></td></tr></table></figure><pre><code>[1 2 3 4 5 6][1 2 3 2 1 1]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6.查找二维数组np.arange(9).reshape(3,3)每一行中的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a[ : , <span class="number">2</span> : ]) <span class="comment"># 数组已经有序，直接进行切片</span></span><br><span class="line"><span class="built_in">max</span> = np.<span class="built_in">max</span>(a, axis = <span class="number">1</span>) <span class="comment"># 或者利用np.max()方法，axsi = 1表示会对每一行做操作，沿着数组的第二维度（列）来取最大值</span></span><br><span class="line">                          <span class="comment">#（同理axis=0，就会取到每一列的最大值）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>) </span><br></pre></td></tr></table></figure><pre><code>[[2] [5] [8]][2 5 8]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7.计算数组a = np.array([1,2,3,2,3,4,3,4,5,6])和数组b = np.array([7,2,10,2,7,4,9,4,9,8])之间的欧式距离</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">b = np.array([<span class="number">7</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">dist1 = np.sqrt(np.<span class="built_in">sum</span>(np.square(a - b))) <span class="comment"># 欧式距离计算方式一,参数是numpy向量</span></span><br><span class="line">dist2 = np.linalg.norm(a - b) <span class="comment"># 方式二</span></span><br><span class="line"><span class="built_in">print</span>(dist1)</span><br><span class="line"><span class="built_in">print</span>(dist2)</span><br></pre></td></tr></table></figure><pre><code>12.52996408614166812.529964086141668</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8.查找数组np.array([7,2,10,2,7,4,9,4,9,8])中的第二大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">7</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>])</span><br><span class="line">b = np.sort(a) <span class="comment"># 对原数组进行升序排序，输出倒数第二个值即可</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(b[-<span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>[ 2  2  4  4  7  7  8  9  9 10]9</code></pre><hr><h3 id="四、参考文章"><a href="#四、参考文章" class="headerlink" title="四、参考文章"></a>四、参考文章</h3><p><a href="https://vimsky.com/examples/usage/python-numpy.savez.html">np.savez用法及代码示例</a></p><p><a href="https://blog.csdn.net/qq_41542989/article/details/109822290?ops_request_misc=&request_id=&biz_id=102&utm_term=python+numpy%E4%BA%A4%E6%8D%A2%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%A4%E8%A1%8C%E6%88%96%E8%80%85%E4%B8%A4%E5%88%97&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-109822290.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">Python+NumPy交换数组的两行或者两列</a></p><p><a href="https://blog.csdn.net/Ma15082777155/article/details/127755059?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84a%E5%92%8Cb%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B1%E5%85%83%E7%B4%A0%20python%20np.inte&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-127755059.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">如何获取数组a和b之间的共元素</a></p><p><a href="https://blog.csdn.net/xo3ylAF9kGs/article/details/117677283?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168282937816800213052127%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168282937816800213052127&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-117677283-null-null.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&utm_term=NumPy%20%E8%8E%B7%E5%8F%96%E5%94%AF%E4%B8%80%E5%85%83%E7%B4%A0%E3%80%81%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E3%80%81%E5%B1%95%E5%B9%B3%E6%95%B0%E7%BB%84&spm=1018.2226.3001.4187">NumPy 获取唯一元素、出现次数、展平数组</a></p><p><a href="https://blog.csdn.net/weixin_39561577/article/details/111788590?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168282966516800225550628%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=168282966516800225550628&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-111788590-null-null.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&utm_term=%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E6%AF%8F%E4%B8%80%E5%88%97%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC%20python%20max&spm=1018.2226.3001.4449">如何找到二维数组每一列中的最大值</a></p><p><a href="https://blog.csdn.net/baidu_41797613/article/details/121473828?ops_request_misc=&request_id=&biz_id=102&utm_term=numpy%E4%B8%AD%E8%AE%A1%E7%AE%97%E6%95%B0%E7%BB%84%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AC%A7%E5%BC%8F%E8%B7%9D%E7%A6%BB&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-121473828.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">numpy中计算数组之间的欧式距离</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析与可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> NumPy </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析与可视化 实践基础练习一（NumPy）</title>
      <link href="/posts/c3c6.html"/>
      <url>/posts/c3c6.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习一（NumPy）"><a href="#数据分析与可视化-实践基础练习一（NumPy）" class="headerlink" title="数据分析与可视化 实践基础练习一（NumPy）"></a>数据分析与可视化 实践基础练习一（NumPy）</h2><hr><h3 id="一、Numpy相关函数或属性"><a href="#一、Numpy相关函数或属性" class="headerlink" title="一、Numpy相关函数或属性"></a>一、Numpy相关函数或属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> np.array() <span class="comment"># 可用于创建n维数组      </span></span><br><span class="line"><span class="number">2.</span> np.arange(n) <span class="comment"># 创建递增数组，也可指定起始和终止元素的范围（默认0到n-1）     </span></span><br><span class="line"><span class="number">3.</span> np.ones(shape) <span class="comment"># 创建全1数组，可自定义数组的尺寸（形状）</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> np.zeros(shape) <span class="comment"># 创建全0数组，可自定义尺寸     </span></span><br><span class="line"><span class="number">5.</span> np.full(shape，val) <span class="comment"># 创建多维尺寸数组，val值可指定元素值   </span></span><br><span class="line"><span class="number">6.</span> np.eye(n) <span class="comment"># 创建一个n阶的单位方阵，对角线上全为1，其余为0 </span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> np.diag(n) <span class="comment"># 以一维数组的返回方阵的对角线上元素</span></span><br><span class="line">  <span class="comment"># 对于一维数组会返回方阵（对角线上为一维元素值，其余元素为0）</span></span><br><span class="line">    </span><br><span class="line"><span class="number">8.</span> np.linspace() <span class="comment"># 创建等差一维数组</span></span><br><span class="line">  <span class="comment"># 返回介于某个区间等间距分布的数，最后1个参数表示输出元素的总个数</span></span><br><span class="line">    </span><br><span class="line"><span class="number">9.</span> np.logspace() <span class="comment"># 创建等比一维数组 </span></span><br><span class="line"></span><br><span class="line"><span class="number">10.</span> np.random.randint() <span class="comment"># 创建含起始和终止点的的整型数组，其参数size可自定义尺寸   </span></span><br><span class="line"><span class="number">11.</span> .reshape(shape) <span class="comment"># 重塑数组的尺寸（多维）原数组不变，利用数组元素个数size唯一    </span></span><br><span class="line"><span class="number">12.</span> .resize(shape) <span class="comment"># 重塑数组的尺寸，会修改原数组</span></span><br><span class="line"></span><br><span class="line"><span class="number">13.</span> .swapaxes(ax1,ax2) <span class="comment">#将数组n个维度中的2个维度进行调换   </span></span><br><span class="line"><span class="number">14.</span> .flatten() <span class="comment"># 对数组进行降维，返回折叠后的一维数组，原数组不变       </span></span><br><span class="line"><span class="number">15.</span> .astype() <span class="comment"># 强制数据类型转换，会创建新的数组（是原始数据的一个拷贝）</span></span><br><span class="line"></span><br><span class="line"><span class="number">16.</span> .tolist() <span class="comment"># 数组转列表       </span></span><br><span class="line"><span class="number">17.</span> np.hstack() <span class="comment"># 横向合并      </span></span><br><span class="line"><span class="number">18.</span> np.vstack() <span class="comment"># 纵向合并</span></span><br><span class="line"></span><br><span class="line"><span class="number">19.</span> np.concatenate() <span class="comment"># 参数axis = 0时按行合并 </span></span><br><span class="line">  <span class="comment"># 参数axis = 1时按列合并（等价于横向合并np.hstack()）</span></span><br><span class="line">    </span><br><span class="line"><span class="number">20.</span> np.hsplit() <span class="comment"># 按列分隔，eg. np.hsplit(arr, 2) # 数组总是沿着第二个轴/维度分割（按列），等价于axis = 1     </span></span><br><span class="line"><span class="number">21.</span> np.vsplit() <span class="comment"># 按行分隔</span></span><br><span class="line"></span><br><span class="line"><span class="number">22.</span> np.split() <span class="comment"># 对数组进指定方向的分隔        </span></span><br><span class="line"><span class="number">23.</span> .tanspose() <span class="comment"># 对数组进行转置，参数是轴编号组成的元组（行 —&gt; 列）  </span></span><br><span class="line"><span class="number">24.</span> .T <span class="comment"># 还可利用数组的T属性来转置</span></span><br></pre></td></tr></table></figure><hr><h3 id="二、练习题目"><a href="#二、练习题目" class="headerlink" title="二、练习题目"></a>二、练习题目</h3><p><strong>基础题：</strong></p><p>1、创建一个元素为从10到49的ndarray对象D1；</p><p>2、将D1的所有元素位置反转；</p><p>3、使用np.random.random创建一个10 x 10的ndarray对象，并打印出最大最小元素；</p><p>4、创建一个10 x 10的ndarray对象，且矩阵边界全为1，里面全为0；</p><p>5、创建一个范围在(0,1)之间的长度为12的等差数列；</p><p>6、创建一个长度为10的随机数组并排序；</p><p>7、给定一个4维矩阵，如何得到最后两维的和？</p><p>8、如何将数组a = np.arange(10).reshape(2,-1)和数组b = np.repeat(1, 10).<br>reshape(2,-1)水平堆叠？</p><p><strong>补充题：</strong></p><p>9、有arr = np.arange(12).reshape(3,4)，若定义mask = np.array([1,0,1],dtype = np.bool)，则arr[mask,1] 对应的元素是？</p><p>10、有arr = np.arange(12).reshape(3,4)，则arr[(0,1),(1,3)]对应的值是？</p><p>11、将数组arr中所有的奇数置为-1对应的语句是？</p><p>12、a = np.arange(8).reshape(2,4)，np.hsplit(a,2)返回值是？</p><p>13、找出数组np.array([1,2,1,1,3,4, 3,1,1,2,1,1,2])中第五个1出现的位置的代码；</p><hr><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><h4 id="（1）基础题（1-8）"><a href="#（1）基础题（1-8）" class="headerlink" title="（1）基础题（1 - 8）"></a>（1）基础题（1 - 8）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、创建一个元素为从10到49的ndarray对象D1；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">D1 = np.arange(<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;D1:&#x27;</span>, D1)</span><br></pre></td></tr></table></figure><pre><code>D1: [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2、将D1的所有元素位置反转；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">D1 = np.arange(<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line">a = D1[: : -<span class="number">1</span>] <span class="comment"># 逆序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>, a)</span><br></pre></td></tr></table></figure><pre><code>a: [49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3、使用np.random.random创建一个10*10的ndarray对象，并打印出最大最小元素；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.random( (<span class="number">10</span>, <span class="number">10</span>) )</span><br><span class="line"><span class="comment"># print(&#x27;a:&#x27;, a)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;MaxValue:&#x27;</span>, a.<span class="built_in">max</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;MinValue:&#x27;</span>, a.<span class="built_in">min</span>())</span><br></pre></td></tr></table></figure><pre><code>MaxValue: 0.9627995218664797MinValue: 0.005820752655498862</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4、创建一个10*10的ndarray对象，且矩阵边界全为1，里面全为0；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.zeros( (<span class="number">10</span>,<span class="number">10</span>) )</span><br><span class="line">a[<span class="number">0</span>, : ] = a[<span class="number">9</span>, : ] = a[ : , <span class="number">0</span>] = a[ : , <span class="number">9</span>] = <span class="number">1</span> <span class="comment"># 获取第1行、第9行、第1列、第9列的数组值将其改为1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5、创建一个范围在(0,1)之间的长度为12的等差数列；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12</span>) <span class="comment"># 第3个参数为元素个数，从0到1生成了12个等间隔的数</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[0.         0.09090909 0.18181818 0.27272727 0.36363636 0.45454545 0.54545455 0.63636364 0.72727273 0.81818182 0.90909091 1.        ]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6、创建一个长度为10的随机数组并排序；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.random(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(np.sort(a)) <span class="comment"># 升序输出</span></span><br></pre></td></tr></table></figure><pre><code>a: [0.46602273 0.68013528 0.39960639 0.59603541 0.30224607 0.43446988 0.84969599 0.80521228 0.6243939  0.43140521][0.30224607 0.39960639 0.43140521 0.43446988 0.46602273 0.59603541 0.6243939  0.68013528 0.80521228 0.84969599]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7、给定一个4维矩阵，如何得到最后两维的和？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.ones( (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) ) <span class="comment"># 定义1个三维的含2个（3行4列）的全一数组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Sum:&#x27;</span>, a.<span class="built_in">sum</span>(axis = (<span class="number">2</span>, <span class="number">3</span>)) ) <span class="comment"># axis=(2, 3)) 表示对第3个和第4个维度求和</span></span><br></pre></td></tr></table></figure><pre><code>a: [[[[1. 1. 1. 1.]   [1. 1. 1. 1.]   [1. 1. 1. 1.]]  [[1. 1. 1. 1.]   [1. 1. 1. 1.]   [1. 1. 1. 1.]]]]Sum: [[12. 12.]]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8、如何将数组a = np.arange(10).reshape(2,-1)和数组b = np.repeat(1, 10).reshape(2,-1)水平堆叠？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>, a)</span><br><span class="line">b = np.repeat(<span class="number">1</span>, <span class="number">10</span>).reshape(<span class="number">2</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b:&#x27;</span>, b)</span><br><span class="line"></span><br><span class="line">c= np.hstack( (a, b) ) <span class="comment"># np.hstack是横向合并 或用 np.concatenate((a, b), axis = 1) 按列合并</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c:&#x27;</span>, c)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a: [[0 1 2 3 4]</span><br><span class="line">[5 6 7 8 9]]</span><br><span class="line">b: [[1 1 1 1 1]</span><br><span class="line">[1 1 1 1 1]]</span><br><span class="line">c: [[0 1 2 3 4 1 1 1 1 1]</span><br><span class="line">[5 6 7 8 9 1 1 1 1 1]]</span><br></pre></td></tr></table></figure><h4 id="（2）补充题型（9-13）"><a href="#（2）补充题型（9-13）" class="headerlink" title="（2）补充题型（9 - 13）"></a>（2）补充题型（9 - 13）</h4><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 9、有arr = np.arange(12).reshape(3,4)，若定义mask = np.array([1,0,1],dtype = np.bool)，则arr[mask,1] 对应的元素是</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">mask = np.array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],dtype = np.<span class="built_in">bool</span>) <span class="comment"># mask是布尔数组表示的值为Ture,False,True</span></span><br><span class="line"><span class="built_in">print</span>(a[mask,<span class="number">1</span>]) <span class="comment"># 取出第1行和第3行的第2列元素</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1 9]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10、有arr = np.arange(12).reshape(3,4)，则arr[(0,1),(1,3)]对应的值是</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a[(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">3</span>)]) <span class="comment"># 会得到4个值，对应到a[0,1] = 1, a[1,3] = 7, a[(0, 1),(1, 3)]的值是[1, 7]</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">2</span>,(<span class="number">0</span>, <span class="number">3</span>)]) <span class="comment"># 输出第二行，与第一列和四列相交处元素的值</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1 7]</span><br><span class="line">[[4 7]]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 11、将数组a中所有的奇数置为-1对应的语句是</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.randint(<span class="number">1</span>,<span class="number">12</span>, (<span class="number">3</span>,<span class="number">4</span>) )</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a[a % <span class="number">2</span> != <span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[ 8 10  9  2]</span><br><span class="line">[ 5  6  4  8]</span><br><span class="line">[10  6  7  7]]</span><br><span class="line">[[ 8 10 -1  2]</span><br><span class="line">[-1  6  4  8]</span><br><span class="line">[10  6 -1 -1]]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 12、a = np.arange(8).reshape(2,4)，np.hsplit(a,2)返回值是</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(np.hsplit(a, <span class="number">2</span>)) <span class="comment"># 对数组按列进行分割，将一个数组等分。数组总是沿着第二个轴分割（按列）</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[0 1 2 3]</span><br><span class="line">[4 5 6 7]]</span><br><span class="line">[array([[0, 1],</span><br><span class="line">[4, 5]]), </span><br><span class="line">array([[2, 3],</span><br><span class="line">[6, 7]])]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 13、找出数组np.array([1,2,1,1,3,4,3,1,1,2,1,1,2])中第五个1出现的位置的代码。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">index = np.where(a == <span class="number">1</span>)[<span class="number">0</span>][<span class="number">4</span>] <span class="comment"># np.where函数返回的是一个元组，包含所有符合条件的元素的行索引和列索引</span></span><br><span class="line"><span class="built_in">print</span>(index)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><hr><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p>视频：</p><p><a href="https://www.bilibili.com/video/BV1Wy4y1h7ii/?share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">【一个10分钟的numpy入门教程】</a></p><p><a href="https://www.bilibili.com/video/BV1xK411X7ZQ/?share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">【Python Numpy入门精华】</a></p><p>文章：</p><p><a href="https://numpy.org/doc/">NumPy官方文档</a></p><p><a href="https://blog.csdn.net/weixin_46020624/article/details/104543453?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168282769516800184185266%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168282769516800184185266&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-104543453-null-null.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&utm_term=Numpy%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE%E7%AE%80%E7%AD%94&spm=1018.2226.3001.4187">Numpy经典题目简答</a></p><p><a href="https://blog.csdn.net/qq_18351157/article/details/107049622?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168282777716800213077049%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=168282777716800213077049&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-107049622-null-null.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&utm_term=Numpy%E4%BD%BF%E7%94%A8sort%E5%92%8Cargsort%E5%87%BD%E6%95%B0%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F&spm=1018.2226.3001.4187">Numpy使用sort和argsort函数进行排序</a></p><p><a href="https://blog.csdn.net/u011475210/article/details/77770751?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168282787316800225576993%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168282787316800225576993&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-77770751-null-null.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&utm_term=Python3%EF%BC%9Anumpy%E6%A8%A1%E5%9D%97%E4%B8%AD%E7%9A%84argsort()%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">Python3：numpy模块中的argsort()函数</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析与可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> NumPy </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础  第二讲 Tmux 和 Vim</title>
      <link href="/posts/62ad.html"/>
      <url>/posts/62ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="第二讲-tmux-和-vim"><a href="#第二讲-tmux-和-vim" class="headerlink" title="第二讲 tmux 和 vim"></a>第二讲 tmux 和 vim</h1><h3 id="1-tmux教程"><a href="#1-tmux教程" class="headerlink" title="1. tmux教程"></a>1. tmux教程</h3><ul><li><p>功能：</p><p> <strong>(1) 分屏。</strong></p><p> <strong>(2) 允许断开Terminal连接后，继续运行进程。</strong></p><p>结构：</p><pre><code>    一个tmux可以包含多个session（会话），</code></pre><p>​        一个session可以包含多个window（窗口），</p><p>​        一个window可以包含多个pane（小窗口，进行shell交互）。</p></li><li><p>实例：</p><pre><code>   tmux:       session 0:           window 0:               pane 0               pane 1               pane 2               ...           window 1           window 2           ...       session 1       session 2       ...</code></pre></li><li><p>操作：</p><pre><code> (1) `tmux`：新建一个session，其中包含一个window，window中包含一个pane，pane里打开了一个shell对话框。</code></pre><p> ​    (2) 按下<code>Ctrl + A</code> 后手指松开，然后按<code>%</code>：将当前pane<strong>左右平分</strong>成两个pane。</p><p> ​    (3) 按下<code>Ctrl + A </code>后手指松开，然后按<code>&quot;</code>（双引号）：将当前pane<strong>上下平分</strong>成两个pane。</p><p> ​    (4) <code>Ctrl + D</code>：关闭当前pane；如果当前window的所有pane均已关闭，则自动关闭window；如果当前session的所有window均已关闭，则自动关闭session。</p><p> ​    (5) 鼠标点击可以选pane。</p><p> ​    (6) 按下<code>Ctrl + A</code> 后手指松开，然后按方向键：选择相邻的pane。</p><p> ​    (7) 鼠标拖动pane之间的分割线，可以调整分割线的位置。</p><p> ​    (8) 按住<code>Ctrl + A </code>的同时按方向键，可以调整pane之间分割线的位置。</p><p> ​    (9) 按下<code>Ctrl + A</code> 后手指松开，然后按<code>z</code>：将当前pane<strong>全屏/取消全屏</strong>。<br> ​    (10) 按下<code>Ctrl + A </code> 后手指松开，然后按<code>d</code>：<strong>挂起当前session</strong>。</p><p>  ​    (11)<code>tmux a</code>：打开之前挂起的session。</p><p>  ​    (12) 按下<code>Ctrl + A</code> 后手指松开，然后按<code>s</code>：选择其它session。<br> ​        方向键 —— 上：选择上一项 session/window/pane<br> ​        方向键 —— 下：选择下一项 session/window/pane</p><pre><code>     方向键 —— 右：展开当前项 session/window     方向键 —— 左：闭合当前项 session/window</code></pre><p>  ​    (13) 按下<code>Ctrl + A</code> 后手指松开，然后按<code>c</code>：在当前session中<strong>创建一个新的window</strong>。</p><p>  ​    (14) 按下<code>Ctrl + A</code> 后手指松开，然后按<code>w</code>：<strong>选择其他window</strong>，操作方法与(12)完全相同。</p><p>  ​    (15) 按下<code>Ctrl + A</code> 后手指松开，然后按<code>PageUp</code>：翻阅当前pane内的内容。</p><p>  ​    (16) 鼠标滚轮：翻阅当前pane内的内容。</p><p>  ​    (17) 在tmux中选中文本时，需要按住shift键。（仅支持Windows和Linux，不支持Mac，不过该操作并不是必须的，因此影响不大）</p><p>  ​    (18) tmux中复制/粘贴文本的通用方式：<br> ​         1) 按下<code>Ctrl + A</code>后松开手指，然后按[。<br> ​         2) 用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板。<br> ​         3) 按下<code>Ctrl + A</code>后松开手指，然后按]，会将剪贴板中的内容粘贴到光标处。</p></li></ul><h3 id="2-vim教程"><a href="#2-vim教程" class="headerlink" title="2. vim教程"></a>2. vim教程</h3><ul><li>功能：<br>  (1) 命令行模式下的文本编辑器。（相当于加强版的记事本）  (2) 根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。  (3) 使用方式：<code>vim filename</code><pre><code>  如果已有该文件，则打开它。  如果没有该文件（会新建文件），则打开个一个新的文件，并命名为`filename`。</code></pre></li></ul><ul><li><p>模式：<br>(1) <strong>一般命令模式</strong></p><pre><code>默认模式。命令输入方式：类似于打游戏放技能，按不同字符，即可进行不同操作。</code></pre><p>​    可以复制、粘贴、删除文本等。</p><p>(2) <strong>编辑模式</strong></p><pre><code>在一般命令模式里按下`i`，会进入编辑模式。按下ESC会退出编辑模式，返回到一般命令模式。</code></pre><p>(3) <strong>命令行模式</strong></p><pre><code>在一般命令模式里按下`:/?`三个字母中的任意一个，会进入命令行模式。命令行在最下面。可以查找、替换、保存、退出、配置编辑器环境等。</code></pre></li><li><p>操作：<br>(1)<code> i</code>：进入编辑模式</p><p>(2) <code>ESC键</code>：进入<strong>一般命令模式</strong></p><p>(3) <code>h 或 左箭头键</code>：光标向左移动一个字符</p><p>(4) <code>j 或 向下箭头</code>：光标向下移动一个字符</p><p>(5) <code>k 或 向上箭头</code>：光标向上移动一个字符</p><p>(6) <code>l 或 向右箭头</code>：光标向右移动一个字符</p><p>在一般命令模式下，</p><p>(7) <code>n + 空格</code>：光标往后跳，n表示数字，按下数字后再按空格，光标会向右移动这一行的n个字符。</p><p>(8) <code>0 或 功能键[Home]</code>：光标移动到本行开头。</p><p>(9) <code>$ 或 功能键[End]</code>：光标移动到本行末尾。</p><p>(10) <code>G 或 Shift + g </code> 光标移动到最后一行。</p><p>(11) <code>:n</code> 或 nG：n为数字，光标移动到第n行。</p><p>(12) <code>gg</code>：光标移动到第一行，相当于1G。</p><p>(13) <code>n + 回车</code>：所在行向下跳，n为数字，光标向下移动n行。</p><p>(14) <code>/word</code>：<strong>向下找</strong>，向光标之下寻找第一个值为word的字符串。</p><p>(15) <code>?word</code>：<strong>向上找</strong>，向光标之上寻找第一个值为word的字符串。</p><p>(16) <code>n</code>：重复前一个查找操作。</p><p>(17) <code>N</code>：反向重复前一个查找操作。</p><p>(18) <code>:n1,n2s/word1/word2/g</code>：n1与n2为数字（行号），在第n1行与n2行之间寻找word1这个字符。串，并将该字符串替换为word2。</p><p>(19) <code>:1,$s/word1/word2/g</code>：将全文的word1替换为word2。</p><p>(20) <code>:1,$s/word1/word2/gc</code>：将全文的word1替换为word2，且在替换前要求用户确认。</p><p>(21) <code>v</code>：选中文本。</p><p>(22) <code>d</code>：删除选中的文本 (实际上是剪切)。</p><p>(23) <code>dd</code>: 删除当前行（剪切）。</p><p>(24) <code>y</code>：复制选中的文本。</p><p>(25) <code>yy</code>: 复制当前行。</p><p>(26) <code>p</code>: 将复制的数据<strong>在光标的下一行/下一个位置粘贴</strong>。</p><p>(27) <strong><code>u</code>：撤销</strong>。</p><p>(28) <code>Ctrl + R</code>：取消撤销。</p><p>(29) <code>&gt; 大于号</code> ：将选中的文本整体向右缩进一次。</p><p>(30) <code>&lt; 小于号</code> ：将选中的文本整体向左缩进一次。</p><p>保存或退出具体要看当前用户的权限，</p><p>(31) <code>:w</code> 保存。</p><p>(32) <code>:w!</code> 强制保存。</p><p>(33) <code>:q</code> 退出。</p><p>(34) <code>:q!</code> 强制退出。</p><p>(35) <code>:wq</code> 保存并退出。</p><p>(36) <code>:set paste</code> 设置成粘贴模式，取消代码自动缩进。（<strong>向vim内粘贴文本会用到</strong>）</p><p>(37) <code>:set nopaste</code> 取消粘贴模式，开启代码自动缩进。</p><p>(38) <code> :set nu</code> 显示行号。</p><p>(39) <code>:set nonu</code> 隐藏行号。可用于全屏下复制代码文本。</p><p>(40) <code>gg=G</code>：将全文代码格式化显示（自动缩进）。</p><p>ps：<code>ggdG</code>, 删除所有行。</p><p>(41) <code> :noh</code>：关闭查找关键词高亮。</p><p>(42) <code>Ctrl + Q</code>：（中断当前命令）当vim卡死时，可以<strong>取消当前正在执行的命令</strong>。</p><p>异常处理：</p><p>每次用vim编辑文件时，会自动创建一个<code>.filename.swp</code>的临时文件。</p><p>如果打开某个文件时，该文件的swp文件已存在，则会报错。此时解决办法有两种：</p><ul><li><p>(1) 找到正在打开该文件的程序，并退出。</p></li><li><p>(2) 直接删掉该swp文件即可。</p></li></ul></li></ul><h3 id="3-创建作业-amp-测试作业的正确性"><a href="#3-创建作业-amp-测试作业的正确性" class="headerlink" title="3. 创建作业 &amp; 测试作业的正确性"></a>3. 创建作业 &amp; 测试作业的正确性</h3><pre><code>homework 2 create` 可以重新创建所有lesson_2的作业。`homework 2 create id` 可以单独创建lesson_2的第id个作业。e.g. `homework 2 create 0` 可以只重新创建lesson_2的第0个作业。`homework 2 test` 可以评测lesson_2的所有作业。</code></pre><h3 id="4-作业"><a href="#4-作业" class="headerlink" title="4. 作业"></a>4. 作业</h3><p>见AcWing课程打卡笔记。</p><h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><p>讲义整理自Linux基础课讲义，及评论区的问答整理</p><p><a href="https://www.acwing.com/activity/content/57/">Linux基础课程-AcWing</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础  第一讲 常用文件管理命令</title>
      <link href="/posts/54cf.html"/>
      <url>/posts/54cf.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一讲-常用文件管理命令"><a href="#第一讲-常用文件管理命令" class="headerlink" title="第一讲 常用文件管理命令"></a>第一讲 常用文件管理命令</h1><p>PS：（Linux学习基础：需具备一定的算法基础） ​<br> ​<strong>各种命令学习注重实用主义，应用为主</strong><br> ​<strong>各种命令的用法学习不能求全，不会的现查即可，边学先查。</strong></p><h2 id="0-课程概论"><a href="#0-课程概论" class="headerlink" title="0. 课程概论"></a>0. 课程概论</h2><h3 id="1-课程概论"><a href="#1-课程概论" class="headerlink" title="1)  课程概论"></a>1)  课程概论</h3><p>（1）目标：锻炼动手能力，学完之后可以做出什么项目</p><p>后端服务端开发必备技能。</p><p>（2）什么是Linux ? Ubuntu、CentOS ?</p><p><a href="https://baike.baidu.com/item/Linux?fromModule=lemma_search-box">Linux-百度百科</a></p><p>Ubuntu 和 Centos 都是基于Linux的操作系统(Linux的不同发行版本)，它们的编译方式有所不同。</p><p>（3）未来工作方式，Terminal,  命令行交互方式<br>入云（数字化）</p><p>Terminal：终端就是连接内核与交互界面的这座桥，并且使用命令行的交互方式。</p><h3 id="2-文件系统"><a href="#2-文件系统" class="headerlink" title="2) 文件系统"></a>2) 文件系统</h3><p>（1）文件系统结构</p><p>​    在 Linux 或 Unix 操作系统中，所有的文件和目录都被组织成以一个根节点<code>/</code> 开始的倒置的树状结构。</p><p>​    <code>tree</code>: 该命令可以用树状图列出目录的内容。</p><p>（2）路径</p><p>绝对路径、相对路径、根目录</p><p>​    </p><p><strong>a. 绝对路径</strong>：从<code>/</code> 开始描述</p><p><strong>b. 相对路径</strong>:  （可使用<code>pwd</code>命令）输出当前所在的路径</p><p><strong>c. 根目录名称</strong>：<code>/</code>（除号）</p><p>根目录下常见的子目录有，</p><p><code>bin</code>: 包含常用的可执行文件的命令</p><p><code>etc</code>: 一些配置文件，比如nginx服务器</p><p><code>var</code>:  存一些日志文件（log）</p><p><code>lib</code>: 存一些安装包（静态文件库）、头文件</p><p><code>home</code>: 系统用户的家目录</p><p>补充：</p><p><code>.</code>  ，一个点： 表示当前目录</p><p><code>..</code> ，两个点：到上级目录</p><p><code>~/ </code> ,  表示家目录（等价于用户的目录<code>/home/user01/</code>）</p><hr><h2 id="1-常用命令介绍"><a href="#1-常用命令介绍" class="headerlink" title="1. 常用命令介绍"></a>1. 常用命令介绍</h2><p>(1)  <code>ctrl c</code>:  取消命令，并且换行(换行并清空)</p><p>(2)  <code>ctrl u</code>:  清空本行命令</p><p>(3) <code>tab键</code>： 可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项</p><p>(4) <code>ls</code>:  列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件</p><p><code>ls -l</code>:  查看文件详细信息（权限、创建时间、名称等）<br><code>ls -h</code>:  命令加h,可将文件大小按格式化输出<br><code>ls -a</code>:  查看隐藏文件（文件名以<code>.</code>开头的）<br><code>ll </code>: 等价于<code> ls -la</code>, 查看所有文件详细信息<br><code>ls -文件名</code> : 查看该文件目录下的所有文件</p><p><code>ls -l | wc -l</code>:  统计当前目录下的文件数量</p><p>(5) <code>pwd</code>:  显示当前路径</p><p>(6)<code>cd XXX</code>:  进入XXX目录下(绝对或相对), </p><p><code>cd</code>:  回到家目录<br><code>cd .. </code>：返回上层目录<br><code>cd ~</code>: 返回改变路径前的路径</p><p>(7)  <strong><code>cp</code> : 复制 + 粘贴 + 重命名</strong></p><p><code>cp XXX YYY</code>:  将XXX文件复制成YYY，XXX和YYY可以是一个路径，</p><p><code>cp XXX YYY -r</code> 将XXX目录（文件夹）复制到YYY下</p><p><code>../dir_c/a.txt</code>，表示上层目录下的dir_c文件夹下的文件a.txt</p><p>(8) <code>mkdir XXX</code>: 创建目录XXX（文件夹）</p><p><code>mkdir XXX -p</code>：如果文件夹XXX不存在，会自动创建</p><p>(9) <code>rm XXX</code>: 删除普通文件</p><p><code>rm XXX -r</code>:  删除文件夹, -r是递归删</p><p><code>rm *.txt</code>:  删除所有<code>.txt</code>类型文件,文件名是支持正则表达式的</p><p><code>rm *</code>: 删除所有文件（不包括文件夹）,eg. <code>rm a/*</code> 删除目录a下的所有文件</p><p><code>rm * -r</code>: 删除所有文件夹(不会删除隐藏文件), 支持正则表达式</p><p>(10) <strong><code>mv</code>: 剪切 + 粘贴 + 重命名</strong></p><p><code>mv XXX YYY</code>: 将XXX文件移动到YYY，</p><p>和cp命令一样，XXX和YYY可以是一个路径，重命名也是用这个命令</p><p>(11) <code>touch XXX</code>: 创建一个文件</p><p>(12) <code>cat XXX</code>: 展示文件XXX中的内容</p><p>(13) 复制文本<br>    Windows/Linux下：<code>Ctrl + insert</code>，Mac下：<code>command + c</code></p><p>(14) 粘贴文本<br>    Windows/Linux下：<code>shift + insert</code>，Mac下：<code>command + v</code></p><p>ps: 其他命令</p><p><code>tmux</code>:（一种工具） 可以让任务一直挂在后台运行</p><p><code>tree</code>: 可以用树状图列出目录的内容</p><p><code>history</code>: 可查看输入命令的历史记录</p><h2 id="2-创建作业-amp-测试作业的正确性"><a href="#2-创建作业-amp-测试作业的正确性" class="headerlink" title="2. 创建作业 &amp; 测试作业的正确性"></a>2. 创建作业 &amp; 测试作业的正确性</h2><pre><code>`homework 1 create` 可以重新创建所有lesson_1的作业`homework 1 create id` 可以单独创建lesson_1的第id个作业. e.g.`homework 1 create 0` 可以只重新创建lesson_1的第0个作业`homework 1 test` 可以评测lesson_1的所有作业</code></pre><h2 id="3-作业"><a href="#3-作业" class="headerlink" title="3. 作业"></a>3. 作业</h2><p>见AcWing课程打卡笔记。</p><p>第一次课截图打卡hhh</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303051640533.jpg" alt="img-202303051640533"></p><h2 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h2><p>讲义整理自Linux基础课讲义，及评论区的问答整理</p><p><a href="https://www.acwing.com/activity/content/57/">Linux基础课程-AcWing</a></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855530/">讲义1. 常用文件管理命令</a></p><p><a href="https://www.acwing.com/blog/content/13214/">zst同学笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitee + Hexo 博客推送部署失败问题解决(排除文档中的不合规内容)</title>
      <link href="/posts/31f9.html"/>
      <url>/posts/31f9.html</url>
      
        <content type="html"><![CDATA[<h2 id="Gitee-Hexo-博客推送部署失败问题解决-排除文档中的不合规内容"><a href="#Gitee-Hexo-博客推送部署失败问题解决-排除文档中的不合规内容" class="headerlink" title="Gitee + Hexo 博客推送部署失败问题解决(排除文档中的不合规内容)"></a>Gitee + Hexo 博客推送部署失败问题解决(排除文档中的不合规内容)</h2><h3 id="一、问题说明"><a href="#一、问题说明" class="headerlink" title="一、问题说明"></a>一、问题说明</h3><p>大概是在22年12月的时候，我用git服务提交本地代码到Gitee仓库后，再启用<a href="https://gitee.com/help/articles/4136">Gitee Pages服务</a>开始部署推送新文章时出现了下面的提示界面，导致博客部署错误。</p><p>Gitee Pages服务提示的错误为：<code>index.html页面可能包含违禁违归内容</code></p><p>想来就觉得纳闷，自己写的内容也不至于直接违规了吧，我的内容大多数是知识笔记的记录而已。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303020014895.jpg" alt="img-202303020014895"  /><h3 id="二、排查问题"><a href="#二、排查问题" class="headerlink" title="二、排查问题"></a>二、排查问题</h3><p>接着按照说明，我到指定的html页面中查找问题，发现好像是某篇数据库MySQL案例中的题干涉及到了ZZ问题，我感觉就这块内容确实不太好说，言多必失。</p><p>学习案例里用的数据库是Google的一个老sql数据库文件，涵盖了全世界的国家、国家语言和城市的相关信息。题干中就出现了有数据库更新操作要求，图我就不贴了。总之咱的ZZ方向不能错哈。</p><p>我仔细校对原博客文章，修改了一些关键词后，再次推送文章后，但问题依旧。我也上网查了相关的案例，但还是没有找到好的解决方法。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303020122925.jpg" alt="img-202303020122925"></p><p>嗯索性就简单粗暴点，我把这篇问题文章给移除了，不让它推送出来，果真问题得到解决了。</p><p>这样就能继续愉快的更新文章了哈~</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303020110605.jpg" alt="img-202303020110605"></p><h3 id="三、简单总结"><a href="#三、简单总结" class="headerlink" title="三、简单总结"></a>三、简单总结</h3><p>22年的12月算是很特殊的一个时间段，寒假提前到来，接着疫情放开，我也被要求早早离校。将近在家又上了一段时间的线上课，博客部署的问题就被搁置了，直到最近这个问题才给解决掉。</p><p>出问题的那篇文章在12月的时候，距离文章发布已经一个多月了，后面部署推送的文章都没出现上面问题。按照官方的说明，想必是Gitee的服务器升级了，对现有的Gitee Pages服务审核更严格了，我才会遇到这类问题。但这也是好事，我作为内容分享者，更应对自己公开发表的内容负责，传播正确的政治立场。</p><p>现在已经2023年春了，博客文章推送已经鸽了快4个月，后续我还会继续更新的，寒假期间还有点存货哈~</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303020128742.jpg" alt="img/202303020128742.jpg" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> Hexo博客问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组CH1 第一章 计算机概要与技术</title>
      <link href="/posts/bb40.html"/>
      <url>/posts/bb40.html</url>
      
        <content type="html"><![CDATA[<h1 id="计组CH1-第一章-计算机概要与技术"><a href="#计组CH1-第一章-计算机概要与技术" class="headerlink" title="计组CH1 第一章 计算机概要与技术"></a>计组CH1 第一章 计算机概要与技术</h1><h2 id="CH1-计算机概要与技术"><a href="#CH1-计算机概要与技术" class="headerlink" title="CH1    计算机概要与技术"></a><strong>CH1    计算机概要与技术</strong></h2><h3 id="思维导图："><a href="#思维导图：" class="headerlink" title="思维导图："></a>思维导图：</h3><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211290146245.jpg" alt="CH1 章节导图"></p><h3 id="一、计算机的分类与设计思想"><a href="#一、计算机的分类与设计思想" class="headerlink" title="一、计算机的分类与设计思想"></a>一、计算机的分类与设计思想</h3><ul><li><h4 id="计算机的分类"><a href="#计算机的分类" class="headerlink" title="计算机的分类"></a>计算机的分类</h4></li></ul><p><strong>传统上</strong>，按照应用，计算机可以分为：</p><p><u>个人计算机</u><u>（PC）</u><br><u>服务器</u>，适用于执行大负载任务，多用户通过网络并行访问；高端服务器被称为超级计算机<br><u>嵌入式计算机</u>，是数量最多的一类计算机</p><p>进入<strong>后PC时代</strong>：</p><p>往小的方向发展为：<u>个人移动设备（PMD）</u></p><p>往大的方向发展为：<u>仓储规模计算机（WSC）</u>（Warehouse-Scale Computer），大型数据中心的云计算服务器</p><ul><li><h4 id="计算机的八个伟大思想"><a href="#计算机的八个伟大思想" class="headerlink" title="计算机的八个伟大思想"></a>计算机的八个伟大思想</h4></li></ul><p>导图：</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211290204234.jpg" alt="8个伟大思想" style="zoom:50%;" /><p>2个设计原则：</p><p>（1） 摩尔定律</p><p><u>单芯片上的集成度</u>（单位面积硅片能容纳的晶体管数量）<u>每18个月翻一番</u></p><p>提出于1965，芯片设计要依据设计开始/完成？时的工艺水平</p><p>（2）抽象，省略低层次的细节，提供简化的模型</p><p>4个提高性能的方法：</p><p>（3）加速大概率事件</p><p>一台计算机绝大部分时间用来打游戏，改进游戏性能还是其他性能更能提高整体性能？</p><p>定量分析：Amdahl定律    <strong>t改进 = t相关/S + t无关</strong></p><p>即改进后的执行时间 = 改进影响的执行时间 / 改进量 + 改进不影响的执行时间</p><p>（4）并行，同时发生，典型例子是多核处理器</p><p>（5）流水线，类比工业中的流水线</p><p>（6）预测，若1）预测失误后恢复的代价不高；2）预测有相当的准确率    </p><p>​    则可以猜测哪些操作会发生，并提前开始执行</p><p>存储器层次与冗余</p><p>（7）存储器层次（见第三部分 软硬件接口）</p><p>（8）冗余提高可靠性，物理器件的“备胎”，失效了就换上</p><ul><li><h4 id="存储容量"><a href="#存储容量" class="headerlink" title="存储容量"></a>存储容量</h4><p>1、单位（低到高）    千K    兆M    吉G    <strong>太T    拍P    艾E    泽Z    尧Y</strong><br>每两级之间有2^^10（1024）倍的数量关系</p><p>2.B（Byte）字节，b（bit）位</p><p><strong>1 B = 8 b</strong> , 即 1 字节 = 8 位    字节常用于储存容量，位常用于传输速度</p><p>例如：</p><p>i5+GTX3060+8G+512G~B/b？（字节B，代表存储容量）</p><p>100兆的宽带B/b？（位b, 100Mbps 约等于 12.5 MB/S）</p></li></ul><hr><h3 id="二、软硬件基础（简述）"><a href="#二、软硬件基础（简述）" class="headerlink" title="二、软硬件基础（简述）"></a>二、软硬件基础（简述）</h3><p>导图：</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211290213119.jpg" alt="软硬件基础" style="zoom:80%;" /><h4 id="1、编程语言分类-3类"><a href="#1、编程语言分类-3类" class="headerlink" title="1、编程语言分类(3类)"></a>1、编程语言分类(3类)</h4><p>（1）<strong>机器指令</strong> （01串）<br>    00000011101001001011001111110010</p><p>（2）<strong>汇编语言</strong>（由指令助记符、寄存器标号构成）<br>    addi $s1, $s1, 1</p><p>（3）<strong>高级语言</strong>    （C/C++，Java…语句接近自然语言，提高了程序的可移植性）<br>    cnt = cnt + 1;<br>    机器语言依赖于机器，所以被称作低级语言</p><h4 id="2、冯·诺依曼结构（五部分）"><a href="#2、冯·诺依曼结构（五部分）" class="headerlink" title="2、冯·诺依曼结构（五部分）"></a>2、冯·诺依曼结构（五部分）</h4><p>组成CPU的两大部件：<u><strong>①运算器（数据通路）、②控制器</strong></u></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211290224571.jpg" alt="冯洛伊曼结构"></p><p>存放程序和数据的 <u><strong>③存储器</strong></u> </p><p><strong>只有放入内存的程序才能被CPU执行</strong></p><p>缓存cache ~ SRAM 快但是贵，容量很小（3MB）</p><p>主存/内存 ~ DRAM 比较快也比较贵，容量中等（8~16GB）</p><p>辅存/外存/二级存储器 ~ 闪存、磁盘 慢但便宜，容量大（基本都是512GB起步）</p><p>外围的 <u><strong>④输入设备、⑤输出设备</strong></u></p><p>合称I/O设备输入设备：键盘鼠标、扫描仪输出设备：显示器、打印机    </p><p>包括混合I/O设备：触摸屏、网卡</p><h4 id="3、存储器层次结构"><a href="#3、存储器层次结构" class="headerlink" title="3、存储器层次结构"></a>3、存储器层次结构</h4><p>存储器层次：</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211290232254.jpg" alt="存储器层次结构" style="zoom:45%;" /><p>CPU的主频在3.5GHz，内存条的主频2666MHz，通常是谁等待谁？CPU会等内存<br>解决方法：存储器层次（思想7）</p><p><strong>顶端：快贵小</strong>  →  <strong>底端：慢廉大</strong><br>第一级：<strong>Cache</strong>（和cash同音），采用SRAM技术<strong>（易失性）</strong><br>第二级：<strong>主存/内存（易失性）</strong>，采用DRAM技术<br>SRAM、DRAM断电后数据很快消失，为易失性存储器<br>第三级：<strong>辅存（非易失性）</strong>，过去常用<u>磁盘</u>，现逐渐被<u>闪存</u>代替<br>磁盘、闪存断电后不丢失数据，为非易失性存储器</p><p><strong>Cache位于CPU中</strong> （CPU中包含了少量Cache, 主要有运算器和控制器构成）</p><p>在CPU中塞入cache，<u>好处</u>是：</p><p>1）<u>物理距离近，和两大部件通信迅速</u></p><p>2）只要cache能把CPU即将要用的程序、数据，从内存中复制过来，就能<u>缓解速度矛盾</u></p><h4 id="4、指令集体系结构（ISA）"><a href="#4、指令集体系结构（ISA）" class="headerlink" title="4、指令集体系结构（ISA）"></a>4、指令集体系结构（ISA）</h4><p>苹果的M1系列芯片为什么性能高且续航持久？采用了ARM架构</p><p>CPU的 <strong>指令集体系结构（ISA）</strong>根本上不一样，即可以执行的指令集合大不相同</p><p>一个x86，为了和二三十年前的软件保持兼容，指令只增不减，越来越庞大繁杂</p><p>一个ARM，设计思想主张精简，能效出色</p><p>教材介绍一个和ARM设计思路相近的架构：MIPS</p><p>MIPS和ARM都属于 <strong>RISC架构</strong>    （Reduced Instruction Set Computer，<strong>精简指令集计算机</strong>）</p><p>x86是典型的 <strong>CISC架构</strong>    （Complex……，复杂……）</p><h4 id="5、集成电路制造"><a href="#5、集成电路制造" class="headerlink" title="5、集成电路制造"></a>5、集成电路制造</h4><p>晶体管：受电信号控制的简单开关</p><p>集成电路（Integrated Circuit，IC）：由许多个晶体管组成的芯片</p><p>制造具体过程不太重要，记住结论：</p><p><strong>成品率越高、产量越高、芯片面积越小，芯片的制造成本越低</strong></p><hr><h4 id="CH1-复习题（一、二）"><a href="#CH1-复习题（一、二）" class="headerlink" title="CH1 复习题（一、二）"></a>CH1 复习题（一、二）</h4><p><strong>复习题是用来碎碎念回忆复习的，不是用来写的！</strong></p><p>打*的问题在考试中不太重要或者比较复杂，请酌情跳过</p><p>1、传统上计算机分为哪三类？后PC时代有哪两类计算机？</p><p>2、KB MB GB之上有哪些存储容量单位？</p><p><del>*3、计算机设计的八个伟大思想是？</del></p><p><del>4、Amdahl定律的公式为？</del></p><p>5、高级语言经过什么过程变成汇编语言？汇编语言又经过什么变成机器语言？</p><p>6、冯·诺依曼结构由哪五大基本部件组成？CPU主要有哪两大部件？还有少量的哪个部件？</p><p>7、存储器层次中，最快贵小的、其次的、最慢廉大的是什么？分别采用什么技术？</p><p>8、Intel和苹果的处理器架构不同，是什么东西不同？</p><p>9、成品率、芯片面积、产量如何影响集成电路（IC）的制造成本？</p><hr><h3 id="三、性能与功耗"><a href="#三、性能与功耗" class="headerlink" title="三、性能与功耗"></a>三、性能与功耗</h3><p>思维导图：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211290300817.jpg" alt="性能与功耗"></p><h4 id="1、评价性能的指标"><a href="#1、评价性能的指标" class="headerlink" title="1、评价性能的指标"></a><strong>1、评价性能的指标</strong></h4><p>鲁大师、安兔兔这些跑分软件的原理？</p><p>SPEC CPU基准测试程序，是一个比较权威的跑分软件</p><p>个人计算机（PC）更看重<strong>响应时间</strong>（又称<strong>执行时间</strong>）：<u>任务从开始到完成的时间</u>，加载进入游戏需要XXX秒钟……</p><p>服务器更看重<strong>吞吐率</strong>：<u>单位时间内完成的任务数量</u>，一秒钟能把网页发送给XXX个用户……</p><p>课程主要讨论<strong>CPU执行时间</strong></p><p>计算机A的性能是计算机B的几倍？→计算机A的执行时间是B的几分之一？</p><p>e.g. 运行同一个程序，计算机A用15秒，计算机B用10秒，谁的性能更高？它的性能比另</p><p>外一台高多少？</p><h4 id="2、CPU经典性能公式"><a href="#2、CPU经典性能公式" class="headerlink" title="2、CPU经典性能公式"></a>2、CPU经典性能公式</h4><p><strong>（1）CPUtime = cycles x T</strong></p><p>CPU时钟周期长度T（CPU干任何事的时间都是一个时钟周期的整数倍）</p><p>干一件事，即执行一个程序，需要多少个时钟周期？</p><p> <strong>CPUtime = cycles x T</strong>    <u>即CPU执行时间 = 时钟周期数 x 时钟周期长度</u></p><p>ps:任何程序都要以机器语言指令的形式，才能被计算机看懂，所以<strong>执行程序本质上就是执行机器指令！</strong></p><p> <strong>（2）cycles = IC x CPI</strong></p><p>不同机器指令需要的周期数不尽相同，所以</p><p>每条机器指令占用的时钟周期数<strong>CPI</strong>（cycles per instruction）是一个平均值，即<strong>总周期数/总指令数</strong></p><p> <strong>cycles = IC x CPI</strong>    <u>即时钟周期数 = 指令数 x 平均每条指令所需周期数</u></p><p><strong>（3）CPUtime = IC x CPI x T     CPU经典性能公式</strong>    </p><p><strong>CPUtime = IC x CPI x T</strong>    <u>即CPU执行时间 = 指令数 x CPI x 时钟周期长</u></p><p>CPU的时钟频率 f（主频）：一秒钟有多少个时钟周期，<strong>T = 1 / f</strong></p><p>所以也能写成，</p><p><strong>CPUtime = IC x CPI / f</strong>     <u>即CPU执行时间 = 指令数 x CPI / 主频</u> </p><p>主频的单位通常是吉赫兹GHz（<strong>G在此处代表10^9</strong>）</p><p>e.g. 主频为4GHz的CPU，每个时钟周期的长度是多少秒？</p><p>某程序共有3亿条指令，其中1亿条的CPI为3，2亿条的CPI为6，整个程序的CPI是多少？</p><p>该CPU执行这个程序需要多长时间？</p><h4 id="3、CPU经典性能公式为什么靠谱"><a href="#3、CPU经典性能公式为什么靠谱" class="headerlink" title="3、CPU经典性能公式为什么靠谱"></a>3、CPU经典性能公式为什么靠谱</h4><p><strong>CPUtime = IC x CPI x T     CPU经典性能公式</strong></p><p>经典性能公式考虑了<u>指令数IC</u>、<u>平均每条指令需要周期数CPI</u>、<u>时钟周期长度T</u>（也就是<u>主频f</u>的倒数）</p><p><strong>全部三个因素</strong>，使用<strong>CPU执行时间</strong>这个靠谱的指标来衡量性能</p><p>使用什么编程语言和编译程序、采取什么算法，<u>影响指令数和CPI两个因素</u></p><p>采用什么<u>指令集体系结构，影响指令数、CPI、主频全部三个因素</u>，它们都会影响CPU性能</p><p>还有一个衡量性能的指标<u>MIPS</u>（million instructions per second，百万指令每秒）</p><p><code>MIPS = IC / (CPUtime x 10^6 ) = f / (CPI x 10^6 )</code></p><p>因为只<u>考虑了主频（周期长）和CPI两个指标</u>，很受作者唾弃</p><h4 id="4、功耗"><a href="#4、功耗" class="headerlink" title="4、功耗"></a>4、功耗</h4><p>在<u>移动设备（PMD）和仓储规模计算机（WSC）</u>中，电能是关键资源</p><p>但随着CPU集成度越来越高，晶体管的数量剧增，功耗越来越大、散热越来越难</p><p>CMOS（互补型金属氧化半导体）是当前占统治地位的集成电路技术</p><p>其中，晶体管的能耗主要来自动态能耗，即晶体管打开/关闭的短暂动态过程</p><p>即0→1或1→0的过程</p><p>一个晶体管经历一次0 → 1 → 0或1 → 0 → 1的开关过程</p><p>能耗 = 负载电容 x 电压^2 </p><p>开关频率与CPU主频相关，所以功耗公式为</p><p><code>P = 1/ 2  * C * U^2 * f </code>    功耗 = 1 /2 x 负载电容 x 电压^2 x 开关频率 </p><hr><h4 id="CH1-复习题（三）"><a href="#CH1-复习题（三）" class="headerlink" title="CH1 复习题（三）"></a>CH1 复习题（三）</h4><p>1、PC和服务器分别更看重哪项性能评价指标？</p><p>2、CPU经典性能公式计算的是什么指标？公式是什么（注意有两个联系密切的版本）？</p><p><del>*3、我们是如何得出经典性能公式的？</del></p><p>4、哪四个东西会通过影响性能公式中的某些项，从而影响性能？</p><p>5、MIPS怎么计算？这个性能指标为什么不靠谱？</p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组CH0  第零章 计组课程概述</title>
      <link href="/posts/d5e3.html"/>
      <url>/posts/d5e3.html</url>
      
        <content type="html"><![CDATA[<h1 id="计组CH0-第零章-计组课程概述"><a href="#计组CH0-第零章-计组课程概述" class="headerlink" title="计组CH0  第零章 计组课程概述"></a>计组CH0  第零章 计组课程概述</h1><h2 id="一、学习资源"><a href="#一、学习资源" class="headerlink" title="一、学习资源"></a>一、学习资源</h2><ul><li><strong>参考教材</strong></li></ul><p>《计算机组成原理》——基于MIPS结构 康磊老师著（本校）</p><p>《计算机机组成与设计》Patterson &amp; Hennesy著  第5版大黑书（川大）</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211290912984.jpg" alt="大黑书" style="zoom:33%;" /><ul><li><strong>网课资源</strong></li></ul><p>B站UP: <a href="https://space.bilibili.com/157724693">翼云图灵</a> 同级川大学子录制，课程质量我个人觉得非常Nice！！！</p><ul><li><strong>笔记说明</strong></li></ul><p>笔记内容大多源自网课，经整理后发布。主要目的是为了期末备考，来掌握重要考点。</p><p>学校里的课程我不太能跟上~~</p><h2 id="二、课程目录"><a href="#二、课程目录" class="headerlink" title="二、课程目录"></a>二、课程目录</h2><blockquote><h3 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a><strong>计算机组成原理</strong></h3></blockquote><h3 id="思维导图："><a href="#思维导图：" class="headerlink" title="思维导图："></a><strong>思维导图：</strong></h3><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211290034814.jpg" alt="章节导图"></p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="章节内容："></a><strong>章节内容：</strong></h3><p>共五个章节</p><h3 id="CH1-计算机概要与技术"><a href="#CH1-计算机概要与技术" class="headerlink" title="CH1    计算机概要与技术"></a><strong>CH1    计算机概要与技术</strong></h3><ul><li><h4 id="1、计算机的分类与设计思想"><a href="#1、计算机的分类与设计思想" class="headerlink" title="1、计算机的分类与设计思想"></a>1、计算机的分类与设计思想</h4></li><li><h4 id="2、软硬件基础（后续章节细讲）"><a href="#2、软硬件基础（后续章节细讲）" class="headerlink" title="2、软硬件基础（后续章节细讲）"></a>2、软硬件基础（后续章节细讲）</h4></li><li><h4 id="3、性能与功耗"><a href="#3、性能与功耗" class="headerlink" title="3、性能与功耗"></a>3、性能与功耗</h4></li></ul><h3 id="CH2-指令：计算机的语言"><a href="#CH2-指令：计算机的语言" class="headerlink" title="CH2    指令：计算机的语言"></a><strong>CH2    指令：计算机的语言</strong></h3><ul><li><h4 id="1、整数的表示"><a href="#1、整数的表示" class="headerlink" title="1、整数的表示"></a>1、整数的表示</h4></li><li><h4 id="2、运算、数据传送、决策三大类MIPS指令"><a href="#2、运算、数据传送、决策三大类MIPS指令" class="headerlink" title="2、运算、数据传送、决策三大类MIPS指令"></a>2、运算、数据传送、决策三大类MIPS指令</h4></li><li><h4 id="3、MIPS机器语言"><a href="#3、MIPS机器语言" class="headerlink" title="3、MIPS机器语言"></a>3、MIPS机器语言</h4></li><li><h4 id="4、寄存器与寻址方式"><a href="#4、寄存器与寻址方式" class="headerlink" title="4、寄存器与寻址方式"></a>4、寄存器与寻址方式</h4></li><li><h4 id="5、指令对函数调用的支持"><a href="#5、指令对函数调用的支持" class="headerlink" title="5、指令对函数调用的支持"></a>5、指令对函数调用的支持</h4></li></ul><h3 id="CH3-计算机的算术运算"><a href="#CH3-计算机的算术运算" class="headerlink" title="CH3    计算机的算术运算"></a><strong>CH3    计算机的算术运算</strong></h3><ul><li><h4 id="1、整数的加减运算"><a href="#1、整数的加减运算" class="headerlink" title="1、整数的加减运算"></a>1、整数的加减运算</h4></li><li><h4 id="2、附录ALU逻辑设计"><a href="#2、附录ALU逻辑设计" class="headerlink" title="2、附录ALU逻辑设计"></a>2、附录ALU逻辑设计</h4></li><li><h4 id="3、乘法器、除法器及其改进"><a href="#3、乘法器、除法器及其改进" class="headerlink" title="3、乘法器、除法器及其改进"></a>3、乘法器、除法器及其改进</h4></li><li><h4 id="4、浮点数的表示与运算"><a href="#4、浮点数的表示与运算" class="headerlink" title="4、浮点数的表示与运算"></a>4、浮点数的表示与运算</h4></li></ul><h3 id="CH4-CPU处理器"><a href="#CH4-CPU处理器" class="headerlink" title="CH4    CPU处理器"></a><strong>CH4    CPU处理器</strong></h3><ul><li><h4 id="1、简单MIPS指令子集的数据通路实验"><a href="#1、简单MIPS指令子集的数据通路实验" class="headerlink" title="1、简单MIPS指令子集的数据通路实验"></a>1、简单MIPS指令子集的数据通路实验</h4></li><li><h4 id="2、多周期实现"><a href="#2、多周期实现" class="headerlink" title="2、多周期实现"></a>2、多周期实现</h4></li><li><h4 id="3、流水线与三大冒险"><a href="#3、流水线与三大冒险" class="headerlink" title="3、流水线与三大冒险"></a>3、流水线与三大冒险</h4></li></ul><h3 id="CH5-大容量和高速度：开发存储器层次结构"><a href="#CH5-大容量和高速度：开发存储器层次结构" class="headerlink" title="CH5    大容量和高速度：开发存储器层次结构"></a><strong>CH5    大容量和高速度：开发存储器层次结构</strong></h3><ul><li><h4 id="1、四大存储器技术"><a href="#1、四大存储器技术" class="headerlink" title="1、四大存储器技术"></a>1、四大存储器技术</h4></li><li><h4 id="2、Cache的基本原理、性能、一致性"><a href="#2、Cache的基本原理、性能、一致性" class="headerlink" title="2、Cache的基本原理、性能、一致性"></a>2、Cache的基本原理、性能、一致性</h4></li><li><h4 id="3、虚拟存储器"><a href="#3、虚拟存储器" class="headerlink" title="3、虚拟存储器"></a>3、虚拟存储器</h4></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验(一)  进程调度算法设计动(动态优先数+时间片轮转法)</title>
      <link href="/posts/edef.html"/>
      <url>/posts/edef.html</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统实验-一-进程调度算法设计-动态优先数-时间片轮转法"><a href="#操作系统实验-一-进程调度算法设计-动态优先数-时间片轮转法" class="headerlink" title="操作系统实验(一)  进程调度算法设计(动态优先数+时间片轮转法)"></a>操作系统实验(一)  进程调度算法设计(动态优先数+时间片轮转法)</h1><h2 id="模拟进程调度算法，用动态优先数及时间片轮转法实现进程调度"><a href="#模拟进程调度算法，用动态优先数及时间片轮转法实现进程调度" class="headerlink" title="模拟进程调度算法，用动态优先数及时间片轮转法实现进程调度"></a>模拟进程调度算法，用动态优先数及时间片轮转法实现进程调度</h2><h2 id="一、实验要求"><a href="#一、实验要求" class="headerlink" title="一、实验要求"></a>一、实验要求</h2><h3 id="1．内容：-设计一个简单的进程调度算法，模拟OS中的进程调度过程"><a href="#1．内容：-设计一个简单的进程调度算法，模拟OS中的进程调度过程" class="headerlink" title="1．内容： 设计一个简单的进程调度算法，模拟OS中的进程调度过程"></a>1．内容： 设计一个简单的进程调度算法，模拟OS中的进程调度过程</h3><h3 id="2．要求："><a href="#2．要求：" class="headerlink" title="2．要求："></a>2．要求：</h3><p>① 进程数不少于5个；<br>② 进程调度算法任选；最好选用动态优先数法，每运行一个时间片优先数减3；<br>③ 用C++（或C）语言编程；<br>④ 程序运行时显示进程调度过程。</p><h3 id="3．步骤："><a href="#3．步骤：" class="headerlink" title="3．步骤："></a>3．步骤：</h3><p>① 设计PCB及其数据结构：</p><p>  进程标识数：ID</p><p>  进程优先数：PRIORITY（优先数越大，优先级越高）</p><p>  进程已占用时间片：CPUTIME</p><p>  进程尚需时间片：ALLTIME（一旦运行完毕，ALLTIME为0）</p><p>  进程队列指针：NEXT，用来将PCB排成队列</p><p>  进程状态：STATE（一般为就绪，不用）</p><p>② 设计进程就绪队列及数据结构；</p><p>③ 设计进程调度算法，并画出程序流程图；</p><p>④ 设计输入数据和输出格式；</p><p>​     结构格式：当前正运行的进程：0</p><p>​     当前就绪队列：2，1，3，4</p><p>⑤ 编程上机，验证结果。</p><h3 id="4．提示："><a href="#4．提示：" class="headerlink" title="4．提示："></a>4．提示：</h3><p>假设调度前，系统中有5个进程，其初始状态如下：</p><table><thead><tr><th>ID</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>PRIORITY</td><td>9</td><td>38</td><td>30</td><td>29</td><td>0</td></tr><tr><td>CPUTIME</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>ALLTIME</td><td>3</td><td>3</td><td>6</td><td>3</td><td>4</td></tr><tr><td>STATE</td><td>ready</td><td>ready</td><td>ready</td><td>ready</td><td>read</td></tr></tbody></table><p>① 以时间片为单位调度运行；</p><p>② 每次总是从ALLTIME中不为0，且PRIORITY最大的进程调度运行一个时间片；</p><p>③ 上述进程运行后其优先数减3，再修改其CPUTIME和ALLTIME，重复②，③;</p><p>④ 直到所有进程的ALLTIME均变为0。</p><h3 id="5-书写实验报告"><a href="#5-书写实验报告" class="headerlink" title="5.书写实验报告"></a>5.书写实验报告</h3><p>① 实验题目；</p><p>② 程序中所用数据结构及说明；</p><p>③ 程序清单及描述；</p><p>④ 执行结果。</p><h2 id="二、算法实现："><a href="#二、算法实现：" class="headerlink" title="二、算法实现："></a>二、算法实现：</h2><h3 id="1-具体代码："><a href="#1-具体代码：" class="headerlink" title="1.具体代码："></a>1.具体代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//进程PCB结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> id, priority, cputime, alltime, state;<span class="comment">//state,结束-1，就绪0，运行1 </span></span><br><span class="line">&#125;pcb;</span><br><span class="line"></span><br><span class="line">pcb a[<span class="number">110</span>];<span class="comment">//定义进程队列 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">int</span> n, pcb a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----------------------------------------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;id  priority  cputime  alltime  state\n&quot;</span>);<span class="comment">//alltime,进程所需时间片 </span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t %d\t %d\t %d\t %d\n&quot;</span>, a[i].id, a[i].priority, a[i].cputime, a[i].alltime, a[i].state);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i].state == <span class="number">1</span>)</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;当前运行的进程id号：&quot;</span> &lt;&lt; a[i].id &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;当前的就绪进程id号：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i].state == <span class="number">0</span>)</span><br><span class="line">    cout &lt;&lt; a[i].id &lt;&lt; <span class="string">&quot; &quot;</span>;  </span><br><span class="line">&#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n----------------------------------------------\n\n&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prior_sort</span><span class="params">(<span class="type">int</span> n, pcb a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span> - i; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( (a[j].priority &lt;= a[j + <span class="number">1</span>].priority))</span><br><span class="line">            <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>].state != <span class="number">-1</span>) a[<span class="number">0</span>].state = <span class="number">1</span>;<span class="comment">//设为运行态 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process_scheduling</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>].state == <span class="number">1</span>)<span class="comment">//运行态1，完成一次调度</span></span><br><span class="line">        &#123;</span><br><span class="line">        a[<span class="number">0</span>].priority -= <span class="number">3</span>;</span><br><span class="line">            a[<span class="number">0</span>].cputime += <span class="number">1</span>;</span><br><span class="line">            a[<span class="number">0</span>].alltime -= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>].alltime == <span class="number">0</span>) </span><br><span class="line">            &#123;</span><br><span class="line">a[<span class="number">0</span>].state= <span class="number">-1</span>;<span class="comment">//该进程结束(-1)</span></span><br><span class="line">m ++;</span><br><span class="line"><span class="built_in">swap</span>(a[<span class="number">0</span>], a[n - m]);</span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">else</span> a[<span class="number">0</span>].state= <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">prior_sort</span>(n - m,a);</span><br><span class="line">        <span class="built_in">show</span>(n,a);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">while</span>(a[<span class="number">0</span>].alltime != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n; </span><br><span class="line"><span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入进程个数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请依次输入这&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;个进程的ID号、进程优先数、已占用时间片、需要的时间片：&quot;</span>&lt;&lt; endl;<span class="comment">//初始化进程队列 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i].id &gt;&gt; a[i].priority &gt;&gt; a[i].cputime &gt;&gt; a[i].alltime;</span><br><span class="line">a[i].state = <span class="number">0</span>; <span class="comment">//进程状态（默认就绪态0）</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;进程队列初始状态如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">show</span>(n,a);</span><br><span class="line"><span class="built_in">prior_sort</span>(n,a); </span><br><span class="line"><span class="built_in">show</span>(n,a); <span class="comment">//进程第一次调度状况</span></span><br><span class="line"><span class="built_in">process_scheduling</span>(n, m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="2-运行截图："><a href="#2-运行截图：" class="headerlink" title="2.运行截图："></a>2.运行截图：</h3><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211161808150.jpg" alt="img-202211161808150"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211161808077.jpg" alt="img-202211161808077"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据原理实验(一、二)  熟悉常用的Linux操作和Hadoop操作</title>
      <link href="/posts/52d4.html"/>
      <url>/posts/52d4.html</url>
      
        <content type="html"><![CDATA[<h1 id="大数据原理实验-一、二-熟悉常用的Linux操作和Hadoop操作"><a href="#大数据原理实验-一、二-熟悉常用的Linux操作和Hadoop操作" class="headerlink" title="大数据原理实验(一、二) 熟悉常用的Linux操作和Hadoop操作"></a>大数据原理实验(一、二) 熟悉常用的Linux操作和Hadoop操作</h1><h2 id="实验步骤及操作截图"><a href="#实验步骤及操作截图" class="headerlink" title="实验步骤及操作截图"></a>实验步骤及操作截图</h2><h2 id="1、熟悉常用的Linux操作"><a href="#1、熟悉常用的Linux操作" class="headerlink" title="1、熟悉常用的Linux操作"></a>1、熟悉常用的Linux操作</h2><h3 id="1）cd命令：切换目录"><a href="#1）cd命令：切换目录" class="headerlink" title="1）cd命令：切换目录"></a>1）cd命令：切换目录</h3><p>（1） 切换到目录“/usr/local”</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211152009977.jpg" alt="img-202211152009977"></p><p>（2）切换到当前目录的上一级目录</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211152009972.jpg" alt="img-202211152009972"></p><p>（3）切换到当前登录Linux系统的用户的自己的主文件夹</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211152009966.jpg" alt="img-202211152009966"></p><h3 id="2）ls命令：查看文件与目录"><a href="#2）ls命令：查看文件与目录" class="headerlink" title="2）ls命令：查看文件与目录"></a>2）ls命令：查看文件与目录</h3><p>查看目录“/usr”下的所有文件和目录</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151918438.jpg" alt="img-202211151918438"></p><h3 id="3）mkdir命令：新建目录"><a href="#3）mkdir命令：新建目录" class="headerlink" title="3）mkdir命令：新建目录"></a>3）mkdir命令：新建目录</h3><p>（1）进入“/tmp”目录，创建一个名为“a”的目录，并查看“/tmp”目录下已经存在哪些目录</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151918758.jpg" alt="img-202211151918758"></p><p>（2）进入“/tmp”目录，创建目录“a1/a2/a3/a4”</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151923019.jpg" alt="img-202211151923019"></p><h3 id="4）rmdir命令：删除空的目录"><a href="#4）rmdir命令：删除空的目录" class="headerlink" title="4）rmdir命令：删除空的目录"></a>4）rmdir命令：删除空的目录</h3><p>（1）将上面创建的目录a（在“/tmp”目录下面）删除</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151923111.jpg" alt="img-202211151923111"></p><p>（2）删除上面创建的目录“a1/a2/a3/a4” （在“/tmp”目录下面），然后查看“/tmp”目录下面存在哪些目录<br><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151924393.jpg" alt="img-202211151924393"></p><p>只有空文件夹a4被删除了</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151924446.jpg" alt="img-20221115192444"></p><h3 id="5）cp命令：复制文件或目录"><a href="#5）cp命令：复制文件或目录" class="headerlink" title="5）cp命令：复制文件或目录"></a>5）cp命令：复制文件或目录</h3><p>（1）将当前用户的主文件夹下的文件.bashrc复制到目录“/usr”下，并重命名为bashrc1</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151924551.jpg" alt="img-202211151924551"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151927057.jpg" alt="img-202211151927057"></p><p>（2）在目录“/tmp”下新建目录test，再把这个目录复制到“/usr”目录下</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151927406.jpg" alt="img-202211151927406"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151927388.jpg" alt="img-202211151927388"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151928622.jpg" alt="img-202211151928622"></p><h3 id="6）mv命令：移动文件与目录，或更名"><a href="#6）mv命令：移动文件与目录，或更名" class="headerlink" title="6）mv命令：移动文件与目录，或更名"></a>6）mv命令：移动文件与目录，或更名</h3><p>（1）将“/usr”目录下的文件bashrc1移动到“/usr/test”目录下</p><p>（2）将“/usr”目录下的test目录重命名为test2</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151929621.jpg" alt="img-202211151929621"></p><h3 id="7）rm命令：移除文件或目录"><a href="#7）rm命令：移除文件或目录" class="headerlink" title="7）rm命令：移除文件或目录"></a>7）rm命令：移除文件或目录</h3><p>（1）将“/usr/test2”目录下的bashrc1文件删除</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151929844.jpg" alt="img-202211151929844"></p><p>（2）将“/usr”目录下的test2目录删除</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151930271.jpg" alt="img-202211151930271"></p><h3 id="8）cat命令：查看文件内容"><a href="#8）cat命令：查看文件内容" class="headerlink" title="8）cat命令：查看文件内容"></a>8）cat命令：查看文件内容</h3><p>查看当前用户主文件夹下的.bashrc文件内容</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151930959.jpg" alt="img-202211151930959"></p><h3 id="9）tac命令：反向查看文件内容"><a href="#9）tac命令：反向查看文件内容" class="headerlink" title="9）tac命令：反向查看文件内容"></a>9）tac命令：反向查看文件内容</h3><p>反向查看当前用户主文件夹下的.bashrc文件的内容</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151930904.jpg" alt="img-202211151930904"></p><h3 id="10）more命令：一页一页翻动查看"><a href="#10）more命令：一页一页翻动查看" class="headerlink" title="10）more命令：一页一页翻动查看"></a>10）more命令：一页一页翻动查看</h3><p>翻页查看当前用户主文件夹下的.bashrc文件的内容</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151930219.jpg" alt="img-202211151930219"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151931354.jpg" alt="img-202211151931354"></p><h3 id="11）head命令：取出前面几行"><a href="#11）head命令：取出前面几行" class="headerlink" title="11）head命令：取出前面几行"></a>11）head命令：取出前面几行</h3><p>（1）查看当前用户主文件夹下.bashrc文件内容前20行</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151931701.jpg" alt="img-202211151931701"></p><p>（2）查看当前用户主文件夹下.bashrc文件内容，后面50行不显示，只显示前面几行</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211201844534.jpg" alt="img-202211151844534"></p><h3 id="12）tail命令：取出后面几行"><a href="#12）tail命令：取出后面几行" class="headerlink" title="12）tail命令：取出后面几行"></a>12）tail命令：取出后面几行</h3><p>（1）查看当前用户主文件夹下.bashrc文件内容最后20行</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151931591.jpg" alt="img-202211151931591"></p><p>（2）查看当前用户主文件夹下.bashrc文件内容，并且只列出50行以后的数据</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151932794.jpg" alt="img-202211151932794"></p><h3 id="13）touch命令：修改文件时间或创建新文件"><a href="#13）touch命令：修改文件时间或创建新文件" class="headerlink" title="13）touch命令：修改文件时间或创建新文件"></a>13）touch命令：修改文件时间或创建新文件</h3><p>（1）在“/tmp”目录下创建一个空文件hello，并查看文件时间</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151932820.jpg" alt="img-202211151932820"></p><p>（2）修改hello文件，将文件时间整为5天前</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151932835.jpg" alt="img-202211151932835"></p><h3 id="14）chown命令：修改文件所有者权限"><a href="#14）chown命令：修改文件所有者权限" class="headerlink" title="14）chown命令：修改文件所有者权限"></a>14）chown命令：修改文件所有者权限</h3><p>将hello文件所有者改为root帐号，并查看属性</p><p>（PS：由上面的操作13可看出当前文件所有者为root，这里我们改为用户bigdata）</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151932777.jpg" alt="img-202211151932777"></p><h3 id="15）find命令：文件查找"><a href="#15）find命令：文件查找" class="headerlink" title="15）find命令：文件查找"></a>15）find命令：文件查找</h3><p>找出主文件夹下文件名为.bashrc的文件</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151933790.jpg" alt="img-202211151933790"></p><h3 id="16）tar命令：压缩命令"><a href="#16）tar命令：压缩命令" class="headerlink" title="16）tar命令：压缩命令"></a>16）tar命令：压缩命令</h3><p>（1）在根目录“/”下新建文件夹test，然后在根目录“/”下打包成test.tar.gz</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151935031.jpg" alt="img-202211151935031"></p><p>（2）把上面的test.tar.gz压缩包，解压缩到“/tmp”目录</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151935899.jpg" alt="img-202211151935899"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151935667.jpg" alt="img-202211151935667"></p><h3 id="17）grep命令：查找字符串"><a href="#17）grep命令：查找字符串" class="headerlink" title="17）grep命令：查找字符串"></a>17）grep命令：查找字符串</h3><p>从“～/.bashrc”文件中查找字符串’examples’</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151935982.jpg" alt="img-202211151935982"></p><h3 id="18）配置环境变量"><a href="#18）配置环境变量" class="headerlink" title="18）配置环境变量"></a>18）配置环境变量</h3><p>（1）请在“～/.bashrc”中设置，配置Java环境变量</p><p>需要使用vim命令</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151936523.jpg" alt="img-202211151936523"></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151936227.jpg" alt="img-202211151936227" style="zoom:80%;" /><p>（2）查看JAVA_HOME变量的值</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151952705.jpg" alt="img-202211151952705"></p><h2 id="2、Hadoop操作"><a href="#2、Hadoop操作" class="headerlink" title="2、Hadoop操作"></a>2、Hadoop操作</h2><h3 id="（1）使用hadoop用户登录Linux系统，启动Hadoop（Hadoop的安装目录为“-usr-local-hadoop”），为hadoop用户在HDFS中创建用户目录“-user-hadoop”"><a href="#（1）使用hadoop用户登录Linux系统，启动Hadoop（Hadoop的安装目录为“-usr-local-hadoop”），为hadoop用户在HDFS中创建用户目录“-user-hadoop”" class="headerlink" title="（1）使用hadoop用户登录Linux系统，启动Hadoop（Hadoop的安装目录为“/usr/local/hadoop”），为hadoop用户在HDFS中创建用户目录“/user/hadoop”"></a>（1）使用hadoop用户登录Linux系统，启动Hadoop（Hadoop的安装目录为“/usr/local/hadoop”），为hadoop用户在HDFS中创建用户目录“/user/hadoop”</h3><h3 id="（2）接着在HDFS的目录“-user-hadoop”下，创建test文件夹，并查看文件列表"><a href="#（2）接着在HDFS的目录“-user-hadoop”下，创建test文件夹，并查看文件列表" class="headerlink" title="（2）接着在HDFS的目录“/user/hadoop”下，创建test文件夹，并查看文件列表"></a>（2）接着在HDFS的目录“/user/hadoop”下，创建test文件夹，并查看文件列表</h3><p>这里先切换到用户bigdata下再进行操作</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151937545.jpg" alt="img-202211151937545"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151941156.jpg" alt="img-202211151941156"></p><h3 id="（3）将Linux系统本地的“～-bashrc”文件上传到HDFS的test文件夹中，并查看test"><a href="#（3）将Linux系统本地的“～-bashrc”文件上传到HDFS的test文件夹中，并查看test" class="headerlink" title="（3）将Linux系统本地的“～/.bashrc”文件上传到HDFS的test文件夹中，并查看test"></a>（3）将Linux系统本地的“～/.bashrc”文件上传到HDFS的test文件夹中，并查看test</h3><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151943507.jpg" alt="img-202211151943507"></p><h3 id="（4）将HDFS文件夹test复制到Linux系统本地文件系统的“-usr-local-hadoop”目录下"><a href="#（4）将HDFS文件夹test复制到Linux系统本地文件系统的“-usr-local-hadoop”目录下" class="headerlink" title="（4）将HDFS文件夹test复制到Linux系统本地文件系统的“/usr/local/hadoop”目录下"></a>（4）将HDFS文件夹test复制到Linux系统本地文件系统的“/usr/local/hadoop”目录下</h3><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211151943207.jpg" alt="img-202211151943207"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据原理实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL案例3 MySQL实验(二)数据库查询</title>
      <link href="/posts/a74d.html"/>
      <url>/posts/a74d.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL案例3-MySQL实验-二-数据库查询"><a href="#MySQL案例3-MySQL实验-二-数据库查询" class="headerlink" title="MySQL案例3 MySQL实验(二)数据库查询"></a>MySQL案例3 MySQL实验(二)数据库查询</h1><h4 id="考核内容及实验目的："><a href="#考核内容及实验目的：" class="headerlink" title="考核内容及实验目的："></a>考核内容及实验目的：</h4><h4 id="使用SQL语句进行查询操作，掌握单表查询、多表查询及嵌套查询操作。"><a href="#使用SQL语句进行查询操作，掌握单表查询、多表查询及嵌套查询操作。" class="headerlink" title="使用SQL语句进行查询操作，掌握单表查询、多表查询及嵌套查询操作。"></a>使用SQL语句进行查询操作，掌握单表查询、多表查询及嵌套查询操作。</h4><h2 id="一、实验描述"><a href="#一、实验描述" class="headerlink" title="一、实验描述"></a>一、实验描述</h2><p>1、导入一个外部数据库文件(world.sql)到Navicat图形化管理软件中,并进行进行单表查询、多表查询及嵌套查询操作。数据库world包含了country、countryLanguag、city三张表，涵盖了全世界的国家、国家语言和城市的相关信息。</p><p>下图是world数据库中的部分表信息</p><ul><li><p>country表</p><p>  <img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210232145728.jpg" alt="Snipaste_2022-10-23_19-41-07"></p></li></ul><ul><li><p>countryLanguage表</p>  <img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210232145724.jpg" alt="Snipaste_2022-10-23_19-41-40" style="zoom:67%;" /></li></ul><ul><li>city表</li></ul><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210232145046.jpg" alt="Snipaste_2022-10-23_19-40-31" style="zoom:67%;" /><p>2、单表查询</p><p>（1）查询全世界使用中文（<code>Language </code>= ‘Chinese’）的国家的个数。</p><p>（2）以你家乡地级市名称为条件，查询显示你家乡地级市的名称和人口（Population）以及所属的省份名称（Disrtict）。注意数据库中个别城市的拼写与拼音有所区别，例如北京是Peking，西安是 Xi´an，陕西是Shaanxi。</p><p>（3）查询新疆（Xinxiang）的各市平均人口。（提示:avg()函数）</p><p>（4）查询显示世界七大洲（continent）的名称和对应各洲所拥有的国家数量（提示:group by），并用降序排序（提示:order by  <code>字段名</code> desc为降序）。</p><p>（5）查询平均国家人口大于一千万的洲（例如亚洲总人数为37亿，国家有51个，除下来平均每个国家人口为七千多万符合条件）的名称和对应该洲的总人口。（提示：avg（）函数、group by 和having字句）。</p><p>3、多表查询</p><p>（1）查询全世界使用中文为官方语言（IsOfficial=’T’ ）的国家名称（不是代码）。</p><p>（2）已知朝鲜名称为North Korea查找朝鲜国家使用的语言。</p><p>4、嵌套查询</p><p>（1）查询北美洲North America人口最多的国家名称和人口数量。</p><p>（2）查询没有一个城市人口超过1000人的国家名称和该国家人口。</p><h2 id="二、上机操作"><a href="#二、上机操作" class="headerlink" title="二、上机操作"></a>二、上机操作</h2><h3 id="0、实验环境"><a href="#0、实验环境" class="headerlink" title="0、实验环境"></a>0、实验环境</h3><ul><li><p>硬件平台：一台笔电，操作系统为Win10pro 64位</p></li><li><p>软件环境：</p><p>  数据库Server版本，8.0.30 MySQL Community Server</p><p>  图形化管理工具，Navicat Premium 15.0.25</p></li></ul><h3 id="1、用到的SQL语句"><a href="#1、用到的SQL语句" class="headerlink" title="1、用到的SQL语句"></a>1、用到的SQL语句</h3><ul><li>单表查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>多表查询<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>嵌套查询<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、完整的SQL代码实现"><a href="#2、完整的SQL代码实现" class="headerlink" title="2、完整的SQL代码实现"></a>2、完整的SQL代码实现</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1、单表查询</span></span><br><span class="line"><span class="comment">-- 查询全世界使用中文的国家的个数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(CountryCode) <span class="keyword">from</span> countrylanguage <span class="keyword">where</span> `<span class="keyword">Language</span>` <span class="operator">=</span> <span class="string">&#x27;Chinese&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询显示你家乡地级市的名称和人口（Population）以及所属的省份名称（Disrtict）</span></span><br><span class="line"><span class="keyword">select</span> Name,Population,District <span class="keyword">from</span> city <span class="keyword">where</span> `Name` <span class="operator">=</span> <span class="string">&#x27;Ankang&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询新疆（Xinxiang）的各市平均人口</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(Population) <span class="keyword">from</span> city <span class="keyword">where</span> District <span class="operator">=</span> <span class="string">&#x27;Xinxiang&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询显示世界七大洲（Continent）的名称和对应各洲所拥有的国家数量，并用降序排序</span></span><br><span class="line"><span class="keyword">select</span> Continent,<span class="built_in">count</span>(Code) <span class="keyword">from</span> country <span class="keyword">group</span> <span class="keyword">by</span> Continent <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(Code) <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询平均国家人口大于一千万的洲的名称和对应该洲的总人口</span></span><br><span class="line"><span class="keyword">select</span> Continent,<span class="built_in">avg</span>(Population),<span class="built_in">sum</span>(Population) <span class="keyword">from</span> country <span class="keyword">group</span> <span class="keyword">by</span> Continent <span class="keyword">having</span> <span class="built_in">avg</span>(Population) <span class="operator">&gt;</span> <span class="number">10000000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、多表查询</span></span><br><span class="line"><span class="comment">-- 查询全世界使用中文为官方语言的国家名称，使用等值连接</span></span><br><span class="line"><span class="keyword">select</span> Name <span class="keyword">from</span> country co,countrylanguage col <span class="keyword">where</span> co.Code <span class="operator">=</span> col.CountryCode <span class="keyword">and</span> `<span class="keyword">Language</span>` <span class="operator">=</span> <span class="string">&#x27;Chinese&#x27;</span> <span class="keyword">and</span> IsOfficial <span class="operator">=</span> <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> Name,<span class="keyword">Language</span> <span class="keyword">from</span> country co,countrylanguage col <span class="keyword">where</span> co.Code <span class="operator">=</span> col.CountryCode <span class="keyword">and</span> `Name` <span class="operator">=</span> <span class="string">&#x27;North Korea&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3、嵌套查询</span></span><br><span class="line"><span class="comment">-- 查询北美洲North America人口最多的国家名称和人口数量</span></span><br><span class="line"><span class="comment">-- 子查询是北美洲最多的人口数，外层查询是子查询对应的国家和人口</span></span><br><span class="line"><span class="comment">-- select max(Population) from country where `Continent` = &#x27;North America&#x27;;</span></span><br><span class="line"><span class="keyword">select</span> Name,Population <span class="keyword">from</span> country <span class="keyword">where</span> Population <span class="operator">=</span> <span class="keyword">any</span> (<span class="keyword">select</span> <span class="built_in">max</span>(Population) <span class="keyword">from</span> country <span class="keyword">where</span> `Continent` <span class="operator">=</span> <span class="string">&#x27;North America&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询没有一个城市人口超过1000人的国家名称和该国家人口</span></span><br><span class="line"><span class="comment">-- 子查询：select distinct city.CountryCode from city where city.`Population` &lt; 1000;</span></span><br><span class="line"><span class="keyword">select</span> Name,Population <span class="keyword">from</span> country <span class="keyword">where</span> country.`Code` <span class="operator">=</span> <span class="keyword">any</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> city.`CountryCode` <span class="keyword">from</span> city <span class="keyword">where</span> city.`Population` <span class="operator">&lt;</span> <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing算法基础课 基础算法1</title>
      <link href="/posts/61475.html"/>
      <url>/posts/61475.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、基础算法"><a href="#一、基础算法" class="headerlink" title="一、基础算法"></a>一、基础算法</h1><h3 id="基础算法内容目录"><a href="#基础算法内容目录" class="headerlink" title="基础算法内容目录"></a>基础算法内容目录</h3><p><strong>排序</strong><br><strong>二分</strong><br><strong>高精度</strong><br><strong>前缀和与差分</strong><br><strong>双指针算法</strong><br><strong>位运算</strong><br><strong>离散化</strong><br><strong>区间合并</strong></p><h3 id="1、排序"><a href="#1、排序" class="headerlink" title="1、排序"></a>1、排序</h3><blockquote><p>快速排序</p></blockquote><ul><li><p>问题描述</p><h4 id="AcWing-785-快速排序"><a href="#AcWing-785-快速排序" class="headerlink" title="AcWing 785. 快速排序"></a>AcWing 785. 快速排序</h4></li></ul><p>给定你一个长度为 n 的整数数列。</p><p>  请你使用快速排序对这个数列按照从小到大进行排序。</p><p>  并将排好序的数列按顺序输出。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入共两行，第一行包含整数 n。</p><p>  第二行包含 n 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>  输出共一行，包含 n 个整数，表示排好序的数列。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>  1≤n≤1000001≤n≤100000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3 1 2 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><ul><li>题解</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100010<span class="comment">//定义数据范围 </span></span></span><br><span class="line"><span class="type">int</span> q[N]; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span><span class="comment">//快速排序模板 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span>;<span class="comment">//判断边界，指针已穿过，此时区间有0或1个数直接退出排序 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = q[(l+r)/<span class="number">2</span>],i = l - <span class="number">1</span>,j = r + <span class="number">1</span>;<span class="comment">//取中间点为分界点，初始化指针指向边界两侧，保证循环时指向正真边界 </span></span><br><span class="line"><span class="keyword">while</span> (i &lt; j)<span class="comment">//调整左右两个区间 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span> i++ ;<span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line"><span class="keyword">do</span> j-- ;<span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line"><span class="keyword">if</span>(i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = q[i];</span><br><span class="line">            q[i] = q[j];</span><br><span class="line">            q[j] = t;</span><br><span class="line">        &#125;<span class="comment">//此时i,j已停下来，交换它们指向的数 </span></span><br><span class="line">&#125;</span><br><span class="line">quick_sort(q,l,j);<span class="comment">//再递归左右两段，直到有序 </span></span><br><span class="line">quick_sort(q,j+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);<span class="comment">//读入排序个数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);<span class="comment">//存入数组q[i] </span></span><br><span class="line">quick_sort(q,<span class="number">0</span>,n<span class="number">-1</span>);<span class="comment">//调用快排，传入数据及左右边界 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>归并排序</p></blockquote><ul><li><p>问题描述</p><h4 id="AcWing-787-归并排序"><a href="#AcWing-787-归并排序" class="headerlink" title="AcWing 787. 归并排序"></a>AcWing 787. 归并排序</h4><p>给定你一个长度为 nn 的整数数列。</p><p>请你使用归并排序对这个数列按照从小到大进行排序。</p><p>并将排好序的数列按顺序输出。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入共两行，第一行包含整数 nn。</p><p>第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共一行，包含 nn 个整数，表示排好序的数列。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤1000001≤n≤100000</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3 1 2 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure></li></ul><ul><li>题解<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100010</span></span><br><span class="line"><span class="type">int</span> q[N],temp[N];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span><span class="comment">//归并排序模板 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span>;<span class="comment">//当前区间有0或1个数，退出排序 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mid = (l + r)/<span class="number">2</span>;<span class="comment">//取区间中点 </span></span><br><span class="line"></span><br><span class="line">merge_sort(q,l,mid),merge_sort(q,mid+<span class="number">1</span>,r);<span class="comment">//递归排序左右两边 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>,i = l,j = mid + <span class="number">1</span>;<span class="comment">//初始化左右起点i,j </span></span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i] &lt;= q[j]) temp[k++] = q[i++];<span class="comment">//每次把小的数存入辅助数组temp </span></span><br><span class="line"><span class="keyword">else</span> temp[k++] = q[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid) temp[k++] = q[i++];<span class="comment">//左边没循环完时，直接复制给temp </span></span><br><span class="line"><span class="keyword">while</span>(j &lt;= r) temp[k++] = q[j++];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = l,j = <span class="number">0</span>;i &lt;= r;i++,j++) q[i] = temp[j];<span class="comment">//这里取最后一次排好序的temp值，把辅助数组存回原数组 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line"></span><br><span class="line">merge_sort(q,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、二分"><a href="#2、二分" class="headerlink" title="2、二分"></a>2、二分</h3><blockquote><p>整数二分算法</p></blockquote><ul><li><p>问题描述</p><h4 id="AcWing-789-数的范围"><a href="#AcWing-789-数的范围" class="headerlink" title="AcWing 789. 数的范围"></a>AcWing 789. 数的范围</h4><p>  给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。</p><p>  对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。</p><p>  如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>  第一行包含整数 n 和 q，表示数组长度和询问个数。</p><p>  第二行包含 n 个整数（均在 1∼100001∼10000 范围内），表示完整数组。</p><p>  接下来 q 行，每行包含一个整数 k，表示一个询问元素。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>  共 qq 行，每行包含两个整数，表示所求元素的起始位置和终止位置。</p><p>  如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>  1≤n≤1000001≤n≤100000<br>  1≤q≤100001≤q≤10000<br>  1≤k≤100001≤k≤10000</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6 3</span><br><span class="line">1 2 2 3 3 4</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">5 5</span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure></li></ul><ul><li>题解<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100010</span></span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid] &gt;= x) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[l] != x)   <span class="built_in">printf</span>(<span class="string">&quot;-1 -1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,l);</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>,r = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> mid = (l + r + <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(a[mid] &lt;= x) l = mid;</span><br><span class="line">                <span class="keyword">else</span> r = mid <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d \n&quot;</span>,l);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>浮点数二分算法</p></blockquote><ul><li><p>问题描述</p><h4 id="AcWing-790-数的三次方根"><a href="#AcWing-790-数的三次方根" class="headerlink" title="AcWing 790. 数的三次方根"></a>AcWing 790. 数的三次方根</h4><p>  给定一个浮点数 n，求它的三次方根。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>  共一行，包含一个浮点数 n。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>  共一行，包含一个浮点数，表示问题的解。</p><p>  注意，结果保留 6 位小数。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>  −10000≤n≤10000−10000≤n≤10000</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1000.00</span><br></pre></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.000000</span><br></pre></td></tr></table></figure></li></ul><ul><li>题解<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> AcWing算法基础课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> AcWing </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL案例2 MySQL实验(一)数据库定义与操作</title>
      <link href="/posts/28384.html"/>
      <url>/posts/28384.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL案例2-MySQL实验-一-数据库定义与操作"><a href="#MySQL案例2-MySQL实验-一-数据库定义与操作" class="headerlink" title="MySQL案例2 MySQL实验(一)数据库定义与操作"></a>MySQL案例2 MySQL实验(一)数据库定义与操作</h1><h4 id="考核内容及实验目的："><a href="#考核内容及实验目的：" class="headerlink" title="考核内容及实验目的："></a>考核内容及实验目的：</h4><h4 id="使用SQL语句创建、修改、删除数据库及基本表。掌握表级、列级完整性约束。"><a href="#使用SQL语句创建、修改、删除数据库及基本表。掌握表级、列级完整性约束。" class="headerlink" title="使用SQL语句创建、修改、删除数据库及基本表。掌握表级、列级完整性约束。"></a>使用SQL语句创建、修改、删除数据库及基本表。掌握表级、列级完整性约束。</h4><h2 id="一、实验描述"><a href="#一、实验描述" class="headerlink" title="一、实验描述"></a>一、实验描述</h2><p>1、创建数据库hdbase，并创建三张表，分别是country、countryLanguage、city。</p><p>表信息如下：</p><ul><li>country表</li></ul><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210141733916.png" alt="img_202210141733916" style="zoom: 67%;" /><ul><li>countryLanguage表</li></ul><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210141733490.png" alt="img_202210141733490" style="zoom:67%;" /><ul><li>city表</li></ul><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210141733282.png" alt="img_202210141733282" style="zoom:67%;" /><p>2、定义表中的主码、外键、约束、数据类型。</p><p>（1）country表主码为Code，countryLanguage表中主码为countryCode、Language，city表主码为ID。<br>（2）countryLanguage表和city表，其表中的CountryCode字段都是country表中的Code字段的外键。<br>（3）country表和city表的Name字段列级约束均为非空、唯一。<br>（4）CountryLanguage中isOffice字段采用枚举类型，要求：isOffice enum(‘T’,’F’)。</p><p>3、对表中数据进行更新操作。</p><p>（1）修改city表中Population字段属性为bigint、not null。<br>（2）删除表country中的Surfacearea字段。<br>（3）插入Visit字段到表city中，枚举类型enum，Y代表去过，N代表没去过。默认值为N.<br>（4）删除countryLanguage表中的外键约束。<br>（5）给countryLanguage表Language字段加普通索引。</p><h2 id="二、上机操作"><a href="#二、上机操作" class="headerlink" title="二、上机操作"></a>二、上机操作</h2><h3 id="0、实验环境"><a href="#0、实验环境" class="headerlink" title="0、实验环境"></a>0、实验环境</h3><ul><li><p>硬件平台：一台笔电，操作系统为Win10pro 64位</p></li><li><p>软件环境：</p><p>  数据库Server版本，8.0.30 MySQL Community Server</p><p>  图形化管理工具，Navicat Premium 15.0.25</p></li></ul><h3 id="1、用到的SQL语句"><a href="#1、用到的SQL语句" class="headerlink" title="1、用到的SQL语句"></a>1、用到的SQL语句</h3><ul><li>创建数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库hdbase</span></span><br><span class="line"><span class="keyword">create</span> database hdbase;</span><br></pre></td></tr></table></figure><ul><li>创建三张表，并定义约束<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表country,countryLanguage,city</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `hdbase`.`country`(</span><br><span class="line">    Code <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    Name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    Continent <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    Surfacearea <span class="keyword">double</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">primary</span> key(Code)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `hdbase`.`countryLanguage`(</span><br><span class="line">    CountryCode <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">Language</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    IsOffical enum(<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;F&#x27;</span>) <span class="keyword">not</span> <span class="keyword">null</span>, <span class="comment">-- 字段采用枚举类型,enum(&#x27;T&#x27;,&#x27;F&#x27;)</span></span><br><span class="line">    Percentage <span class="keyword">double</span>(<span class="number">3</span>,<span class="number">1</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line">    <span class="keyword">constraint</span> fk_countryLanguage <span class="keyword">foreign</span> key(CountryCode) <span class="keyword">references</span> country(Code), <span class="comment">-- 定义外键约束,并自定义约束名</span></span><br><span class="line">    <span class="keyword">primary</span> key(CountryCode,<span class="keyword">Language</span>) <span class="comment">-- 联合主键</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `hdbase`.`city`(</span><br><span class="line">    ID <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    Name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    CountryCode <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    District <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    Population <span class="type">int</span> unsigned,</span><br><span class="line">    <span class="keyword">constraint</span> fk_city <span class="keyword">foreign</span> key(CountryCode) <span class="keyword">references</span> country(Code), <span class="comment">-- 定义外键约束</span></span><br><span class="line">    <span class="keyword">primary</span> key(ID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><ul><li>批量插入数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对三张表中插入部分数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> country (Code,Name,Continent,Surfacearea) <span class="keyword">values</span> (<span class="string">&#x27;AUS&#x27;</span>,<span class="string">&#x27;Australia&#x27;</span>,<span class="string">&#x27;Oceania&#x27;</span>,<span class="string">&#x27;7741220.00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;China&#x27;</span>,<span class="string">&#x27;Asia&#x27;</span>,<span class="string">&#x27;9572900.00&#x27;</span>),(<span class="string">&#x27;DEU&#x27;</span>,<span class="string">&#x27;Germany&#x27;</span>,<span class="string">&#x27;Europe&#x27;</span>,<span class="string">&#x27;357022.00&#x27;</span>),(<span class="string">&#x27;USA&#x27;</span>,<span class="string">&#x27;United States&#x27;</span>,<span class="string">&#x27;North America&#x27;</span>,<span class="string">&#x27;9363520.00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> countryLanguage (CountryCode,<span class="keyword">Language</span>, IsOffical,Percentage) <span class="keyword">values</span> (<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;Chinese&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;92.0&#x27;</span>),(<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;Tibetan&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;0.4&#x27;</span>),(<span class="string">&#x27;USA&#x27;</span>,<span class="string">&#x27;English&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;98&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city (ID,Name,CountryCode,District,Population) <span class="keyword">values</span>  (<span class="string">&#x27;1901&#x27;</span>,<span class="string">&#x27;Xi`an&#x27;</span>,<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;Shaanxi&#x27;</span>,<span class="string">&#x27;2761400&#x27;</span>),(<span class="string">&#x27;1990&#x27;</span>,<span class="string">&#x27;Xianyang&#x27;</span>,<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;Shaanxi&#x27;</span>,<span class="string">&#x27;352125&#x27;</span>),(<span class="string">&#x27;1996&#x27;</span>,<span class="string">&#x27;Baoji&#x27;</span>,<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;Shaanxi&#x27;</span>,<span class="string">&#x27;337765&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li>数据更新操作<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--（1）修改city表中Population字段属性为bigint、not null，即修改列属性</span></span><br><span class="line"><span class="comment">-- 给city表修改列属性</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> city modify Population <span class="type">bigint</span>;</span><br><span class="line"><span class="comment">-- 添加非空属性</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> city modify <span class="keyword">column</span> Population <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--（2）删除country表中的Surfacearea字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> country dorp Surfacearea;</span><br><span class="line"></span><br><span class="line"><span class="comment">--（3）插入Visit新字段到city表中，枚举类型enum，Y代表去过，N代表没去过，默认值为N</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> city <span class="keyword">add</span> (Visit enum(<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;N&#x27;</span>) <span class="keyword">default</span> <span class="string">&#x27;N&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--（4）删除countryLanguage表中的外键约束</span></span><br><span class="line"><span class="comment">-- 先要知道countryLanguage表中的外键约束名,在前面创建表时我定义外键约束名为fk_countryLanguage</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> countryLanguage <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_countryLanguage;</span><br><span class="line"></span><br><span class="line"><span class="comment">--（5）给countryLanguage表的Language字段加普通索引</span></span><br><span class="line"><span class="comment">-- 给表中字段添加普通索引的语法：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">add</span> index index_name (<span class="keyword">column</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> countryLanguage <span class="keyword">add</span> index index_Language(<span class="keyword">Language</span>);</span><br></pre></td></tr></table></figure><h3 id="2、完整的SQL代码实现"><a href="#2、完整的SQL代码实现" class="headerlink" title="2、完整的SQL代码实现"></a>2、完整的SQL代码实现</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 一、创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database hdbase;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 二、创建三张表,并定义约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `hdbase`.`country`(</span><br><span class="line">Code <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">Name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">Continent <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">Surfacearea <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">primary</span> key(Code)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `hdbase`.`countryLanguage`(</span><br><span class="line">CountryCode <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">Language</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">isOffical enum(<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;F&#x27;</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">Percentage <span class="keyword">double</span>(<span class="number">3</span>,<span class="number">1</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">constraint</span> fk_countryLanguage <span class="keyword">foreign</span> key (CountryCode) <span class="keyword">references</span> country(Code),</span><br><span class="line"><span class="keyword">primary</span> key(CountryCode,<span class="keyword">Language</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `hdbase`.`city`(</span><br><span class="line">ID <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">Name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">CountryCode <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">District <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">Population <span class="type">int</span> unsigned <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">constraint</span> fk_city <span class="keyword">foreign</span> key (CountryCode) <span class="keyword">references</span> country(Code),</span><br><span class="line"><span class="keyword">primary</span> key(ID)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 三、批量插入数据 </span></span><br><span class="line"><span class="comment">-- 国家表</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> country (Code,Name,Continent,Surfacearea) <span class="keyword">values</span> (<span class="string">&#x27;AUS&#x27;</span>,<span class="string">&#x27;Australia&#x27;</span>,<span class="string">&#x27;Oceania&#x27;</span>,<span class="string">&#x27;7741220.00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;China&#x27;</span>,<span class="string">&#x27;Asia&#x27;</span>,<span class="string">&#x27;9572900.00&#x27;</span>),(<span class="string">&#x27;DEU&#x27;</span>,<span class="string">&#x27;Germany&#x27;</span>,<span class="string">&#x27;Europe&#x27;</span>,<span class="string">&#x27;357022.00&#x27;</span>),(<span class="string">&#x27;USA&#x27;</span>,<span class="string">&#x27;United States&#x27;</span>,<span class="string">&#x27;North America&#x27;</span>,<span class="string">&#x27;9363520.00&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> country; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 国家语言表</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> countryLanguage (CountryCode,<span class="keyword">Language</span>,isOffical,Percentage) <span class="keyword">values</span> (<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;Chinese&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;92.0&#x27;</span>),(<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;Tibetan&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;0.4&#x27;</span>),(<span class="string">&#x27;USA&#x27;</span>,<span class="string">&#x27;English&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;98&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> countryLanguage; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 城市表</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city (ID,Name,CountryCode,District,Population) <span class="keyword">values</span> (<span class="string">&#x27;1901&#x27;</span>,<span class="string">&#x27;Xi`an&#x27;</span>,<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;Shaanxi&#x27;</span>,<span class="string">&#x27;2761400&#x27;</span>),(<span class="string">&#x27;1990&#x27;</span>,<span class="string">&#x27;Xianyang&#x27;</span>,<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;Shaanxi&#x27;</span>,<span class="string">&#x27;352125&#x27;</span>),(<span class="string">&#x27;1996&#x27;</span>,<span class="string">&#x27;Baoji&#x27;</span>,<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;Shaanxi&#x27;</span>,<span class="string">&#x27;337765&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 四、修改表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给city表修改列属性</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> city modify Population <span class="type">bigint</span>;</span><br><span class="line"><span class="comment">-- 添加非空属性</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> city modify <span class="keyword">column</span> Population <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">desc</span> city;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除列（字段）</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> country <span class="keyword">drop</span> Surfacearea;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> country; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入新字段到city表</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> city <span class="keyword">add</span> (Visit enum(<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;N&#x27;</span>)  <span class="keyword">default</span> <span class="string">&#x27;Y&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">desc</span> city;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表中的外键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> countryLanguage <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_countryLanguage;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加普通索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> countryLanguage <span class="keyword">add</span> index index_name(<span class="keyword">Language</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL案例1 MySQL的简单应用及用Java操作</title>
      <link href="/posts/3494.html"/>
      <url>/posts/3494.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL案例1-MySQL的简单应用及用Java操作"><a href="#MySQL案例1-MySQL的简单应用及用Java操作" class="headerlink" title="MySQL案例1 MySQL的简单应用及用Java操作"></a>MySQL案例1 MySQL的简单应用及用Java操作</h1><h2 id="一、具体案例描述"><a href="#一、具体案例描述" class="headerlink" title="一、具体案例描述"></a>一、具体案例描述</h2><p>MySQL数据库操作：</p><p>学生表student信息如下，</p><table><thead><tr><th>Name</th><th>English</th><th>Math</th><th>Computer</th></tr></thead><tbody><tr><td>zhangsan</td><td>69</td><td>86</td><td>77</td></tr><tr><td>lisi</td><td>55</td><td>100</td><td>88</td></tr></tbody></table><ul><li><p>根据上面给出的student表，在MySQL数据库中完成以下操作：</p><p>  （1）在MySQL中创建student表，并录入数据。</p><p>  （2）用SQL语句输出student表中的所有记录。</p><p>  （3）查询zhangsan的Computer成绩。</p><p>  （4）修改lisi的Math成绩，改为95。</p></li></ul><ul><li><p>根据上面已经设计出的student表，使用MySQL的Java客户端编程实现以下操作：</p><p>  （1）向student表中添加如下所示的一条记录。</p><table><thead><tr><th>Name</th><th>English</th><th>Math</th><th>Computer</th></tr></thead><tbody><tr><td>scofield</td><td>45</td><td>89</td><td>100</td></tr></tbody></table><p>  （2）获取scofield的English成绩信息。</p></li></ul><h2 id="二、上机操作"><a href="#二、上机操作" class="headerlink" title="二、上机操作"></a>二、上机操作</h2><h3 id="0、实验环境"><a href="#0、实验环境" class="headerlink" title="0、实验环境"></a>0、实验环境</h3><ul><li><p>硬件平台：一台笔电，操作系统为Win10pro 64位</p></li><li><p>软件环境：</p><p>  数据库Server版本，8.0.30 MySQL Community Server</p><p>  图形化管理工具，Navicat Premium 15.0.25</p><p>  Java开发工具，IntelliJ IDEA 2020.1</p><p>  Jdk版本，jdk1.8.0_221</p></li></ul><h3 id="1、要用的SQL语句"><a href="#1、要用的SQL语句" class="headerlink" title="1、要用的SQL语句"></a>1、要用的SQL语句</h3><p>​    (创建过程可用navicat可视化软件来完成操作，这里为了便于学习全部使用SQL语句)</p><ul><li>创建数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 先创建一个学生集合的数据库</span></span><br><span class="line"><span class="keyword">create</span> database studentdb;</span><br></pre></td></tr></table></figure><ul><li>创建表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="comment">-- 整型数据&quot;tinyint unsigned&quot;的取值范围为0~255，用它来表示学生成绩</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `studentdb`.`student`(</span><br><span class="line">Name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,<span class="comment">--成绩单信息定义为非空约束</span></span><br><span class="line">    English tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    Math tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">Computer tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 再查看一下表结构</span></span><br><span class="line">use studentdb;</span><br><span class="line"><span class="keyword">desc</span> student;</span><br></pre></td></tr></table></figure><p>用navicat刷新一下数据库，发现新增了数据库studentdb和student表<br><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140922357.jpg" alt="img_202210140922357"></p><ul><li><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 批量插入学生成绩</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `student` (Name,English,Math,Computer) <span class="keyword">values</span> (<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;69&#x27;</span>,<span class="string">&#x27;86&#x27;</span>,<span class="string">&#x27;77&#x27;</span>), (<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;55&#x27;</span>,<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;88&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>查询表内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 输出student表中的所有记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></li></ul><p>查询结果如下<br><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140924365.jpg" alt="img_202210140924365"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按条件查询数据</span></span><br><span class="line"><span class="comment">-- 查询zhangsan的Computer成绩</span></span><br><span class="line"><span class="keyword">select</span> Name,Computer <span class="keyword">from</span> student <span class="keyword">where</span> Name <span class="operator">=</span> <span class="string">&#x27;zhangsan&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查询结果如下<br><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140925302.jpg" alt="img_202210140925302"></p><ul><li>修改数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改lisi的Math成绩，改为95</span></span><br><span class="line"><span class="keyword">update</span> `student` <span class="keyword">set</span> Math <span class="operator">=</span> <span class="number">95</span> <span class="keyword">where</span> Name <span class="operator">=</span> <span class="string">&#x27;lisi&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><p>查询到修改结果如下，修改成功<img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140925304.jpg" alt="img_202210140925304"></p><p>在数据库中刷新，student表中信息也同步修改了</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140925310.jpg" alt="img_202210140925310"></p><h3 id="2、Java操作MySQL数据库"><a href="#2、Java操作MySQL数据库" class="headerlink" title="2、Java操作MySQL数据库"></a>2、Java操作MySQL数据库</h3><h4 id="（1）使用-JDBC-技术连接-MySQL-数据库"><a href="#（1）使用-JDBC-技术连接-MySQL-数据库" class="headerlink" title="（1）使用 JDBC 技术连接 MySQL 数据库"></a>（1）使用 JDBC 技术连接 MySQL 数据库</h4><p>这里用<a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a>开发工具新建一个maven的工程连接MySQL,新建成功后首先配置pom.xml文件</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140926388.jpg" alt="img_202210140926388"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140926393.jpg" alt="img_202210140926393"></p><p>1.找MySQL数据库对应的驱动依赖文件</p><p>进入<a href="https://mvnrepository.com/">maven</a>仓库的官网：<a href="https://mvnrepository.com/%EF%BC%8C%E6%90%9C%E7%B4%A2mysql%E6%8E%A5%E7%9D%80%E7%82%B9%E5%87%BB%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C">https://mvnrepository.com/，搜索mysql接着点击第一个搜索结果</a></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140927806.jpg" alt="img_202210140927806"></p><p>选择自己对应的mysql版本，复制下方的maven依赖代码</p><p>不知道自己MySQL版本的可以用DOS命令查看，我的是mysql 8.0.30版本</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140928892.jpg" alt="img_202210140928892"></p><p>选择自己安装的mysql版本<img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140929442.jpg" alt="img_202210140929442"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140929445.jpg" alt="img_202210140929445"></p><p>这里我自己用的是最新的mysql 8.0.30版本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.30&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>将复制的依赖文件粘贴到pom.xml配置文件中，注意前后要加上<dependencies>和</dependencies>，修改完后该界面的左上角会出现一个刷新按钮，点击刷新，联网状态下IDEA工具会自动帮你下载对应的驱动包</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140929816.jpg" alt="img_202210140929816"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140929823.jpg" alt="img_202210140929823"></p><p>上面的仓库依赖配置好后，就可以进入正式的编程开发了</p><h4 id="（2）具体代码实现"><a href="#（2）具体代码实现" class="headerlink" title="（2）具体代码实现"></a>（2）具体代码实现</h4><p>新建一个Java文件，连接MySQL数据库并进行操作的基本过程如下，</p><p>step1.加载驱动</p><p>注意MySQL 8.0 以上版本的数据库连接要使用：<code>com.mysql.cj.jdbc.Driver</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载JDBC驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure><p>step2.定义用户信息和URL参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义用户信息和URL参数，连接MySQL用</span></span><br><span class="line"><span class="comment">//studentdb是要连接的数据库，需要提前创建好，且student表已包含两条成绩记录</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/studentdb&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br></pre></td></tr></table></figure><p>step3.连接数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接数据库，使用驱动管理类；connection就表示数据库</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br></pre></td></tr></table></figure><p>上面的3步是对数据库连接的基本条件，不同的是以下几步</p><p>step4.创建一个SQL语句对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个SQL语句对象，并用statement来接收</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br></pre></td></tr></table></figure><p>step5.定义SQL语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义SQL修改语句，插入一条新数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;insert into `student` (Name,English,Math,Computer) values (&#x27;scofield&#x27;,&#x27;45&#x27;,&#x27;89&#x27;,&#x27;100&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure><p>step6.查询执行SQL语句后的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行查询SQL语句，查看返回结果</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql2);</span><br></pre></td></tr></table></figure><p>step7.释放连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭数据库连接</span></span><br><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><ul><li><p>向student表中添加一条记录</p><p>  这里主要用到的SQL代码如下，</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义了SQL修改语句，插入一条新数据，并返回查询结果</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;insert into `student`(Name,English,Math,Computer) values (&#x27;scofield&#x27;,&#x27;45&#x27;,&#x27;89&#x27;,&#x27;100&#x27;)&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;select * from student&quot;</span>;</span><br></pre></td></tr></table></figure><p>控制台返回的结果：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140930818.jpg" alt="img_202210140930818"></p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1.加载JDBC驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.定义用户信息和URL参数，连接MySQL用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/studentdb&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="comment">//3.连接数据库，使用驱动管理类；connection就表示数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断一下数据库连接状态</span></span><br><span class="line">        <span class="keyword">if</span>(connection == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接失败！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接成功！&quot;</span>);</span><br><span class="line">            <span class="comment">//4.创建一个SQL语句对象，并用statement来接收</span></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">            <span class="comment">//5.定义SQL修改语句，插入一条新数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;insert into `student` (Name,English,Math,Computer) values (&#x27;scofield&#x27;,&#x27;45&#x27;,&#x27;89&#x27;,&#x27;100&#x27;)&quot;</span>;</span><br><span class="line">            <span class="comment">//判断数据库是否修改成功，根据受影响的行数 &gt;= 1，即修改成功</span></span><br><span class="line">            <span class="keyword">if</span>(statement.executeUpdate(sql1) &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;数据插入成功！&quot;</span>);</span><br><span class="line">                <span class="comment">//6.执行查询SQL语句，查看返回结果</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">                <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql2);</span><br><span class="line">                System.out.println(<span class="string">&quot;student表中数据如下：&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Name&quot;</span>+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;English&quot;</span>+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;Math &quot;</span>+<span class="string">&quot;Computer&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                    System.out.print(resultSet.getString(<span class="string">&quot;Name&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                    System.out.print(resultSet.getInt(<span class="string">&quot;English&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                    System.out.print(resultSet.getInt(<span class="string">&quot;Math&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                    System.out.println(resultSet.getInt(<span class="string">&quot;Computer&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//7.关闭数据库连接</span></span><br><span class="line">                resultSet.close();</span><br><span class="line">                statement.close();</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;数据插入失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>获取scofield的English成绩信息</p><p>  数据库连接的前3步操作一样，这里需要更改查询语句，并返回查询结果。</p><p>  这里主要用到的SQL代码如下，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>定义<span class="keyword">SQL</span>查询语句，查询scofield的English成绩</span><br><span class="line">String <span class="keyword">sql</span> <span class="operator">=</span> &quot; select Name,English from student where Name = &#x27;scofield&#x27;&quot;;</span><br></pre></td></tr></table></figure></li></ul><p>控制台返回的结果：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140931911.jpg" alt="img_202210140931911"></p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectResults</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1.加载JDBC驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.定义用户信息和URL参数，连接MySQL用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/studentdb&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="comment">//3.连接数据库，使用驱动管理类；connection就表示数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断一下数据库连接状态</span></span><br><span class="line">        <span class="keyword">if</span>(connection == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接失败！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接成功！&quot;</span>);</span><br><span class="line">            <span class="comment">//4.创建一个SQL语句对象，并用statement来接收</span></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">            <span class="comment">//5.定义SQL查询语句，查询scofield的English成绩</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot; select Name,English from student where Name = &#x27;scofield&#x27;&quot;</span>;</span><br><span class="line">            <span class="comment">//判断数据库是否查询成功，当返回结果不为空时，即查询成功</span></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">if</span>(resultSet != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成绩查询成功！&quot;</span>);</span><br><span class="line">                <span class="comment">//6.执行查询SQL语句，查看返回结果</span></span><br><span class="line">                System.out.println(<span class="string">&quot;student表中查询结果如下：&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Name&quot;</span>+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;English&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                    System.out.print(resultSet.getString(<span class="string">&quot;Name&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                    System.out.print(resultSet.getInt(<span class="string">&quot;English&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//7.关闭数据库连接</span></span><br><span class="line">                resultSet.close();</span><br><span class="line">                statement.close();</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成绩查询失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、遇到的问题及解决方案"><a href="#三、遇到的问题及解决方案" class="headerlink" title="三、遇到的问题及解决方案"></a>三、遇到的问题及解决方案</h2><h3 id="1、找MySQL连接Java的驱动包"><a href="#1、找MySQL连接Java的驱动包" class="headerlink" title="1、找MySQL连接Java的驱动包"></a>1、找MySQL连接Java的驱动包</h3><ul><li><p>问题描述</p><p>  参考网络上绝大部分Java操作MySQL的教程，都是使用jar驱动包来操作。</p><p>  操作教程可参考<a href="https://www.runoob.com/java/java-mysql-connect.html">菜鸟教程</a>上的Java连接MySQL的操作，下载好驱动包后，用添加库的方式导入到对应项目中。最新版下载地址为：<a href="http://dev.mysql.com/downloads/connector/j/%EF%BC%8C%E8%A7%A3%E5%8E%8B%E5%90%8E%E5%BE%97%E5%88%B0">http://dev.mysql.com/downloads/connector/j/，解压后得到</a> jar 库文件，然后在对应的项目中导入该库文件。尴尬的是进入官网后并没有找到对应自己版本的MySQL驱动包，我用的是8.0.30版本，应该是目前最新的版本，官网并未提供该版本的驱动包，这简直让我蚌埠住了。</p><p>  <img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140935328.jpg" alt="img_202210140935328"></p></li></ul><ul><li><p>解决方案</p><p>  幸运的是我之前做过Java操作MongoDB数据库连接的案例，导库方式采用的是maven库的依赖文件(在maven官网也可在里面下载jar包，这里更推荐用依赖文件)。想必Java与数据库连接过程大体类似，索性就看了下相关的Java使用maven项目s来操作MySQL的教程，确实可以这样操作。于是就有了前面新建maven工程的方式来连接MySQL。需要注意的是，添加依赖代码时需要加上<dependencies>和</dependencies>，然后刷新一下maven库，否则会出现报错。</p><p>  <img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140935637.jpg" alt="img_202210140935637"></p></li></ul><h3 id="2、JDBC中——Class-forName-com-mysql-cj-jdbc-Driver"><a href="#2、JDBC中——Class-forName-com-mysql-cj-jdbc-Driver" class="headerlink" title="2、JDBC中——Class.forName(com.mysql.cj.jdbc.Driver)"></a>2、JDBC中——Class.forName(com.mysql.cj.jdbc.Driver)</h3><p>​    <strong>MySQL 8.0 以上版本的数据库连接有所不同：</strong></p><blockquote><p><code>com.mysql.jdbc.Driver</code> 更换为 <code>com.mysql.cj.jdbc.Driver</code>。</p></blockquote><p>​    若使用以下代码，程序可以返回正确结果，但程序会抛出异常。更改为<code>com.mysql.cj.jdbc.Driver</code>可以解决。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>加载JDBC驱动</span><br><span class="line">Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br></pre></td></tr></table></figure><p>​    对Class.forName(com.mysql.cj.jdbc.Driver)的深入理解，可以参考这篇文章：</p><p><a href="http://t.csdn.cn/q37Yi">    jdbc（2）——之Class.forName(com.mysql.cj.jdbc.Driver)理解</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库 第二章 SQL语句</title>
      <link href="/posts/5375.html"/>
      <url>/posts/5375.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库-第二章-SQL语句"><a href="#MySQL数据库-第二章-SQL语句" class="headerlink" title="MySQL数据库 第二章 SQL语句"></a>MySQL数据库 第二章 SQL语句</h1><p>SQL是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p><h2 id="一、SQL语句分类"><a href="#一、SQL语句分类" class="headerlink" title="一、SQL语句分类"></a>一、SQL语句分类</h2><ul><li><p>DCL(Data Control Language)：数据控制语言，用来定义访问权限和安全级别。（不太重要，一般用navicat图形化界面来操作）</p></li><li><p>DDL(Data Definition Language)：数据定义语言，用来定义数据库对象：库、表、列等。功能：创建、删除、修改库和表结构。</p></li><li><p>DML(Data Manipulation Language)：数据操作语言，用来定义数据库记录：增、删、改表记录。</p></li><li><p>DQL(Data Query Language)：数据查询语言，用来查询记录。也是本章学习的重点。（！！！很重要）</p></li></ul><h2 id="二、DCL-数据控制语言-语法学习"><a href="#二、DCL-数据控制语言-语法学习" class="headerlink" title="二、DCL(数据控制语言)语法学习"></a>二、DCL(数据控制语言)语法学习</h2><h3 id="DCL-Data-Control-Language-：数据控制语言，用来定义访问权限和安全级别。DCL语言可用navicat软件来进行图形化界面操作。"><a href="#DCL-Data-Control-Language-：数据控制语言，用来定义访问权限和安全级别。DCL语言可用navicat软件来进行图形化界面操作。" class="headerlink" title="DCL(Data Control Language)：数据控制语言，用来定义访问权限和安全级别。DCL语言可用navicat软件来进行图形化界面操作。"></a>DCL(Data Control Language)：数据控制语言，用来定义访问权限和安全级别。<strong>DCL语言可用navicat软件来进行图形化界面操作。</strong></h3><p><strong>tips:！！！该节内容不是很重要</strong></p><h3 id="1、创建用户、修改密码、删除用户"><a href="#1、创建用户、修改密码、删除用户" class="headerlink" title="1、创建用户、修改密码、删除用户"></a>1、创建用户、修改密码、删除用户</h3><h4 id="（1）创建用户"><a href="#（1）创建用户" class="headerlink" title="（1）创建用户"></a>（1）创建用户</h4><p>创建一个用户，让该用户只能在指定ip地址或任意ip地址上来登录mysql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="comment">-- 指定ip，语法：create user &#x27;用户名&#x27;@&#x27;ip地址&#x27; identified by &#x27;密码&#x27;;</span></span><br><span class="line"><span class="comment">-- 任意ip，ip地址段用‘%’来表示，例如</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="（2）修改密码"><a href="#（2）修改密码" class="headerlink" title="（2）修改密码"></a>（2）修改密码</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改密码，8.0版本的mysql直接赋值新密码就行</span></span><br><span class="line"><span class="comment">-- 注意:若创建用户后直接连接mysql了，修改密码后需用新密码重新连接，再进行后面的测试</span></span><br><span class="line"><span class="comment">-- 语法：set password for &#x27;用户名&#x27;@&#x27;ip地址&#x27; = &#x27;新密码&#x27;;</span></span><br><span class="line"><span class="keyword">set</span> password <span class="keyword">for</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 以上是用sql语句来操作，如果直接修改表，也是可以创建用户和修改密码的，但是要在mysql数据库下的user表修改，改完后需要刷新权限后才能生效，刷新语句如下</span></span><br><span class="line">flush privileges;<span class="comment">-- 在本地数据库下刷新</span></span><br></pre></td></tr></table></figure><h4 id="（3）删除用户"><a href="#（3）删除用户" class="headerlink" title="（3）删除用户"></a>（3）删除用户</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="comment">-- 语法：drop user &#x27;用户名&#x27;@&#x27;ip地址&#x27;;</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="2、给用户授予权限、撤销权限，查看权限"><a href="#2、给用户授予权限、撤销权限，查看权限" class="headerlink" title="2、给用户授予权限、撤销权限，查看权限"></a>2、给用户授予权限、撤销权限，查看权限</h3><p>给【指定用户】在【指定数据库】上赋予【指定权限】，权限有很多，常用的有以下几个：</p><ul><li>create：可以创建数据库</li><li>insert：可以插入数据</li><li>delete：可以删除数据</li><li>select：可以查询数据</li><li>update：可以更新数据</li></ul><h4 id="（1）授权"><a href="#（1）授权" class="headerlink" title="（1）授权"></a>（1）授权</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 授权（包含所有权限或指定权限）</span></span><br><span class="line"><span class="comment">-- 语法 ：grant 权限1,权限2,... on `数据库名`.`某表` to &#x27;用户名&#x27;@&#x27;ip地址&#x27;;</span></span><br><span class="line"><span class="comment">-- 注意：这里数据库名和表名用了撇符号``（按键在键盘左上角,用&#x27;&#x27;单引号也可以），这样写的目的是防止将名称识别成关键字,造成sql语句执行失败</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> `student`.`<span class="keyword">user</span>` <span class="keyword">to</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 授权所有的表，用&quot;*&quot;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> `student`.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 授予指定权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span>,<span class="keyword">insert</span>,<span class="keyword">delete</span>,<span class="keyword">select</span>,<span class="keyword">update</span> <span class="keyword">on</span> `student`.`<span class="keyword">user</span>` <span class="keyword">to</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="（2）撤销权限"><a href="#（2）撤销权限" class="headerlink" title="（2）撤销权限"></a>（2）撤销权限</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 撤销权限（包含所有权限或指定权限）</span></span><br><span class="line"><span class="comment">-- 语法：revoke 权限1,权限2,... on &#x27;数据库名&#x27;.&#x27;某表&#x27; from &#x27;用户名&#x27;@&#x27;ip地址&#x27;;</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> <span class="keyword">on</span> `student`.`<span class="keyword">user</span>` <span class="keyword">from</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">create</span>,<span class="keyword">insert</span>,<span class="keyword">delete</span>,<span class="keyword">select</span>,<span class="keyword">update</span> <span class="keyword">on</span> `student`.`<span class="keyword">user</span>` <span class="keyword">from</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="（3）查看权限"><a href="#（3）查看权限" class="headerlink" title="（3）查看权限"></a>（3）查看权限</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看授权</span></span><br><span class="line"><span class="comment">-- 语法：show grants for 用户名 或 &#x27;用户名&#x27;@&#x27;ip地址&#x27;;</span></span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> ariesfun;</span><br></pre></td></tr></table></figure><h3 id="3、操作实例"><a href="#3、操作实例" class="headerlink" title="3、操作实例"></a>3、操作实例</h3><h4 id="（1）注意事项"><a href="#（1）注意事项" class="headerlink" title="（1）注意事项"></a>（1）注意事项</h4><p>每条语句选中后单独执行，且输出信息为”OK”说明操作成功<br><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140121828.jpg" alt="Snipaste_2022-10-04_16-23-35"></p><p>新建一个test连接测试DCL语言用，先点测试连接，成功后再点击确定<br><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140121829.jpg" alt="Snipaste_2022-10-04_16-18-51"></p><p>查看数据库中表的权限<br><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140121830.jpg" alt="Snipaste_2022-10-04_16-54-44"></p><h4 id="（2）具体的实例操作"><a href="#（2）具体的实例操作" class="headerlink" title="（2）具体的实例操作"></a>（2）具体的实例操作</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 测试用，以下每一行语句按顺序单独执行一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户并更改密码</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> password <span class="keyword">for</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database student;</span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="comment">-- 新建表，为了方便这里先用navicat软件，在本地连接中的student中新建一张user表和一张score表（后面章节会有基本表的定义语句）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 进行权限操作,授权和撤权成对使用</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> `student`.`<span class="keyword">user</span>` <span class="keyword">to</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> <span class="keyword">on</span> `student`.`<span class="keyword">user</span>` <span class="keyword">from</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span>,<span class="keyword">insert</span>,<span class="keyword">delete</span>,<span class="keyword">select</span>,<span class="keyword">update</span> <span class="keyword">on</span> `student`.`<span class="keyword">user</span>` <span class="keyword">to</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> ariesfun;<span class="comment">-- 查看一下授权情况</span></span><br><span class="line"><span class="comment">-- 运行完上面的语句，test连接中的student数据库中又出现了user表</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">create</span>,<span class="keyword">insert</span>,<span class="keyword">delete</span>,<span class="keyword">select</span>,<span class="keyword">update</span> <span class="keyword">on</span> `student`.`<span class="keyword">user</span>` <span class="keyword">from</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> `student`.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> ariesfun;</span><br><span class="line"><span class="comment">-- test连接中的student数据库中又会出现user表和score表两张表</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> <span class="keyword">on</span> `student`.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 最后删除刚创建的用户，再次连接test就会操作失败</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;ariesfun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="三、DDL-数据定义语言"><a href="#三、DDL-数据定义语言" class="headerlink" title="三、DDL(数据定义语言)"></a>三、DDL(数据定义语言)</h2><p>DDL语言主要是用于<strong>定义或改变表（TABLE）结构</strong>，<u>主要的命令有CREATE、ALTER、DROP</u>等</p><h3 id="1、创建表的语法"><a href="#1、创建表的语法" class="headerlink" title="1、创建表的语法"></a>1、创建表的语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 (</span><br><span class="line"></span><br><span class="line">字段名<span class="number">1</span>(即列名) 类型(宽度) 约束条件,</span><br><span class="line"></span><br><span class="line">字段名<span class="number">2</span> 类型(宽度) 约束条件,</span><br><span class="line"></span><br><span class="line">字段名<span class="number">3</span> 类型(宽度) 约束条件,</span><br><span class="line">    </span><br><span class="line">.......</span><br><span class="line">    </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在关系型数据库中，我们需要设定表名、列名，同时还需要指定数据类型（常用的：整型、浮点型、字符串型）。</p><h3 id="2、常用的数据类型"><a href="#2、常用的数据类型" class="headerlink" title="2、常用的数据类型"></a>2、常用的数据类型</h3><blockquote><p><strong>整型</strong></p></blockquote><table><thead><tr><th>MySQL数据类型</th><th>含义（默认有符号）</th></tr></thead><tbody><tr><td>tinyint</td><td>1字节，范围（-128~127）</td></tr><tr><td>smallint</td><td>2字节，范围（-32768~32767）</td></tr><tr><td><u>mediumint</u></td><td><u>3字节</u>，范围（-8388608~8388607）</td></tr><tr><td>int</td><td>4字节，范围（-2147483648~2147483647）</td></tr><tr><td>bigint</td><td>8字节，范围（+-9.22 * 10^18^）</td></tr></tbody></table><p>在整型中我们默认使用的都是【有符号】的，当然了，我们也可以<u>加上unsigned关键字，定义成【无符号】的类型</u>，那么对应的取值范围就会发生改变：</p><p>如：tinyint unsigned的取值范围为0~255，</p><p>宽度n的作用需要配合zerofill进行使用( zerofill指0填充)： 如：int(4) unsigned zerofill  ，查询结果: 0001 0002 1000</p><blockquote><p><strong>浮点型</strong></p></blockquote><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>float(m, d)</td><td>4字节，单精度浮点型，m总长度，d小数位</td></tr><tr><td>double(m, d)</td><td>8字节，双精度浮点型，m总长度，d小数位（可用来表示很大或很小的数）</td></tr><tr><td>decimal(m, d)</td><td>decimal是存储为字符串的浮点数(无误差且精度高，可用来表示余额)，对应Java中的Bigdecimal</td></tr></tbody></table><p>我们用一个例子来判断小括号内参数的含义，针对数据类型为float(5, 3)的列，做了以下试验：</p><ul><li>插入123.45678，最后查询得到的结果为99.999（会取满足条件的最大值）；</li><li>插入12.34567，最后查询结果为12.346（会有四舍五入）；</li></ul><p>所以，在使用浮点型的时候，还是要注意陷阱，要以插入数据库中的实际结果为准。</p><blockquote><p><strong>字符串型</strong></p></blockquote><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>char(n)，n指字符个数</td><td>固定长度，最多255个字节（字符）</td></tr><tr><td>varchar(n)</td><td>可变长度，最大容量65535个字节</td></tr><tr><td>tinytext</td><td>可变长度，最大容量255个字节</td></tr><tr><td>text</td><td>可变长度，最大容量65535个字节</td></tr><tr><td>mediumtext</td><td>可变长度，最大容量2^24^-1个字节，16MB</td></tr><tr><td>longtext</td><td>可变长度，最大容量2^32^-1个字节， 4GB</td></tr></tbody></table><p><strong>（1）char和varchar两类型的区别（这两个也最常用）：</strong></p><ul><li>char类型是【<strong>定长</strong>】的类型，即当定义的是char(10)，输入的是”abc”这三个字符时，它们占的空间一样是10个字符，包括7个空字节。当输入的字符长度超过指定的数时，char会截取超出的字符。而且，当存储char值时，MySQL会自动删除输入字符串末尾的空格。</li><li><strong>char类型适合存储很短的、一般固定长度的字符串。</strong>例如，用char(1)来定义性别；char类型非常适合存储密码的MD5值（将不定长的变为定长的值），因为MD5是一个定长的值。对于非常短的列，char比varchar在存储空间上也更有效率。</li><li><strong>varchar(n)类型用于存储【可变长】的类型，且长度最大为n个字符的可变长度字符数据</strong>。比如varchar(10), 输入abc三个字符，那么实际存储大小为3个字节。除此之外，varchar还需要使用1或2个额外字节记录字符串的长度，如果列的最大长度小于等于255字节（是定义的最长长度，不是实际长度），则使用1个字节表示长度，否则使用2个字节来表示。n表示的是最大的长度。</li><li><u>char类型每次修改的数据长度相同，效率更高；varchar类型每次修改的数据长度不同，效率更低。</u></li></ul><p><strong>（2）varchar和text</strong></p><ul><li><p>text不能设置默认值，varchar可以。</p></li><li><p>text类型，包括（MEDIUMTEXT，LONGTEXT）也受单表 65535 <strong>最大行宽度限制</strong>，所以他支持溢出存储，只会存放前 768 字节在数据页中，而剩余的数据则会存储在溢出段中(磁盘上)。虽然 text 字段会把超过 768 字节的大部分数据溢出存放到硬盘其他空间，看上去是会更加增加磁盘压力。但从处理形态上来讲 varchar 大于 768 字节后，实质上存储和 text 差别不是太大了。因为超长的 varchar 也是会用到溢出存储，读取该行也是要去读硬盘然后加载到内存，基本认为是一样的。</p></li><li><p><u>根据存储的实现：可以考虑用 varchar 替代 text，因为 varchar 存储更弹性，存储数据少的话性能更高</u>。</p></li><li><p>如果存储的数据大于64K，就必须使用到 mediumtext或longtext，因为 varchar 已经存不下了。</p></li><li><p>如果 varchar(255+) 存储大于255字节后，和 text 在存储机制是一样的，性能也相差无几。</p><p>详细解释可参考文章：<a href="http://t.csdn.cn/mrgk1">MySQL 的 varchar 与 text 对比</a></p></li></ul><blockquote><p><strong>日期和时间数据类型</strong></p></blockquote><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>date</td><td>3字节，日期，格式：2022-10-01</td></tr><tr><td>time</td><td>3字节，时间，格式：08:00:00</td></tr><tr><td>datetime</td><td>8字节，日期时间，格式：2022-10-01 08:00:00</td></tr><tr><td>timestamp</td><td>4字节，自动存储记录修改的时间</td></tr><tr><td>year</td><td>1字节，年份</td></tr></tbody></table><h3 id="3、建表约束"><a href="#3、建表约束" class="headerlink" title="3、建表约束"></a>3、建表约束</h3><p>目前我们已经学会了如何创建表，但是一张表不止有一列，且数据库中的表不止有一个，建表约束说的就是，我们应该<strong>如何规范表中的数据以及表和表的关系</strong>。</p><h4 id="（1）MySQL约束类型"><a href="#（1）MySQL约束类型" class="headerlink" title="（1）MySQL约束类型"></a>（1）MySQL约束类型</h4><table><thead><tr><th>约束名称</th><th>描述</th></tr></thead><tbody><tr><td>NOT NULL</td><td>非空约束（不是 null）</td></tr><tr><td>UNIQUE</td><td>唯一约束，取值不允许重复</td></tr><tr><td>PRIMARY KEY</td><td>主键约束（主关键字），自带非空、唯一、索引约束属性</td></tr><tr><td>DEFAULT</td><td>默认值（缺省值）</td></tr><tr><td>FOREIGN KEY</td><td>外键约束（外关键字，会用到其他表信息）</td></tr></tbody></table><h4 id="（2）NOT-NULL约束"><a href="#（2）NOT-NULL约束" class="headerlink" title="（2）NOT NULL约束"></a>（2）NOT NULL约束</h4><p>非空约束指的是，如果我们要在这张表中添加数据，<u>设定了非空约束的列必须要赋值，不能为空</u></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 先创建一个书店的数据库</span><br><span class="line">create database bookstore;-- 用database或schema来创建的作用一样</span><br><span class="line">-- 创建作者表</span><br><span class="line">create table `bookstore`.`author`(</span><br><span class="line">    aut_id int, </span><br><span class="line">    aut_name varchar(50) not null,-- 这就是非空约束的定义</span><br><span class="line">gander char(1) default &#x27;男&#x27;,</span><br><span class="line">country varchar(50),</span><br><span class="line">birthday datetime-- 最后不用加逗号</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="（3）UNIQUE约束"><a href="#（3）UNIQUE约束" class="headerlink" title="（3）UNIQUE约束"></a>（3）UNIQUE约束</h4><p>唯一约束指的是，如果我们要在这张表中添加数据，<u>设定了唯一约束的列中的值不能有重复，不能为空</u></p><ul><li>唯一约束，实现方法1（在表的定义最后施加）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建图书表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `bookstore`.`book`(</span><br><span class="line"><span class="comment">-- 或者加上&quot;if not&quot;表示如果不存在就建该表,eg.create table if not `ydlclass`.`book`该语句跟上边语句作用一样</span></span><br><span class="line">book_id <span class="type">int</span> <span class="keyword">primary</span>,</span><br><span class="line">book_name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">bar_code <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">aut_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">foreign</span> key (key_id) <span class="keyword">references</span> author(aut_id)，<span class="comment">-- 外键约束</span></span><br><span class="line">    <span class="keyword">unique</span>(bar_code)   <span class="comment">-- 这就是唯一约束的定义</span></span><br><span class="line">);<span class="comment">-- sql语句单句执行时最后面可不用加&quot;;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>实现方法2（在字段名定义的后面施加）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建图书表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `bookstore`.`book`(</span><br><span class="line">book_id <span class="type">int</span> <span class="keyword">primary</span>,</span><br><span class="line">book_name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">bar_code <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,  <span class="comment">-- 这就是唯一约束的定义</span></span><br><span class="line">aut_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="（4）DEFAULT约束"><a href="#（4）DEFAULT约束" class="headerlink" title="（4）DEFAULT约束"></a>（4）DEFAULT约束</h4><p>默认约束指的是，如果我们要在这张表中添加数据，<u>如果为给设定了默认约束的列赋值，该列会自动填充默认值</u></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建作者表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `bookstore`.`author`(</span><br><span class="line">    aut_id <span class="type">int</span>, </span><br><span class="line">    aut_name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">gander <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span>, <span class="comment">-- 这就是默认约束</span></span><br><span class="line">country <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">birthday datetime</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="（5）PRIMARY-KEY约束"><a href="#（5）PRIMARY-KEY约束" class="headerlink" title="（5）PRIMARY KEY约束"></a>（5）PRIMARY KEY约束</h4><p>主键（PRIMARY KEY）的完整称呼是“主键约束”，是 MySQL中使用最为频繁的约束。一般情况下，为了便于 DBMS 更快的查找到表中的记录，都会在表中设置一个主键。</p><p>主键分为<u>单字段主键和多字段联合主键</u>，本节将分别讲解这两种主键约束的创建、修改和删除。</p><p>使用主键应注意以下几点：</p><ul><li><u>每个表只能定义一个主键。</u></li><li><u>主键值必须唯一标识表中的每一行，且不能为 NULL</u>，即表中不可能存在有相同主键值的两行数据。这是唯一性原则。</li><li><u>一个字段名只能在联合主键字段表中出现一次。</u></li><li>【联合主键】不能包含不必要的多余字段。当把联合主键的某一字段删除后，如果剩下的字段构成的主键仍然满足唯一性原则，那么这个联合主键是不正确的。这是最小化原则。</li></ul><blockquote><p><strong>单个字段作为主键</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建作者表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `bookstore`.`author`(</span><br><span class="line">    aut_id <span class="type">int</span> <span class="keyword">primary</span> key,      <span class="comment">-- 这就是主键约束 </span></span><br><span class="line">    <span class="comment">-- 主键约束也可用&quot;primary key(aud_id)&quot;来定义主键或联合主键，但要放在语句最后</span></span><br><span class="line">    aut_name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">gander <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">country <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">birthday datetime</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p><strong>联合主键：多个字段同时作为主键</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建作者表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `bookstore`.`author`(</span><br><span class="line">`aut_id` <span class="type">int</span> ,</span><br><span class="line">`aut_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">`gander` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">`country` <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">`brithday` datetime,</span><br><span class="line"><span class="keyword">primary</span> key(aut_id,aut_name)   <span class="comment">-- 这就是联合主键</span></span><br><span class="line">);  </span><br></pre></td></tr></table></figure><h4 id="（6）AUTO-INCREMENT约束"><a href="#（6）AUTO-INCREMENT约束" class="headerlink" title="（6）AUTO_INCREMENT约束"></a>（6）AUTO_INCREMENT约束</h4><p><strong>需要配合主键使用</strong>，有个这个约束，我们在向表中插入数据时，不需要额外关心主键的数据，<u>它会自动帮我们维护一个递增的主键</u></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建图书表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `bookstore`.`book`(</span><br><span class="line">book_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,<span class="comment">-- 这就是自动递增</span></span><br><span class="line">book_name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">bar_code <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">aut_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="（7）FOREIGN-KEY约束"><a href="#（7）FOREIGN-KEY约束" class="headerlink" title="（7）FOREIGN KEY约束"></a>（7）FOREIGN KEY约束</h4><p>外键维护的表与表之间的关系，<u>它规定了当前列的数据必须来源于一张其他表的某一列中的主键</u></p><p>外键会产生的效果</p><p><u>1、删除表时，如果不删除引用外键的表，被引用的表不能直接删除</u></p><p><u>2、外键的值必须来源于引用的表的主键字段</u></p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><blockquote><p><strong>FOREIGN KEY (column list) REFERENCES [primary key table] (column list);</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建作者表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `bookstore`.`author`(</span><br><span class="line">    aut_id <span class="type">int</span> <span class="keyword">primary</span> key, </span><br><span class="line">    aut_name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">gander <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">country <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">birthday datetime</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建图书表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `bookstore`.`book`(</span><br><span class="line">book_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">book_name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">bar_code <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">aut_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">foreign</span> key (aut_id) <span class="keyword">references</span> author(aut_id)<span class="comment">-- 这就是外键约束</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="4、对表的修改操作"><a href="#4、对表的修改操作" class="headerlink" title="4、对表的修改操作"></a>4、对表的修改操作</h4><p>查看当前数据库中所有表:<code>SHOW TABLES;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看所有表</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p>查看表结构:<code>DESC 表名;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">desc</span> authors;</span><br></pre></td></tr></table></figure><p><u>修改表有5个操作</u>，但语法前缀都是一样的:<code>ALTER TABLE 表名...</code>（不重要）</p><ul><li><p>添加列（语法）：<code>ALTER TABLE 表名 add (列名 列类型，... ，列名 列类型);</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给author表添加列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> author <span class="keyword">add</span> (hobby <span class="type">varchar</span>(<span class="number">20</span>),address <span class="type">varchar</span>(<span class="number">50</span>));</span><br></pre></td></tr></table></figure></li><li><p>修改列类型： <code>ALTER TABLE 表名 MODIFY 列名 列的新类型;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给author表修改列类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> author modify address <span class="type">varchar</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p>列名称、列类型一起修改：<code>ALTER TABLE 表名 CHANGE 原列名 新列名 列名类型;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 改变列名和属性</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> author change address addr <span class="type">varchar</span>(<span class="number">60</span>);</span><br></pre></td></tr></table></figure></li><li><p>删除列：<code>ALTER TABLE 表名 DROP 列名;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> author <span class="keyword">drop</span> addr;</span><br></pre></td></tr></table></figure></li><li><p>修改表名：<code>ALTER TABLE 表名 RENAME TO 新表名</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> author rename authors;</span><br></pre></td></tr></table></figure></li><li><p>删除表：<code>ALTER TABLE 表名 DROP 列名;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- !!!删除表，需谨慎操作</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> `<span class="keyword">user</span>`;</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、DML-数据操作语言-（！！！很重要）"><a href="#四、DML-数据操作语言-（！！！很重要）" class="headerlink" title="四、DML(数据操作语言)（！！！很重要）"></a>四、DML(数据操作语言)（！！！很重要）</h3><p>该语言用来对表记录进行<strong>操作（增、删、改）</strong>，<u>不包含查询</u>。</p><h4 id="1、插入数据"><a href="#1、插入数据" class="headerlink" title="1、插入数据"></a>1、插入数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `authors` (aut_name,gander,country,birthday,hobby) <span class="keyword">values</span> (<span class="string">&#x27;海伦·凯勒&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;漂亮国&#x27;</span>,<span class="string">&#x27;1960-1-1&#x27;</span>,<span class="string">&#x27;旅游&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `authors` <span class="keyword">values</span> (<span class="string">&#x27;余华&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;1970-1-1&#x27;</span>,<span class="string">&#x27;看书&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ol><li>在数据库中所有的<strong>字符串类型，必须使用单引号</strong>。</li><li>(列名1，列名2，列名3)可省略，表示按照表中的顺序插入。但不建议采取这种写法，因为降低了程序的可读性。</li></ol><p>当然我们还可以批量插入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 批量插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `authors` (aut_name,gander,country,birthday,hobby) <span class="keyword">values</span> (<span class="string">&#x27;海伦·凯勒&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;漂亮国&#x27;</span>,<span class="string">&#x27;1960-1-1&#x27;</span>,<span class="string">&#x27;旅游&#x27;</span>),(<span class="string">&#x27;余华&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;1970-1-1&#x27;</span>,<span class="string">&#x27;看书&#x27;</span>); <span class="comment">-- 可批量插入</span></span><br></pre></td></tr></table></figure><h4 id="2、修改记录"><a href="#2、修改记录" class="headerlink" title="2、修改记录"></a>2、修改记录</h4><p>修改某列的全部值：<code>update 表名 set 列名1=列值1(，列名2=列值2)(, ... );</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改数据</span></span><br><span class="line"><span class="keyword">update</span> `authors` <span class="keyword">set</span> aut_name <span class="operator">=</span> <span class="string">&#x27;鲁迅&#x27;</span>,country<span class="operator">=</span><span class="string">&#x27;中国&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上边的语句会改表中所有的数据全部修改，因此我们可以使用where语句进行限制，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> `authors` <span class="keyword">set</span> aut_name <span class="operator">=</span> <span class="string">&#x27;马云&#x27;</span> <span class="keyword">where</span> aut_id <span class="operator">=</span> <span class="number">5</span>;<span class="comment">-- 限制条件可以是其他逻辑运算</span></span><br></pre></td></tr></table></figure><p>where是一个很关键的关键字，我们可以使用where关键字实现丰富的筛选，他很像我们的if语句，可以使用各种条件运算：</p><p>可使用的逻辑运算符如下：<code>=、!=、&lt;&gt;、&lt;、&gt;、&gt;=、&lt;=、between...and、in(…)、is null、not、or、and</code>，其中in(a,b,… )的用法表示集合，选中限制下的那几条数据。</p><ul><li><code>where aut_id &gt;1</code></li><li><code>where aut_id in (1,3,5) -- 修改指定的三条数据</code></li><li><code>where aut_id between 1 and 4 -- 修改从id从1到4的数据</code></li><li><code>where aut_id &gt;1 and aut_name=&#39;xxx&#39; --多条限制 </code></li><li><code>where aut_name is null -- 修改为空的</code></li><li><code>where aut_name is not null -- 修改不为空的</code> </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 字符串也使用&quot;=&quot;比较，不是&quot;==&quot;也不是&quot;equals&quot;</span></span><br><span class="line"><span class="keyword">update</span> `authors` <span class="keyword">set</span> aut_name <span class="operator">=</span> <span class="string">&#x27;赵四&#x27;</span>,</span><br><span class="line"><span class="comment">-- 使用in关键字</span></span><br><span class="line"><span class="keyword">update</span> `authors` <span class="keyword">set</span> aut_name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>,country<span class="operator">=</span><span class="string">&#x27;中国&#x27;</span> <span class="keyword">where</span> aut_id <span class="keyword">in</span>(<span class="number">5</span>,<span class="number">7</span>); <span class="comment">-- 修改指定的两条数据</span></span><br><span class="line"><span class="comment">-- 限制条件可以是其他任何逻辑运算</span></span><br><span class="line"><span class="keyword">update</span> `authors` <span class="keyword">set</span> aut_name <span class="operator">=</span> <span class="string">&#x27;王五&#x27;</span>,country<span class="operator">=</span><span class="string">&#x27;中国&#x27;</span> <span class="keyword">where</span> gander <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">and</span> country <span class="operator">=</span> <span class="string">&#x27;中国&#x27;</span>;</span><br><span class="line"><span class="comment">-- 使用between...and关键字</span></span><br><span class="line"><span class="keyword">update</span> `authors` <span class="keyword">set</span> aut_name <span class="operator">=</span> <span class="string">&#x27;张伟&#x27;</span>,country<span class="operator">=</span><span class="string">&#x27;中国&#x27;</span> <span class="keyword">where</span> aut_id <span class="keyword">between</span> <span class="number">5</span> <span class="keyword">and</span> <span class="number">7</span>;</span><br><span class="line"><span class="comment">-- 空值使用is null \  is not null</span></span><br><span class="line"><span class="keyword">update</span> `authors` <span class="keyword">set</span> aut_name <span class="operator">=</span> <span class="string">&#x27;王五&#x27;</span>,country<span class="operator">=</span><span class="string">&#x27;中国&#x27;</span> <span class="keyword">where</span> birthday <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h4 id="3、删除数据"><a href="#3、删除数据" class="headerlink" title="3、删除数据"></a>3、删除数据</h4><p>语法：<code>delete from 表名 (where 条件);</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- !!!删除表,删除条件可以是任何的逻辑运算（in,between...）</span><br><span class="line">delete from authors; -- delete是按行删，俗称删库跑路</span><br></pre></td></tr></table></figure><p>不加where条件时会删除表中所有的记录，所以为了防止这种失误操作，很多数据库往往都会有备份。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 删除指定行的数据</span><br><span class="line">delete from author where auth_id = 1;</span><br></pre></td></tr></table></figure><p>还有一个关键字：truncate，truncate是DDL语言(数据定义语言)，操作立即生效，原数据不会放到rollback segment中，不能回滚。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不可随意使用truncate</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> authors; <span class="comment">-- truncate会直接删掉整张表，再重新建表</span></span><br></pre></td></tr></table></figure><ul><li>当表被truncate后，表和索引的所占空间会恢复到初始大小，delete操作不会减少表和索引的所占空间。</li><li>truncate和delete只删除数据，drop则删除整个表（结构和数据）。</li><li>truncate速度快，效率高，可以理解为先把表删除了，再重新建立。</li><li>truncate和delete均不会使表结构及其列、约束、索引等发生改变。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库 第一章 MySQL数据库介绍及环境搭建</title>
      <link href="/posts/11881.html"/>
      <url>/posts/11881.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库-第一章-MySQL数据库介绍及环境搭建"><a href="#MySQL数据库-第一章-MySQL数据库介绍及环境搭建" class="headerlink" title="MySQL数据库 第一章 MySQL数据库介绍及环境搭建"></a>MySQL数据库 第一章 MySQL数据库介绍及环境搭建</h1><h2 id="一、数据库的概念"><a href="#一、数据库的概念" class="headerlink" title="一、数据库的概念"></a>一、数据库的概念</h2><ul><li>数据库是【<strong>按照数据结构来组织、存储和管理数据的仓库</strong>】，<u>是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合</u>。</li><li>数据对于公司来说是最宝贵的财富之一，而程序员的工作就是对数据的管理，包括运算、流转、存储、展示等，数据库的最重要的功能就是【<strong>存储数据</strong>】，绝大部分的数据需要进行持久化，长期保存，而数据库就可以很好的帮助我们完成这个工作。</li></ul><h2 id="二、MySQL介绍"><a href="#二、MySQL介绍" class="headerlink" title="二、MySQL介绍"></a>二、MySQL介绍</h2><ul><li>MySQL是一个【<strong>关系型数据库管理系统</strong>】，由瑞典【MySQL AB】公司开发，属于 【Oracle】旗下产品。MySQL 是最流行的【关系型数据库管理系统】之一，在 【WEB】应用方面，MySQL是最好的 <strong>【RDBMS】</strong> (Relational Database Management System，<u>关系数据库管理系统)</u> 应用软件之一。</li><li>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</li><li>MySQL所使用的 【SQL 语言】是用于访问【数据库】的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，<u>由于其体积小、速度快、总体拥有成本低，尤其是【开放源码】这一特点</u>，一般中小型网站的开发都选择 MySQL 作为网站数据库。</li></ul><h2 id="三、MySQL的安装"><a href="#三、MySQL的安装" class="headerlink" title="三、MySQL的安装"></a>三、MySQL的安装</h2><p>社区版官方下载网站：</p><p><a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140120077.jpg" alt="Snipaste_2022-10-05_15-46-13"></p><p>基本的安装过程如下：</p><p><img src="https://ydlclass.com/doc21xnv/assets/image-20220419111843961.1b721a3e.png" alt="image-20220419111843961"></p><p>下载后我们可以自定义安装：</p><p>选择安装server和两个客户端进行体验：</p><p><img src="https://ydlclass.com/doc21xnv/assets/image-20220421193949698.6e202212.png" alt="image-20220419111843961"></p><p>自己可以体验一下workbench和mysqlsh。</p><h2 id="四、安装navicat"><a href="#四、安装navicat" class="headerlink" title="四、安装navicat"></a>四、安装navicat</h2><p>需要破解：破解过程看视频。</p><h2 id="五、基本概念"><a href="#五、基本概念" class="headerlink" title="五、基本概念"></a>五、基本概念</h2><h3 id="1、数据库"><a href="#1、数据库" class="headerlink" title="1、数据库"></a>1、数据库</h3><p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。在mysql中可以创建多个数据库，一个数据库可以管理很多张表。</p><p>有个很形象的对比，例如execl中的一个execl文件就是一个数据库，一个sheet页就是一张表，表里边可以有所需要的数据：</p><p>查看所有数据库：<code>SHOW DATABASES;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p>我们可以在登陆 MySQL 服务后，使用 <strong>create</strong> 命令创建数据库，语法如下，<u>两条sql等效</u>:</p><p><code>CREATE DATABASE 数据库名;</code>    or     <code>CREATE SCHEMA 数据库名;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database student;  <span class="comment">-- 或用create schema student;</span></span><br></pre></td></tr></table></figure><p>使用数据库：<code>USE 数据库名;</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use student;</span><br></pre></td></tr></table></figure><h3 id="2、表"><a href="#2、表" class="headerlink" title="2、表"></a>2、表</h3><p><u>表（TABLE）是数据库中用来存储数据的对象，是有结构的数据的集合</u>，是整个数据库系统的基础。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/posts/22648.html"/>
      <url>/posts/22648.html</url>
      
        <content type="html"><![CDATA[<p>6级标题：</p><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><p>引用：</p><blockquote><p>这是一段引用</p></blockquote><p>有序列表：<br>把大象放进冰箱<br>1.打开冰箱<br>2.把大象塞进去<br>3.关上冰箱</p><p>无序列表：</p><ul><li>阿里巴巴</li><li>华为云</li></ul><ul><li>千叶结锤</li><li>稚晖君</li></ul><p>任务列表：<br>明天要做的事：</p><ul><li><input disabled="" type="checkbox"> 吃饭</li><li><input checked="" disabled="" type="checkbox"> 睡觉</li><li><input checked="" disabled="" type="checkbox"> 打豆豆</li></ul><p>代码块：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数学公式：<br>$$<br>\frac{\partial f}{\partial x} = 2\sqrt{a}x<br>$$</p><p>表格：<br>|姓名|年龄|成绩|<br>|:—|—:|:—:|<br>|张三|19|99|<br>|李四|20|88|</p><p>脚注：</p><p>内容型</p><p>一键三连<a href="%E6%8A%95%E5%B8%81%E3%80%81%E6%94%B6%E8%97%8F">^三连</a></p><h2 id="添加横线："><a href="#添加横线：" class="headerlink" title="添加横线："></a>添加横线：</h2><p>链接型</p><p>引用链接：<br><a href="www.baidu.com" title="搜索引擎">百度</a></p><p><a href="www.baidu.com" title="搜索引擎">百度</a></p><p>跳转链接：<br>请参考<a href="#%E6%A0%87%E9%A2%981">标题1</a></p><p>ULR:<br><a href="http://www.baidu.com/">http://www.baidu.com</a></p><p>图片链接：<br><img src="https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png" alt="百度" title="百度搜索"></p><p>其他行内格式：</p><p>斜体：<em>斜体</em></p><p>加粗：<strong>加粗</strong></p><p>行内代码：<code>printf()</code></p><p>下划线：<u>下划线</u></p><p>表情符号：:smile:</p><p>行内数学公式：$\theta=x^2$</p><p>化学式：H<del>2</del>O</p><p>次方：X^2^</p><p>文字高亮：==这是一段高亮文字==</p><p>嵌入视频：</p><iframe src="//player.bilibili.com/player.html?aid=327623069&bvid=BV1JA411h7Gw&cid=171385214&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/posts/63785.html"/>
      <url>/posts/63785.html</url>
      
        <content type="html"><![CDATA[<h1 id="用MarkDown进行博文编写"><a href="#用MarkDown进行博文编写" class="headerlink" title="用MarkDown进行博文编写"></a>用MarkDown进行博文编写</h1><span id="more"></span> <h2 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h2><p>使用标题时需要用#号  </p><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>这是第一个段落内容 </p><p>这是第二个段落内容</p><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><blockquote><p>这是一段引用段落，将会被高亮显示</p></blockquote><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>[网易云] (<a href="https://music.163.com/?from=infinity">https://music.163.com/?from=infinity</a>)</p><h2 id="风景图"><a href="#风景图" class="headerlink" title="风景图"></a>风景图</h2><p><img src="https://img.zcool.cn/community/01d5725e6eea9ba80121651859942f.jpg@1280w_1l_2o_100sh.jpg" alt="图片1"></p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>无序列表项</li><li>无序列表项</li><li>无序列表项 <h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2></li></ul><ol><li>有序列表项1</li><li>有序列表项2</li><li>有序列表项3 <h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2></li></ol><hr><hr><hr><hr><p>（ps：只要符号不小于三个以上都可显示分割线。）</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在前面的话</title>
      <link href="/posts/first.html"/>
      <url>/posts/first.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><hr><p>先简单介绍一下自已哈，我是某四非学校计算机学院大数据专业的一名同学，20级的。爱搞技术，爱音乐，爱摄影，爱骑行，也更爱生活…总之就是一个很不服输的小少年，在逐渐完善自己的技术栈。“因为路就在那，你得往前走“，有点鸡汤哈，希望自己能在毕业之余拿到心仪的Offer，有着坚定的人生目标。</p><hr><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><ul><li><p>其实最初搭建博客已经是一年半前了（21年4月），那时刚加入学校的计算机协会，认识了好多学校的大佬，发现自己的技术栈能力太弱了（菜狗本人），我对那些愿意在讲台上分享自己的网络技术和见解的同学，表示十分地羡慕。那时的自己也并不知道要写点什么该分享什么，随后基本就没咋更新了，觉得能搭建一个个人网站本身就是一件很酷的事。</p></li><li><p>放个我之前的第一个小博客的图，哈哈~<br>  <img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202211260946495.jpg" alt="img-202211260946495"></p></li></ul><h2 id="二、一些想法"><a href="#二、一些想法" class="headerlink" title="二、一些想法"></a>二、一些想法</h2><ul><li><p>现在是大三了，有时我的脑子里总是有很多想法，也总是想做点什么，所以我就打算重新运营一下博客，记录一些自己的想法和学习内容，开启更新之旅，可能后边的更新频率不是太高哈，但我会在保证文章质量的前提下尽量多更点文章出来（先挖个坑）。</p></li><li><p>博客内容大体就是计算机专业课的知识，跟一些互联网技术分享和摄影日志（待整理），等后边时间充裕的话也会整一些好玩的活（清单很早就列好了，不能鸽了）。</p></li><li><p>当然啦，写博客最大的受益者当然是自己了，学习之余记录一下自己的学习过程和问题解决，将自己学习的过程和理解，用图文的方式阶段性地输出，这也是一种创作的方式。就像给别人讲故事一样，能把一个知识点或内容用通俗的、自己易理解的语言讲明白，就说明你对它已经掌握了。这也算是一种对已学过的内容做巩固和强化的学习方式了。哪怕之后忘了，再来翻看自己的学习笔记，也能会快速重新掌握该知识或技术，可以极大得提升自己的学习效率，节省很多时间。写博客可以不断完善自己的技术栈或技能树，想必这也是大多数爱开技术分享博客的原因所在了。</p></li><li><p>同时后边的博客功能会慢慢完善，其实我不太在意有多少人关注我的博客，嗯…既然把内容分享出来了，我还是希望它能发挥出它的价值，帮到正真想学习这类知识的同学。如果很幸运的话，此刻你正在浏览我的博客，希望我的记录和分享能对你有所帮助，我们可以一起学习一起进步，有疑问的话欢迎私信或者评论，对我的内容指正，我也希望能收到一些对博客内容的反馈意见。</p><p>  既然都看到这里了，对你有帮助的话，不妨Mark一下呀。</p><p>  最后分享一个很有意义的视频，来自B站UP:<a href="https://space.bilibili.com/36979113">李天意学长</a>，希望能找到自己正真热爱的事物。</p>  <iframe src="//player.bilibili.com/player.html?aid=512898944&bvid=BV1z3411w7Si&cid=759541412&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>  </li></ul><h2 id="三、近期打算"><a href="#三、近期打算" class="headerlink" title="三、近期打算"></a>三、近期打算</h2><p>分隔一下下</p><hr><ul><li><p><strong>算法！算法！算法！</strong>这学期我才渐渐了解到学习算法的重要性，现在是跟着y总好好学习算法，定期刷题，因为菜所以得学习，我也顺便报名参加了明年的蓝桥杯大赛，希望能学有所成。</p></li><li><p><strong>数学！数学！数学</strong>！大一大二确实没咋好好学，真是书到用时方恨少了，我学的大数据的核心课基本都跟数学和算法设计紧密联系，后边可以开个板块聊聊。</p></li><li><p><strong>英语！英语！英语</strong>！今年12月份冲一下六级，英语的重要性不用多说，你可能认为即便学了一定的英语知识了，后边大概率也用不上。但对于计算机领域却不是这样，它的上限很高，新的技术，好的资源，ICPC(ACM)赛事，好的官网教程（各类优质的开发工具大多源自国外）等，都使用英语作为第一语言。尝试着自己去理解一些英文学习资源，遇到问题时可能会让你事半功倍。</p></li><li><p>后边会更新一些专业课笔记补全知识漏洞，目前我对计算机网络和数据库方面的技术较为感兴趣，学习计组对我来说真的很要命。。。 现在我是自己找高质量的网课资源来学习。希望今年的专业课考核能取得一个不错的成绩。</p><p>  想说的暂时就这么多了。加油，干起！！!</p><p>  编辑于22/11/26</p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 个人随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
