<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL案例1 MySQL的简单应用及用Java操作</title>
      <link href="/2022/10/07/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B7%E4%BD%93%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/MySQL%E6%A1%88%E4%BE%8B1%20MySQL%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8%E5%8F%8A%E7%94%A8Java%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/10/07/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B7%E4%BD%93%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/MySQL%E6%A1%88%E4%BE%8B1%20MySQL%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8%E5%8F%8A%E7%94%A8Java%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL案例1-MySQL的简单应用及用Java操作"><a href="#MySQL案例1-MySQL的简单应用及用Java操作" class="headerlink" title="MySQL案例1 MySQL的简单应用及用Java操作"></a>MySQL案例1 MySQL的简单应用及用Java操作</h1><h2 id="一、具体案例描述"><a href="#一、具体案例描述" class="headerlink" title="一、具体案例描述"></a>一、具体案例描述</h2><p>MySQL数据库操作：</p><p>学生表student信息如下</p><table><thead><tr><th>Name</th><th>English</th><th>Math</th><th>Computer</th></tr></thead><tbody><tr><td>zhangsan</td><td>69</td><td>86</td><td>77</td></tr><tr><td>lisi</td><td>55</td><td>100</td><td>88</td></tr></tbody></table><ul><li>根据上面给出的student表，在MySQL数据库中完成以下操作：</li></ul><p>（1）在MySQL中创建student表，并录入数据。</p><p>（2）用SQL语句输出student表中的所有记录。</p><p>（3）查询zhangsan的Computer成绩。</p><p>（4）修改lisi的Math成绩，改为95。</p><ul><li>根据上面已经设计出的student表，使用MySQL的Java客户端编程实现以下操作：</li></ul><p>（1）向student表中添加如下所示的一条记录。</p><table><thead><tr><th>Name</th><th>English</th><th>Math</th><th>Computer</th></tr></thead><tbody><tr><td>scofield</td><td>45</td><td>89</td><td>100</td></tr></tbody></table><p>（2）获取scofield的English成绩信息。</p><h2 id="二、上机操作"><a href="#二、上机操作" class="headerlink" title="二、上机操作"></a>二、上机操作</h2><h3 id="1、要用的SQL语句"><a href="#1、要用的SQL语句" class="headerlink" title="1、要用的SQL语句"></a>1、要用的SQL语句</h3><p>(创建过程可用navicat可视化软件来完成操作，这里为了便于学习全部使用SQL语句)</p><ul><li>创建数据库</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 先创建一个学生集合的数据库</span><span class="token keyword">create</span> <span class="token keyword">database</span> studentdb<span class="token punctuation">;</span></code></pre><ul><li>创建表</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建学生表</span><span class="token comment" spellcheck="true">-- 整型数据"tinyint unsigned"的取值范围为0~255，用它来表示学生成绩</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>studentdb<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">(</span>    Name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--成绩单信息定义为非空约束</span>    English <span class="token keyword">tinyint</span> unsigned <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    Math <span class="token keyword">tinyint</span> unsigned <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    Computer <span class="token keyword">tinyint</span> unsigned <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 再查看一下表结构</span><span class="token keyword">use</span> studentdb<span class="token punctuation">;</span><span class="token keyword">desc</span> student<span class="token punctuation">;</span></code></pre><p>用navicat刷新一下数据库，发现新增了数据库studentdb和student表<br><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140922357.jpg" alt="img_202210140922357"></p><ul><li><p>插入数据<br>```sql</p></li><li><ul><li>批量插入学生成绩<br>insert into <code>student</code> (Name,English,Math,Computer) values (‘zhangsan’,’69’,’86’,’77’), (‘lisi’,’55’,’100’,’88’);<br>```</li></ul></li><li><p>查询表内容<br>```sql</p></li><li><ul><li>输出student表中的所有记录<br>select * from student;<br>```</li></ul></li></ul><p>查询结果如下<br><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140924365.jpg" alt="img_202210140924365"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 按条件查询数据</span><span class="token comment" spellcheck="true">-- 查询zhangsan的Computer成绩</span><span class="token keyword">select</span> Name<span class="token punctuation">,</span>Computer <span class="token keyword">from</span> student <span class="token keyword">where</span> Name <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span></code></pre><p>查询结果如下<br><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140925302.jpg" alt="img_202210140925302"></p><ul><li>修改数据<br>```sql</li><li><ul><li>修改lisi的Math成绩，改为95<br>update <code>student</code> set Math = 95 where Name = ‘lisi’;<br>```</li></ul></li></ul><p>查询到修改结果如下，修改成功<img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140925304.jpg" alt="img_202210140925304"></p><p>在数据库中刷新，student表中信息也同步修改了</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140925310.jpg" alt="img_202210140925310"></p><h3 id="2、Java操作MySQL数据库"><a href="#2、Java操作MySQL数据库" class="headerlink" title="2、Java操作MySQL数据库"></a>2、Java操作MySQL数据库</h3><p>（1）使用 JDBC 技术连接 MySQL 数据库</p><p>这里用<a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a>开发工具新建一个maven的工程连接MySQL,新建成功后首先配置pom.xml文件</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140926388.jpg" alt="img_202210140926388"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140926393.jpg" alt="img_202210140926393"></p><p>1.找MySQL数据库对应的驱动依赖文件</p><p>进入<a href="https://mvnrepository.com/">maven</a>仓库的官网：<a href="https://mvnrepository.com/%EF%BC%8C%E6%90%9C%E7%B4%A2mysql%E6%8E%A5%E7%9D%80%E7%82%B9%E5%87%BB%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C">https://mvnrepository.com/，搜索mysql接着点击第一个搜索结果</a></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140927806.jpg" alt="img_202210140927806"></p><p>选择自己对应的mysql版本，复制下方的maven依赖代码</p><p>不知道自己MySQL版本的可以用DOS命令查看，我的是mysql 8.0.30版本</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140928892.jpg" alt="img_202210140928892"></p><p>选择自己安装的mysql版本<img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140929442.jpg" alt="img_202210140929442"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140929445.jpg" alt="img_202210140929445"></p><p>这里我自己用的是最新的mysql 8.0.30版本</p><pre class=" language-text"><code class="language-text"><!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --><dependency>    <groupId>mysql</groupId>    <artifactId>mysql-connector-java</artifactId>    <version>8.0.30</version></dependency></code></pre><p>将复制的依赖文件粘贴到pom.xml配置文件中，注意前后要加上<dependencies>和</dependencies>，修改完后该界面的左上角会出现一个刷新按钮，点击刷新，联网状态下IDEA工具会自动帮你下载对应的驱动包</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140929816.jpg" alt="img_202210140929816"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140929823.jpg" alt="img_202210140929823"></p><p>上面的仓库依赖配置好后，就可以进入正式的编程开发了</p><p>（2）具体代码实现</p><p>新建一个Java文件，连接MySQL数据库并进行操作的基本过程如下，</p><p>step1.加载驱动</p><p>注意MySQL 8.0 以上版本的数据库连接要使用：<code>com.mysql.cj.jdbc.Driver</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//加载JDBC驱动</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>step2.定义用户信息和URL参数</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义用户信息和URL参数，连接MySQL用</span><span class="token comment" spellcheck="true">//studentdb是要连接的数据库，需要提前创建好，且student表已包含两条成绩记录</span>String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/studentdb"</span><span class="token punctuation">;</span>String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>String password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span></code></pre><p>step3.连接数据库</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//连接数据库，使用驱动管理类；connection就表示数据库</span>Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的3步是对数据库连接的基本条件，不同的是以下几步</p><p>step4.创建一个SQL语句对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个SQL语句对象，并用statement来接收</span>Statement statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>step5.定义SQL语句</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义SQL修改语句，插入一条新数据</span>String sql1 <span class="token operator">=</span> <span class="token string">"insert into `student` (Name,English,Math,Computer) values ('scofield','45','89','100')"</span><span class="token punctuation">;</span></code></pre><p>step6.查询执行SQL语句后的结果</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//执行查询SQL语句，查看返回结果</span>String sql2 <span class="token operator">=</span> <span class="token string">"select * from student"</span><span class="token punctuation">;</span>ResultSet resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>step7.释放连接</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//关闭数据库连接</span>resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>向student表中添加一条记录</li></ul><p>这里主要用到的SQL代码如下，</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义了SQL修改语句，插入一条新数据，并返回查询结果</span>String sql1 <span class="token operator">=</span> <span class="token string">"insert into `student`(Name,English,Math,Computer) values ('scofield','45','89','100')"</span><span class="token punctuation">;</span>String sql2 <span class="token operator">=</span> <span class="token string">"select * from student"</span><span class="token punctuation">;</span></code></pre><p>控制台返回的结果：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140930818.jpg" alt="img_202210140930818"></p><p>完整代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.加载JDBC驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义用户信息和URL参数，连接MySQL用</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/studentdb"</span><span class="token punctuation">;</span>        String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.连接数据库，使用驱动管理类；connection就表示数据库</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断一下数据库连接状态</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.创建一个SQL语句对象，并用statement来接收</span>            Statement statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.定义SQL修改语句，插入一条新数据</span>            String sql1 <span class="token operator">=</span> <span class="token string">"insert into `student` (Name,English,Math,Computer) values ('scofield','45','89','100')"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断数据库是否修改成功，根据受影响的行数 >= 1，即修改成功</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据插入成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//6.执行查询SQL语句，查看返回结果</span>                String sql2 <span class="token operator">=</span> <span class="token string">"select * from student"</span><span class="token punctuation">;</span>                ResultSet resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student表中数据如下："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"English"</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"Math "</span><span class="token operator">+</span><span class="token string">"Computer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"English"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"Math"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"Computer"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//7.关闭数据库连接</span>                resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据插入失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>获取scofield的English成绩信息</li></ul><p>数据库连接的前3步操作一样，这里需要更改查询语句，并返回查询结果。</p><p>这里主要用到的SQL代码如下，</p><pre><code>//定义SQL查询语句，查询scofield的English成绩String sql = &quot; select Name,English from student where Name = &#39;scofield&#39;&quot;;</code></pre><p>控制台返回的结果：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140931911.jpg" alt="img_202210140931911"></p><p>完整代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectResults</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.加载JDBC驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义用户信息和URL参数，连接MySQL用</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/studentdb"</span><span class="token punctuation">;</span>        String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.连接数据库，使用驱动管理类；connection就表示数据库</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断一下数据库连接状态</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.创建一个SQL语句对象，并用statement来接收</span>            Statement statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.定义SQL查询语句，查询scofield的English成绩</span>            String sql <span class="token operator">=</span> <span class="token string">" select Name,English from student where Name = 'scofield'"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断数据库是否查询成功，当返回结果不为空时，即查询成功</span>            ResultSet resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成绩查询成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//6.执行查询SQL语句，查看返回结果</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student表中查询结果如下："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"English"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"English"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//7.关闭数据库连接</span>                resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成绩查询失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="三、遇到的问题及解决方案"><a href="#三、遇到的问题及解决方案" class="headerlink" title="三、遇到的问题及解决方案"></a>三、遇到的问题及解决方案</h2><h3 id="1、找MySQL连接Java的驱动包"><a href="#1、找MySQL连接Java的驱动包" class="headerlink" title="1、找MySQL连接Java的驱动包"></a>1、找MySQL连接Java的驱动包</h3><ul><li>问题描述</li></ul><p>参考网络上绝大部分Java操作MySQL的教程，都是使用jar驱动包来操作。</p><p>操作教程可参考<a href="https://www.runoob.com/java/java-mysql-connect.html">菜鸟教程</a>上的Java连接MySQL的操作，下载好驱动包后，用添加库的方式导入到对应项目中。最新版下载地址为：<a href="http://dev.mysql.com/downloads/connector/j/%EF%BC%8C%E8%A7%A3%E5%8E%8B%E5%90%8E%E5%BE%97%E5%88%B0">http://dev.mysql.com/downloads/connector/j/，解压后得到</a> jar 库文件，然后在对应的项目中导入该库文件。尴尬的是进入官网后并没有找到对应自己版本的MySQL驱动包，我用的是8.0.30版本，应该是目前最新的版本，官网并未提供该版本的驱动包，这简直让我蚌埠住了。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140935328.jpg" alt="img_202210140935328"></p><ul><li>解决方案</li></ul><p>幸运的是我之前做过Java操作MongoDB数据库连接的案例，导库方式采用的是maven库的依赖文件(在maven官网也可在里面下载jar包，这里更推荐用依赖文件)。想必Java与数据库连接过程大体类似，索性就看了下相关的Java使用maven项目来操作MySQL的教程，确实可以这样操作。于是就有了前面新建maven工程的方式来连接MySQL。需要注意的是，添加依赖代码时需要加上<dependencies>和</dependencies>，然后刷新一下maven库，否则会出现报错。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140935637.jpg" alt="img_202210140935637"></p><h3 id="2、JDBC中——Class-forName-com-mysql-cj-jdbc-Driver"><a href="#2、JDBC中——Class-forName-com-mysql-cj-jdbc-Driver" class="headerlink" title="2、JDBC中——Class.forName(com.mysql.cj.jdbc.Driver)"></a>2、JDBC中——Class.forName(com.mysql.cj.jdbc.Driver)</h3><p><strong>MySQL 8.0 以上版本的数据库连接有所不同：</strong></p><ul><li><code>com.mysql.jdbc.Driver</code> 更换为 <code>com.mysql.cj.jdbc.Driver</code>。</li></ul><p>若使用以下代码，程序可以返回正确结果，但程序会抛出异常。更改为<code>com.mysql.cj.jdbc.Driver</code>可以解决。</p><pre><code>//加载JDBC驱动Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</code></pre><p>对Class.forName(com.mysql.cj.jdbc.Driver)的深入理解，可以参考这篇文章：</p><p><a href="http://t.csdn.cn/q37Yi">jdbc（2）——之Class.forName(com.mysql.cj.jdbc.Driver)理解</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库 第二章 SQL语句</title>
      <link href="/2022/10/06/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20SQL%E8%AF%AD%E5%8F%A5/"/>
      <url>/2022/10/06/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20SQL%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库-第二章-SQL语句"><a href="#MySQL数据库-第二章-SQL语句" class="headerlink" title="MySQL数据库 第二章 SQL语句"></a>MySQL数据库 第二章 SQL语句</h1><p>SQL是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p><h2 id="一、SQL语句分类"><a href="#一、SQL语句分类" class="headerlink" title="一、SQL语句分类"></a>一、SQL语句分类</h2><ul><li><p>DCL(Data Control Language)：数据控制语言，用来定义访问权限和安全级别。（不太重要，一般用navicat图形化界面来操作）</p></li><li><p>DDL(Data Definition Language)：数据定义语言，用来定义数据库对象：库、表、列等。功能：创建、删除、修改库和表结构。</p></li><li><p>DML(Data Manipulation Language)：数据操作语言，用来定义数据库记录：增、删、改表记录。</p></li><li><p>DQL(Data Query Language)：数据查询语言，用来查询记录。也是本章学习的重点。（！！！很重要）</p></li></ul><h2 id="二、DCL-数据控制语言-语法学习"><a href="#二、DCL-数据控制语言-语法学习" class="headerlink" title="二、DCL(数据控制语言)语法学习"></a>二、DCL(数据控制语言)语法学习</h2><h3 id="DCL-Data-Control-Language-：数据控制语言，用来定义访问权限和安全级别。DCL语言可用navicat软件来进行图形化界面操作。"><a href="#DCL-Data-Control-Language-：数据控制语言，用来定义访问权限和安全级别。DCL语言可用navicat软件来进行图形化界面操作。" class="headerlink" title="DCL(Data Control Language)：数据控制语言，用来定义访问权限和安全级别。DCL语言可用navicat软件来进行图形化界面操作。"></a>DCL(Data Control Language)：数据控制语言，用来定义访问权限和安全级别。<strong>DCL语言可用navicat软件来进行图形化界面操作。</strong></h3><p><strong>tips:！！！该节内容不是很重要</strong></p><h3 id="1、创建用户、修改密码、删除用户"><a href="#1、创建用户、修改密码、删除用户" class="headerlink" title="1、创建用户、修改密码、删除用户"></a>1、创建用户、修改密码、删除用户</h3><h4 id="（1）创建用户"><a href="#（1）创建用户" class="headerlink" title="（1）创建用户"></a>（1）创建用户</h4><p>创建一个用户，让该用户只能在指定ip地址或任意ip地址上来登录mysql</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建用户</span><span class="token comment" spellcheck="true">-- 指定ip，语法：create user '用户名'@'ip地址' identified by '密码';</span><span class="token comment" spellcheck="true">-- 任意ip，ip地址段用‘%’来表示，例如</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'ariesfun'</span>@'<span class="token operator">%</span><span class="token string">' identified by '</span>root'<span class="token punctuation">;</span></code></pre><h4 id="（2）修改密码"><a href="#（2）修改密码" class="headerlink" title="（2）修改密码"></a>（2）修改密码</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改密码，8.0版本的mysql直接赋值新密码就行</span><span class="token comment" spellcheck="true">-- 注意:若创建用户后直接连接mysql了，修改密码后需用新密码重新连接，再进行后面的测试</span><span class="token comment" spellcheck="true">-- 语法：set password for '用户名'@'ip地址' = '新密码';</span><span class="token keyword">set</span> password <span class="token keyword">for</span> <span class="token string">'ariesfun'</span>@'<span class="token operator">%</span><span class="token string">' = '</span><span class="token number">123456</span>'<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 以上是用sql语句来操作，如果直接修改表，也是可以创建用户和修改密码的，但是要在mysql数据库下的user表修改，改完后需要刷新权限后才能生效，刷新语句如下</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 在本地数据库下刷新</span></code></pre><h4 id="（3）删除用户"><a href="#（3）删除用户" class="headerlink" title="（3）删除用户"></a>（3）删除用户</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 删除用户</span><span class="token comment" spellcheck="true">-- 语法：drop user '用户名'@'ip地址';</span><span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">'ariesfun'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></code></pre><h3 id="2、给用户授予权限、撤销权限，查看权限"><a href="#2、给用户授予权限、撤销权限，查看权限" class="headerlink" title="2、给用户授予权限、撤销权限，查看权限"></a>2、给用户授予权限、撤销权限，查看权限</h3><p>给【指定用户】在【指定数据库】上赋予【指定权限】，权限有很多，常用的有以下几个：</p><ul><li>create：可以创建数据库</li><li>insert：可以插入数据</li><li>delete：可以删除数据</li><li>select：可以查询数据</li><li>update：可以更新数据</li></ul><h4 id="（1）授权"><a href="#（1）授权" class="headerlink" title="（1）授权"></a>（1）授权</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 授权（包含所有权限或指定权限）</span><span class="token comment" spellcheck="true">-- 语法 ：grant 权限1,权限2,... on `数据库名`.`某表` to '用户名'@'ip地址';</span><span class="token comment" spellcheck="true">-- 注意：这里数据库名和表名用了撇符号``（按键在键盘左上角,用''单引号也可以），这样写的目的是防止将名称识别成关键字,造成sql语句执行失败</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">to</span> <span class="token string">'ariesfun'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 授权所有的表，用"*"</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'ariesfun'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 授予指定权限</span><span class="token keyword">grant</span> <span class="token keyword">create</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">delete</span><span class="token punctuation">,</span><span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">update</span> <span class="token keyword">on</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">to</span> <span class="token string">'ariesfun'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></code></pre><h4 id="（2）撤销权限"><a href="#（2）撤销权限" class="headerlink" title="（2）撤销权限"></a>（2）撤销权限</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 撤销权限（包含所有权限或指定权限）</span><span class="token comment" spellcheck="true">-- 语法：revoke 权限1,权限2,... on '数据库名'.'某表' from '用户名'@'ip地址';</span><span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">from</span> <span class="token string">'ariesfun'</span>@'<span class="token operator">%</span><span class="token string">';revoke create,insert,delete,select,update on `student`.`user` from '</span>ariesfun<span class="token string">'@'</span><span class="token operator">%</span>'<span class="token punctuation">;</span></code></pre><h4 id="（3）查看权限"><a href="#（3）查看权限" class="headerlink" title="（3）查看权限"></a>（3）查看权限</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看授权</span><span class="token comment" spellcheck="true">-- 语法：show grants for 用户名 或 '用户名'@'ip地址';</span><span class="token keyword">show</span> grants <span class="token keyword">for</span> ariesfun<span class="token punctuation">;</span></code></pre><h3 id="3、操作实例"><a href="#3、操作实例" class="headerlink" title="3、操作实例"></a>3、操作实例</h3><h4 id="（1）注意事项"><a href="#（1）注意事项" class="headerlink" title="（1）注意事项"></a>（1）注意事项</h4><p>每条语句选中后单独执行，且输出信息为”OK”说明操作成功<br><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140121828.jpg" alt="Snipaste_2022-10-04_16-23-35"></p><p>新建一个test连接测试DCL语言用，先点测试连接，成功后再点击确定<br><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140121829.jpg" alt="Snipaste_2022-10-04_16-18-51"></p><p>查看数据库中表的权限<br><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140121830.jpg" alt="Snipaste_2022-10-04_16-54-44"></p><h4 id="（2）具体的实例操作"><a href="#（2）具体的实例操作" class="headerlink" title="（2）具体的实例操作"></a>（2）具体的实例操作</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 测试用，以下每一行语句按顺序单独执行一次</span><span class="token comment" spellcheck="true">-- 创建用户并更改密码</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'ariesfun'</span>@'<span class="token operator">%</span><span class="token string">' identified by '</span>root<span class="token string">';set password for '</span>ariesfun<span class="token string">'@'</span><span class="token operator">%</span><span class="token string">' = '</span><span class="token number">123456</span>'<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建数据库</span><span class="token keyword">create</span> <span class="token keyword">database</span> student<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 新建表，为了方便这里先用navicat软件，在本地连接中的student中新建一张user表和一张score表（后面章节会有基本表的定义语句）</span><span class="token comment" spellcheck="true">-- 进行权限操作,授权和撤权成对使用</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">to</span> <span class="token string">'ariesfun'</span>@'<span class="token operator">%</span><span class="token string">';revoke all on `student`.`user` from '</span>ariesfun<span class="token string">'@'</span><span class="token operator">%</span><span class="token string">';grant create,insert,delete,select,update on `student`.`user` to '</span>ariesfun<span class="token string">'@'</span><span class="token operator">%</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> grants <span class="token keyword">for</span> ariesfun<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查看一下授权情况</span><span class="token comment" spellcheck="true">-- 运行完上面的语句，test连接中的student数据库中又出现了user表</span><span class="token keyword">revoke</span> <span class="token keyword">create</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">delete</span><span class="token punctuation">,</span><span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">update</span> <span class="token keyword">on</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">from</span> <span class="token string">'ariesfun'</span>@'<span class="token operator">%</span><span class="token string">';grant all on `student`.* to '</span>ariesfun<span class="token string">'@'</span><span class="token operator">%</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> grants <span class="token keyword">for</span> ariesfun<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- test连接中的student数据库中又会出现user表和score表两张表</span><span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'ariesfun'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 最后删除刚创建的用户，再次连接test就会操作失败</span><span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">'ariesfun'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></code></pre><h2 id="三、DDL-数据定义语言"><a href="#三、DDL-数据定义语言" class="headerlink" title="三、DDL(数据定义语言)"></a>三、DDL(数据定义语言)</h2><p>DDL语言主要是用于<strong>定义或改变表（TABLE）结构</strong>，<u>主要的命令有CREATE、ALTER、DROP</u>等</p><h3 id="1、创建表的语法"><a href="#1、创建表的语法" class="headerlink" title="1、创建表的语法"></a>1、创建表的语法</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">(</span>即列名<span class="token punctuation">)</span> 类型<span class="token punctuation">(</span>宽度<span class="token punctuation">)</span> 约束条件<span class="token punctuation">,</span>字段名<span class="token number">2</span> 类型<span class="token punctuation">(</span>宽度<span class="token punctuation">)</span> 约束条件<span class="token punctuation">,</span>字段名<span class="token number">3</span> 类型<span class="token punctuation">(</span>宽度<span class="token punctuation">)</span> 约束条件<span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在关系型数据库中，我们需要设定表名、列名，同时还需要指定数据类型（常用的：整型、浮点型、字符串型）。</p><h3 id="2、常用的数据类型"><a href="#2、常用的数据类型" class="headerlink" title="2、常用的数据类型"></a>2、常用的数据类型</h3><blockquote><p><strong>整型</strong></p></blockquote><table><thead><tr><th>MySQL数据类型</th><th>含义（默认有符号）</th></tr></thead><tbody><tr><td>tinyint</td><td>1字节，范围（-128~127）</td></tr><tr><td>smallint</td><td>2字节，范围（-32768~32767）</td></tr><tr><td><u>mediumint</u></td><td><u>3字节</u>，范围（-8388608~8388607）</td></tr><tr><td>int</td><td>4字节，范围（-2147483648~2147483647）</td></tr><tr><td>bigint</td><td>8字节，范围（+-9.22 * 10^18^）</td></tr></tbody></table><p>在整型中我们默认使用的都是【有符号】的，当然了，我们也可以<u>加上unsigned关键字，定义成【无符号】的类型</u>，那么对应的取值范围就会发生改变：</p><p>如：tinyint unsigned的取值范围为0~255，</p><p>宽度n的作用需要配合zerofill进行使用( zerofill指0填充)： 如：int(4) unsigned zerofill  ，查询结果: 0001 0002 1000</p><blockquote><p><strong>浮点型</strong></p></blockquote><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>float(m, d)</td><td>4字节，单精度浮点型，m总长度，d小数位</td></tr><tr><td>double(m, d)</td><td>8字节，双精度浮点型，m总长度，d小数位（可用来表示很大或很小的数）</td></tr><tr><td>decimal(m, d)</td><td>decimal是存储为字符串的浮点数(无误差且精度高，可用来表示余额)，对应Java中的Bigdecimal</td></tr></tbody></table><p>我们用一个例子来判断小括号内参数的含义，针对数据类型为float(5, 3)的列，做了以下试验：</p><ul><li>插入123.45678，最后查询得到的结果为99.999（会取满足条件的最大值）；</li><li>插入12.34567，最后查询结果为12.346（会有四舍五入）；</li></ul><p>所以，在使用浮点型的时候，还是要注意陷阱，要以插入数据库中的实际结果为准。</p><blockquote><p><strong>字符串型</strong></p></blockquote><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>char(n)，n指字符个数</td><td>固定长度，最多255个字节（字符）</td></tr><tr><td>varchar(n)</td><td>可变长度，最大容量65535个字节</td></tr><tr><td>tinytext</td><td>可变长度，最大容量255个字节</td></tr><tr><td>text</td><td>可变长度，最大容量65535个字节</td></tr><tr><td>mediumtext</td><td>可变长度，最大容量2^24^-1个字节，16MB</td></tr><tr><td>longtext</td><td>可变长度，最大容量2^32^-1个字节， 4GB</td></tr></tbody></table><p><strong>（1）char和varchar两类型的区别（这两个也最常用）：</strong></p><ul><li>char类型是【<strong>定长</strong>】的类型，即当定义的是char(10)，输入的是”abc”这三个字符时，它们占的空间一样是10个字符，包括7个空字节。当输入的字符长度超过指定的数时，char会截取超出的字符。而且，当存储char值时，MySQL会自动删除输入字符串末尾的空格。</li><li><strong>char类型适合存储很短的、一般固定长度的字符串。</strong>例如，用char(1)来定义性别；char类型非常适合存储密码的MD5值（将不定长的变为定长的值），因为MD5是一个定长的值。对于非常短的列，char比varchar在存储空间上也更有效率。</li><li><strong>varchar(n)类型用于存储【可变长】的类型，且长度最大为n个字符的可变长度字符数据</strong>。比如varchar(10), 输入abc三个字符，那么实际存储大小为3个字节。除此之外，varchar还需要使用1或2个额外字节记录字符串的长度，如果列的最大长度小于等于255字节（是定义的最长长度，不是实际长度），则使用1个字节表示长度，否则使用2个字节来表示。n表示的是最大的长度。</li><li><u>char类型每次修改的数据长度相同，效率更高；varchar类型每次修改的数据长度不同，效率更低。</u></li></ul><p><strong>（2）varchar和text</strong></p><ul><li><p>text不能设置默认值，varchar可以。</p></li><li><p>text类型，包括（MEDIUMTEXT，LONGTEXT）也受单表 65535 <strong>最大行宽度限制</strong>，所以他支持溢出存储，只会存放前 768 字节在数据页中，而剩余的数据则会存储在溢出段中(磁盘上)。虽然 text 字段会把超过 768 字节的大部分数据溢出存放到硬盘其他空间，看上去是会更加增加磁盘压力。但从处理形态上来讲 varchar 大于 768 字节后，实质上存储和 text 差别不是太大了。因为超长的 varchar 也是会用到溢出存储，读取该行也是要去读硬盘然后加载到内存，基本认为是一样的。</p></li><li><p><u>根据存储的实现：可以考虑用 varchar 替代 text，因为 varchar 存储更弹性，存储数据少的话性能更高</u>。</p></li><li><p>如果存储的数据大于64K，就必须使用到 mediumtext或longtext，因为 varchar 已经存不下了。</p></li><li><p>如果 varchar(255+) 存储大于255字节后，和 text 在存储机制是一样的，性能也相差无几。</p><p>详细解释可参考文章：<a href="http://t.csdn.cn/mrgk1">MySQL 的 varchar 与 text 对比</a></p></li></ul><blockquote><p><strong>日期和时间数据类型</strong></p></blockquote><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>date</td><td>3字节，日期，格式：2022-10-01</td></tr><tr><td>time</td><td>3字节，时间，格式：08:00:00</td></tr><tr><td>datetime</td><td>8字节，日期时间，格式：2022-10-01 08:00:00</td></tr><tr><td>timestamp</td><td>4字节，自动存储记录修改的时间</td></tr><tr><td>year</td><td>1字节，年份</td></tr></tbody></table><h3 id="3、建表约束"><a href="#3、建表约束" class="headerlink" title="3、建表约束"></a>3、建表约束</h3><p>目前我们已经学会了如何创建表，但是一张表不止有一列，且数据库中的表不止有一个，建表约束说的就是，我们应该<strong>如何规范表中的数据以及表和表的关系</strong>。</p><h4 id="（1）MySQL约束类型"><a href="#（1）MySQL约束类型" class="headerlink" title="（1）MySQL约束类型"></a>（1）MySQL约束类型</h4><table><thead><tr><th>约束名称</th><th>描述</th></tr></thead><tbody><tr><td>NOT NULL</td><td>非空约束（不是 null）</td></tr><tr><td>UNIQUE</td><td>唯一约束，取值不允许重复</td></tr><tr><td>PRIMARY KEY</td><td>主键约束（主关键字），自带非空、唯一、索引约束属性</td></tr><tr><td>DEFAULT</td><td>默认值（缺省值）</td></tr><tr><td>FOREIGN KEY</td><td>外键约束（外关键字，会用到其他表信息）</td></tr></tbody></table><h4 id="（2）NOT-NULL约束"><a href="#（2）NOT-NULL约束" class="headerlink" title="（2）NOT NULL约束"></a>（2）NOT NULL约束</h4><p>非空约束指的是，如果我们要在这张表中添加数据，<u>设定了非空约束的列必须要赋值，不能为空</u></p><pre class=" language-mysql"><code class="language-mysql">-- 先创建一个书店的数据库create database bookstore;    -- 用database或schema来创建的作用一样-- 创建作者表create table `bookstore`.`author`(    aut_id int,     aut_name varchar(50) not null,    -- 这就是非空约束的定义    gander char(1) default '男',    country varchar(50),    birthday datetime    -- 最后不用加逗号);</code></pre><h4 id="（3）UNIQUE约束"><a href="#（3）UNIQUE约束" class="headerlink" title="（3）UNIQUE约束"></a>（3）UNIQUE约束</h4><p>唯一约束指的是，如果我们要在这张表中添加数据，<u>设定了唯一约束的列中的值不能有重复，不能为空</u></p><ul><li>唯一约束，实现方法1（在表的定义最后施加）</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建图书表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>bookstore<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>book<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">-- 或者加上"if not"表示如果不存在就建该表,eg.create table if not `ydlclass`.`book`该语句跟上边语句作用一样</span>    book_id <span class="token keyword">int</span> <span class="token keyword">primary</span><span class="token punctuation">,</span>    book_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    bar_code <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    aut_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>key_id<span class="token punctuation">)</span> <span class="token keyword">references</span> author<span class="token punctuation">(</span>aut_id<span class="token punctuation">)</span>，<span class="token comment" spellcheck="true">-- 外键约束</span>    <span class="token keyword">unique</span><span class="token punctuation">(</span>bar_code<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">-- 这就是唯一约束的定义</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- sql语句单句执行时最后面可不用加";"</span></code></pre><ul><li>实现方法2（在字段名定义的后面施加）</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建图书表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>bookstore<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>book<span class="token punctuation">`</span><span class="token punctuation">(</span>    book_id <span class="token keyword">int</span> <span class="token keyword">primary</span><span class="token punctuation">,</span>    book_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    bar_code <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">-- 这就是唯一约束的定义</span>    aut_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span></code></pre><h4 id="（4）DEFAULT约束"><a href="#（4）DEFAULT约束" class="headerlink" title="（4）DEFAULT约束"></a>（4）DEFAULT约束</h4><p>默认约束指的是，如果我们要在这张表中添加数据，<u>如果为给设定了默认约束的列赋值，该列会自动填充默认值</u></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建作者表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>bookstore<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>author<span class="token punctuation">`</span><span class="token punctuation">(</span>    aut_id <span class="token keyword">int</span><span class="token punctuation">,</span>     aut_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    gander char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'男'</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">-- 这就是默认约束</span>    country <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    birthday <span class="token keyword">datetime</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="（5）PRIMARY-KEY约束"><a href="#（5）PRIMARY-KEY约束" class="headerlink" title="（5）PRIMARY KEY约束"></a>（5）PRIMARY KEY约束</h4><p>主键（PRIMARY KEY）的完整称呼是“主键约束”，是 MySQL中使用最为频繁的约束。一般情况下，为了便于 DBMS 更快的查找到表中的记录，都会在表中设置一个主键。</p><p>主键分为<u>单字段主键和多字段联合主键</u>，本节将分别讲解这两种主键约束的创建、修改和删除。</p><p>使用主键应注意以下几点：</p><ul><li><u>每个表只能定义一个主键。</u></li><li><u>主键值必须唯一标识表中的每一行，且不能为 NULL</u>，即表中不可能存在有相同主键值的两行数据。这是唯一性原则。</li><li><u>一个字段名只能在联合主键字段表中出现一次。</u></li><li>【联合主键】不能包含不必要的多余字段。当把联合主键的某一字段删除后，如果剩下的字段构成的主键仍然满足唯一性原则，那么这个联合主键是不正确的。这是最小化原则。</li></ul><blockquote><p><strong>单个字段作为主键</strong></p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建作者表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>bookstore<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>author<span class="token punctuation">`</span><span class="token punctuation">(</span>    aut_id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">-- 这就是主键约束 </span>    <span class="token comment" spellcheck="true">-- 主键约束也可用"primary key(aud_id)"来定义主键或联合主键，但要放在语句最后</span>    aut_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    gander char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    country <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    birthday <span class="token keyword">datetime</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>联合主键：多个字段同时作为主键</strong></p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建作者表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>bookstore<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>author<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>aut_id<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token punctuation">,</span>    <span class="token punctuation">`</span>aut_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gander<span class="token punctuation">`</span> char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>country<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>brithday<span class="token punctuation">`</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>aut_id<span class="token punctuation">,</span>aut_name<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">-- 这就是联合主键</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h4 id="（6）AUTO-INCREMENT约束"><a href="#（6）AUTO-INCREMENT约束" class="headerlink" title="（6）AUTO_INCREMENT约束"></a>（6）AUTO_INCREMENT约束</h4><p><strong>需要配合主键使用</strong>，有个这个约束，我们在向表中插入数据时，不需要额外关心主键的数据，<u>它会自动帮我们维护一个递增的主键</u></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建图书表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>bookstore<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>book<span class="token punctuation">`</span><span class="token punctuation">(</span>            book_id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">-- 这就是自动递增</span>        book_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>        bar_code <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>        aut_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span></code></pre><h4 id="（7）FOREIGN-KEY约束"><a href="#（7）FOREIGN-KEY约束" class="headerlink" title="（7）FOREIGN KEY约束"></a>（7）FOREIGN KEY约束</h4><p>外键维护的表与表之间的关系，<u>它规定了当前列的数据必须来源于一张其他表的某一列中的主键</u></p><p>外键会产生的效果</p><p><u>1、删除表时，如果不删除引用外键的表，被引用的表不能直接删除</u></p><p><u>2、外键的值必须来源于引用的表的主键字段</u></p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><blockquote><p><strong>FOREIGN KEY (column list) REFERENCES [primary key table] (column list);</strong></p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建作者表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>bookstore<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>author<span class="token punctuation">`</span><span class="token punctuation">(</span>    aut_id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>     aut_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    gander char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    country <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    birthday <span class="token keyword">datetime</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建图书表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>bookstore<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>book<span class="token punctuation">`</span><span class="token punctuation">(</span>    book_id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    book_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    bar_code <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    aut_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>aut_id<span class="token punctuation">)</span> <span class="token keyword">references</span> author<span class="token punctuation">(</span>aut_id<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">-- 这就是外键约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4、对表的修改操作"><a href="#4、对表的修改操作" class="headerlink" title="4、对表的修改操作"></a>4、对表的修改操作</h4><p>查看当前数据库中所有表:<code>SHOW TABLES;</code></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看所有表</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span></code></pre><p>查看表结构:<code>DESC 表名;</code></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看表结构</span><span class="token keyword">desc</span> authors<span class="token punctuation">;</span></code></pre><p><u>修改表有5个操作</u>，但语法前缀都是一样的:<code>ALTER TABLE 表名...</code>（不重要）</p><ul><li><p>添加列（语法）：<code>ALTER TABLE 表名 add (列名 列类型，... ，列名 列类型);</code></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 给author表添加列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> author <span class="token keyword">add</span> <span class="token punctuation">(</span>hobby <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>修改列类型： <code>ALTER TABLE 表名 MODIFY 列名 列的新类型;</code></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 给author表修改列类型</span><span class="token keyword">alter</span> <span class="token keyword">table</span> author <span class="token keyword">modify</span> address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>列名称、列类型一起修改：<code>ALTER TABLE 表名 CHANGE 原列名 新列名 列名类型;</code></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 改变列名和属性</span><span class="token keyword">alter</span> <span class="token keyword">table</span> author change address addr <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>删除列：<code>ALTER TABLE 表名 DROP 列名;</code></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 删除列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> author <span class="token keyword">drop</span> addr<span class="token punctuation">;</span></code></pre></li><li><p>修改表名：<code>ALTER TABLE 表名 RENAME TO 新表名</code></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改表名</span><span class="token keyword">alter</span> <span class="token keyword">table</span> author <span class="token keyword">rename</span> authors<span class="token punctuation">;</span></code></pre></li><li><p>删除表：<code>ALTER TABLE 表名 DROP 列名;</code></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- !!!删除表，需谨慎操作</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="四、DML-数据操作语言-（！！！很重要）"><a href="#四、DML-数据操作语言-（！！！很重要）" class="headerlink" title="四、DML(数据操作语言)（！！！很重要）"></a>四、DML(数据操作语言)（！！！很重要）</h3><p>该语言用来对表记录进行<strong>操作（增、删、改）</strong>，<u>不包含查询</u>。</p><h4 id="1、插入数据"><a href="#1、插入数据" class="headerlink" title="1、插入数据"></a>1、插入数据</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>authors<span class="token punctuation">`</span> <span class="token punctuation">(</span>aut_name<span class="token punctuation">,</span>gander<span class="token punctuation">,</span>country<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>hobby<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'海伦·凯勒'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token string">'漂亮国'</span><span class="token punctuation">,</span><span class="token string">'1960-1-1'</span><span class="token punctuation">,</span><span class="token string">'旅游'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>authors<span class="token punctuation">`</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'余华'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'中国'</span><span class="token punctuation">,</span><span class="token string">'1970-1-1'</span><span class="token punctuation">,</span><span class="token string">'看书'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>说明:</strong></p><ol><li>在数据库中所有的<strong>字符串类型，必须使用单引号</strong>。</li><li>(列名1，列名2，列名3)可省略，表示按照表中的顺序插入。但不建议采取这种写法，因为降低了程序的可读性。</li></ol><p>当然我们还可以批量插入：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 批量插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>authors<span class="token punctuation">`</span> <span class="token punctuation">(</span>aut_name<span class="token punctuation">,</span>gander<span class="token punctuation">,</span>country<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>hobby<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'海伦·凯勒'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token string">'漂亮国'</span><span class="token punctuation">,</span><span class="token string">'1960-1-1'</span><span class="token punctuation">,</span><span class="token string">'旅游'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'余华'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'中国'</span><span class="token punctuation">,</span><span class="token string">'1970-1-1'</span><span class="token punctuation">,</span><span class="token string">'看书'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 可批量插入</span></code></pre><h4 id="2、修改记录"><a href="#2、修改记录" class="headerlink" title="2、修改记录"></a>2、修改记录</h4><p>修改某列的全部值：<code>update 表名 set 列名1=列值1(，列名2=列值2)(, ... );</code></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改数据</span><span class="token keyword">update</span> <span class="token punctuation">`</span>authors<span class="token punctuation">`</span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">'鲁迅'</span><span class="token punctuation">,</span>country<span class="token operator">=</span><span class="token string">'中国'</span><span class="token punctuation">;</span></code></pre><p>上边的语句会改表中所有的数据全部修改，因此我们可以使用where语句进行限制，</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token punctuation">`</span>authors<span class="token punctuation">`</span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">'马云'</span> <span class="token keyword">where</span> aut_id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 限制条件可以是其他逻辑运算</span></code></pre><p>where是一个很关键的关键字，我们可以使用where关键字实现丰富的筛选，他很像我们的if语句，可以使用各种条件运算：</p><p>可使用的逻辑运算符如下：<code>=、!=、&lt;&gt;、&lt;、&gt;、&gt;=、&lt;=、between...and、in(…)、is null、not、or、and</code>，其中in(a,b,… )的用法表示集合，选中限制下的那几条数据。</p><ul><li><code>where aut_id &gt;1</code></li><li><code>where aut_id in (1,3,5) -- 修改指定的三条数据</code></li><li><code>where aut_id between 1 and 4 -- 修改从id从1到4的数据</code></li><li><code>where aut_id &gt;1 and aut_name=&#39;xxx&#39; --多条限制 </code></li><li><code>where aut_name is null -- 修改为空的</code></li><li><code>where aut_name is not null -- 修改不为空的</code> </li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 字符串也使用"="比较，不是"=="也不是"equals"</span><span class="token keyword">update</span> <span class="token punctuation">`</span>authors<span class="token punctuation">`</span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">'赵四'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 使用in关键字</span><span class="token keyword">update</span> <span class="token punctuation">`</span>authors<span class="token punctuation">`</span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>country<span class="token operator">=</span><span class="token string">'中国'</span> <span class="token keyword">where</span> aut_id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 修改指定的两条数据</span><span class="token comment" spellcheck="true">-- 限制条件可以是其他任何逻辑运算</span><span class="token keyword">update</span> <span class="token punctuation">`</span>authors<span class="token punctuation">`</span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">'王五'</span><span class="token punctuation">,</span>country<span class="token operator">=</span><span class="token string">'中国'</span> <span class="token keyword">where</span> gander <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token operator">and</span> country <span class="token operator">=</span> <span class="token string">'中国'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 使用between...and关键字</span><span class="token keyword">update</span> <span class="token punctuation">`</span>authors<span class="token punctuation">`</span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">'张伟'</span><span class="token punctuation">,</span>country<span class="token operator">=</span><span class="token string">'中国'</span> <span class="token keyword">where</span> aut_id <span class="token operator">between</span> <span class="token number">5</span> <span class="token operator">and</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 空值使用is null \  is not null</span><span class="token keyword">update</span> <span class="token punctuation">`</span>authors<span class="token punctuation">`</span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">'王五'</span><span class="token punctuation">,</span>country<span class="token operator">=</span><span class="token string">'中国'</span> <span class="token keyword">where</span> birthday <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><h4 id="3、删除数据"><a href="#3、删除数据" class="headerlink" title="3、删除数据"></a>3、删除数据</h4><p>语法：<code>delete from 表名 (where 条件);</code></p><pre class=" language-text"><code class="language-text">-- !!!删除表,删除条件可以是任何的逻辑运算（in,between...）delete from authors; -- delete是按行删，俗称删库跑路</code></pre><p>不加where条件时会删除表中所有的记录，所以为了防止这种失误操作，很多数据库往往都会有备份。</p><pre class=" language-mssql"><code class="language-mssql">-- 删除指定行的数据delete from author where auth_id = 1;</code></pre><p>还有一个关键字：truncate，truncate是DDL语言(数据定义语言)，操作立即生效，原数据不会放到rollback segment中，不能回滚。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 不可随意使用truncate</span><span class="token keyword">truncate</span> <span class="token keyword">table</span> authors<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- truncate会直接删掉整张表，再重新建表</span></code></pre><ul><li>当表被truncate后，表和索引的所占空间会恢复到初始大小，delete操作不会减少表和索引的所占空间。</li><li>truncate和delete只删除数据，drop则删除整个表（结构和数据）。</li><li>truncate速度快，效率高，可以理解为先把表删除了，再重新建立。</li><li>truncate和delete均不会使表结构及其列、约束、索引等发生改变。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库 第一章 MySQL数据库介绍及环境搭建</title>
      <link href="/2022/10/06/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/10/06/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库-第一章-MySQL数据库介绍及环境搭建"><a href="#MySQL数据库-第一章-MySQL数据库介绍及环境搭建" class="headerlink" title="MySQL数据库 第一章 MySQL数据库介绍及环境搭建"></a>MySQL数据库 第一章 MySQL数据库介绍及环境搭建</h1><h2 id="一、数据库的概念"><a href="#一、数据库的概念" class="headerlink" title="一、数据库的概念"></a>一、数据库的概念</h2><ul><li>数据库是【<strong>按照数据结构来组织、存储和管理数据的仓库</strong>】，<u>是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合</u>。</li><li>数据对于公司来说是最宝贵的财富之一，而程序员的工作就是对数据的管理，包括运算、流转、存储、展示等，数据库的最重要的功能就是【<strong>存储数据</strong>】，绝大部分的数据需要进行持久化，长期保存，而数据库就可以很好的帮助我们完成这个工作。</li></ul><h2 id="二、MySQL介绍"><a href="#二、MySQL介绍" class="headerlink" title="二、MySQL介绍"></a>二、MySQL介绍</h2><ul><li>MySQL是一个【<strong>关系型数据库管理系统</strong>】，由瑞典【MySQL AB】公司开发，属于 【Oracle】旗下产品。MySQL 是最流行的【关系型数据库管理系统】之一，在 【WEB】应用方面，MySQL是最好的 <strong>【RDBMS】</strong> (Relational Database Management System，<u>关系数据库管理系统)</u> 应用软件之一。</li><li>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</li><li>MySQL所使用的 【SQL 语言】是用于访问【数据库】的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，<u>由于其体积小、速度快、总体拥有成本低，尤其是【开放源码】这一特点</u>，一般中小型网站的开发都选择 MySQL 作为网站数据库。</li></ul><h2 id="三、MySQL的安装"><a href="#三、MySQL的安装" class="headerlink" title="三、MySQL的安装"></a>三、MySQL的安装</h2><p>社区版官方下载网站：</p><p><a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202210140120077.jpg" alt="Snipaste_2022-10-05_15-46-13"></p><p>基本的安装过程如下：</p><p><img src="https://ydlclass.com/doc21xnv/assets/image-20220419111843961.1b721a3e.png" alt="image-20220419111843961"></p><p>下载后我们可以自定义安装：</p><p>选择安装server和两个客户端进行体验：</p><p><img src="https://ydlclass.com/doc21xnv/assets/image-20220421193949698.6e202212.png" alt="image-20220419111843961"></p><p>自己可以体验一下workbench和mysqlsh。</p><h2 id="四、安装navicat"><a href="#四、安装navicat" class="headerlink" title="四、安装navicat"></a>四、安装navicat</h2><p>需要破解：破解过程看视频。</p><h2 id="五、基本概念"><a href="#五、基本概念" class="headerlink" title="五、基本概念"></a>五、基本概念</h2><h3 id="1、数据库"><a href="#1、数据库" class="headerlink" title="1、数据库"></a>1、数据库</h3><p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。在mysql中可以创建多个数据库，一个数据库可以管理很多张表。</p><p>有个很形象的对比，例如execl中的一个execl文件就是一个数据库，一个sheet页就是一张表，表里边可以有所需要的数据：</p><p>查看所有数据库：<code>SHOW DATABASES;</code></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span></code></pre><p>我们可以在登陆 MySQL 服务后，使用 <strong>create</strong> 命令创建数据库，语法如下，<u>两条sql等效</u>:</p><p><code>CREATE DATABASE 数据库名;</code>    or     <code>CREATE SCHEMA 数据库名;</code></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> student<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 或用create schema student;</span></code></pre><p>使用数据库：<code>USE 数据库名;</code></p><pre class=" language-text"><code class="language-text">use student;</code></pre><h3 id="2、表"><a href="#2、表" class="headerlink" title="2、表"></a>2、表</h3><p><u>表（TABLE）是数据库中用来存储数据的对象，是有结构的数据的集合</u>，是整个数据库系统的基础。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2022/08/02/MarkDown%E8%AF%AD%E6%B3%95/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/08/02/MarkDown%E8%AF%AD%E6%B3%95/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>6级标题：</p><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><p>引用：</p><blockquote><p>这是一段引用</p></blockquote><p>有序列表：<br>把大象放进冰箱<br>1.打开冰箱<br>2.把大象塞进去<br>3.关上冰箱</p><p>无序列表：</p><ul><li>阿里巴巴</li><li>华为云</li></ul><ul><li>千叶结锤</li><li>稚晖君</li></ul><p>任务列表：<br>明天要做的事：</p><ul><li><input disabled="" type="checkbox"> 吃饭</li><li><input checked="" disabled="" type="checkbox"> 睡觉</li><li><input checked="" disabled="" type="checkbox"> 打豆豆</li></ul><p>代码块：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>数学公式：<br>$$<br>\frac{\partial f}{\partial x} = 2\sqrt{a}x<br>$$</p><p>表格：<br>|姓名|年龄|成绩|<br>|:—|—:|:—:|<br>|张三|19|99|<br>|李四|20|88|</p><p>脚注：</p><p>内容型</p><p>一键三连<a href="%E6%8A%95%E5%B8%81%E3%80%81%E6%94%B6%E8%97%8F">^三连</a></p><h2 id="添加横线："><a href="#添加横线：" class="headerlink" title="添加横线："></a>添加横线：</h2><p>链接型</p><p>引用链接：<br><a href="www.baidu.com" title="搜索引擎">百度</a></p><p><a href="www.baidu.com" title="搜索引擎">百度</a></p><p>跳转链接：<br>请参考<a href="#%E6%A0%87%E9%A2%981">标题1</a></p><p>ULR:<br><a href="http://www.baidu.com/">http://www.baidu.com</a></p><p>图片链接：<br><img src="https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png" alt="百度" title="百度搜索"></p><p>其他行内格式：</p><p>斜体：<em>斜体</em></p><p>加粗：<strong>加粗</strong></p><p>行内代码：<code>printf()</code></p><p>下划线：<u>下划线</u></p><p>表情符号：:smile:</p><p>行内数学公式：$\theta=x^2$</p><p>化学式：H<del>2</del>O</p><p>次方：X^2^</p><p>文字高亮：==这是一段高亮文字==</p><p>嵌入视频：</p><iframe src="//player.bilibili.com/player.html?aid=327623069&bvid=BV1JA411h7Gw&cid=171385214&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2021/07/14/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/14/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="用MarkDown进行博文编写"><a href="#用MarkDown进行博文编写" class="headerlink" title="用MarkDown进行博文编写"></a>用MarkDown进行博文编写</h1><span id="more"></span> <h2 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h2><p>使用标题时需要用#号  </p><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>这是第一个段落内容 </p><p>这是第二个段落内容</p><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><blockquote><p>这是一段引用段落，将会被高亮显示</p></blockquote><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>[网易云] (<a href="https://music.163.com/?from=infinity">https://music.163.com/?from=infinity</a>)</p><h2 id="风景图"><a href="#风景图" class="headerlink" title="风景图"></a>风景图</h2><p><img src="https://img.zcool.cn/community/01d5725e6eea9ba80121651859942f.jpg@1280w_1l_2o_100sh.jpg" alt="图片1"></p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>无序列表项</li><li>无序列表项</li><li>无序列表项 <h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2></li></ul><ol><li>有序列表项1</li><li>有序列表项2</li><li>有序列表项3 <h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2></li></ol><hr><hr><hr><hr><p>（ps：只要符号不小于三个以上都可显示分割线。）</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/04/01/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D/hello-world/"/>
      <url>/2021/04/01/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="应用分类标签"><a href="#应用分类标签" class="headerlink" title="应用分类标签"></a>应用分类标签</h1><hr><p>title: Hello World<br>categories: 说明<br>top: 5<br>tags: 随笔</p><hr><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><span id="more"></span> <p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
