<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AriesfunのBlog</title>
  
  <subtitle>欢迎来到我の小破站!</subtitle>
  <link href="https://ariesfun.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://ariesfun.gitee.io/"/>
  <updated>2023-05-21T17:21:03.192Z</updated>
  <id>https://ariesfun.gitee.io/</id>
  
  <author>
    <name>Ariesfun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AcWing周赛 题解及知识点汇总 更新中...</title>
    <link href="https://ariesfun.gitee.io/posts/6086.html"/>
    <id>https://ariesfun.gitee.io/posts/6086.html</id>
    <published>2023-05-07T06:07:39.419Z</published>
    <updated>2023-05-21T17:21:03.192Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="AcWing-周赛-第104场题解"><a href="#AcWing-周赛-第104场题解" class="headerlink" title="AcWing-周赛 第104场题解"></a>AcWing-周赛 第104场题解</h2><h4 id="T1-4981-第几项"><a href="#T1-4981-第几项" class="headerlink" title="T1: 4981. 第几项"></a>T1: <a href="https://www.acwing.com/problem/content/4984/">4981. 第几项</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6475895/">AcWing 4981. 第几项</a></p><hr><h4 id="T2-4982-进制"><a href="#T2-4982-进制" class="headerlink" title="T2: 4982. 进制"></a>T2: <a href="https://www.acwing.com/problem/content/4985/">4982. 进制</a></h4><p><strong>考察知识点</strong>：<u>进位制，位运算，枚举</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6482361/">AcWing 4982. 进制</a></p><hr><h4 id="T2-4983-最大的数"><a href="#T2-4983-最大的数" class="headerlink" title="T2: 4983. 最大的数"></a>T2: <a href="https://www.acwing.com/problem/content/4986/">4983. 最大的数</a></h4><p><strong>考察知识点</strong>：<u>枚举，思维题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6482409/">AcWing 4983. 最大的数</a></p><hr><h2 id="AcWing-周赛-第103场题解"><a href="#AcWing-周赛-第103场题解" class="headerlink" title="AcWing-周赛 第103场题解"></a>AcWing-周赛 第103场题解</h2><h4 id="T1-4978-解方程"><a href="#T1-4978-解方程" class="headerlink" title="T1: 4978. 解方程"></a>T1: <a href="https://www.acwing.com/problem/content/4981/">4978. 解方程</a></h4><p><strong>考察知识点</strong>：<u>解方程，枚举</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6441920/">AcWing 4978. 解方程</a></p><hr><h4 id="T2-4979-合适的环"><a href="#T2-4979-合适的环" class="headerlink" title="T2: 4979. 合适的环"></a>T2: <a href="https://www.acwing.com/problem/content/4982/">4979. 合适的环</a></h4><p><strong>考察知识点</strong>：<u>无向图存储，枚举</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6445870/">AcWing 4979. 合适的环</a></p><hr><h4 id="T3-4980-猜数字"><a href="#T3-4980-猜数字" class="headerlink" title="T3: 4980. 猜数字"></a>T3: <a href="https://www.acwing.com/problem/content/4983/">4980. 猜数字</a></h4><p><strong>考察知识点</strong>：<u>思维题，(试除法)分解质因数，枚举，STL</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6446382/">AcWing 4980. 猜数字</a></p><hr><h2 id="AcWing-周赛-第102场题解"><a href="#AcWing-周赛-第102场题解" class="headerlink" title="AcWing-周赛 第102场题解"></a>AcWing-周赛 第102场题解</h2><h4 id="T1-4975-或运算"><a href="#T1-4975-或运算" class="headerlink" title="T1: 4975. 或运算"></a>T1: <a href="https://www.acwing.com/problem/content/4978/">4975. 或运算</a></h4><p><strong>考察知识点</strong>：<u>位运算</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6408375/">AcWing 4975. 或运算</a></p><hr><h4 id="T2-4976-倍增"><a href="#T2-4976-倍增" class="headerlink" title="T2: 4976. 倍增 "></a>T2: <a href="https://www.acwing.com/problem/content/4979/">4976. 倍增 </a></h4><p><strong>考察知识点</strong>：<u>分解质因数，思维题，理清题意</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6408515/">AcWing 4976. 倍增</a></p><hr><h4 id="T3-4977-三元组"><a href="#T3-4977-三元组" class="headerlink" title="T3: 4977. 三元组"></a>T3: <a href="https://www.acwing.com/problem/content/4980/">4977. 三元组</a></h4><p><strong>考察知识点</strong>：<u>枚举，乘法原理，哈希表，类前后缀分解</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6410962/">AcWing 4977. 三元组</a></p><hr><h2 id="AcWing-周赛-第101场题解"><a href="#AcWing-周赛-第101场题解" class="headerlink" title="AcWing-周赛 第101场题解"></a>AcWing-周赛 第101场题解</h2><h4 id="T1-4972-解方程"><a href="#T1-4972-解方程" class="headerlink" title="T1: 4972. 解方程 "></a>T1: <a href="https://www.acwing.com/problem/content/4975/">4972. 解方程 </a></h4><p><strong>考察知识点</strong>：<u>解方程，语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6369265/">AcWing 4972. 解方程</a></p><hr><h2 id="AcWing-周赛-第100场题解"><a href="#AcWing-周赛-第100场题解" class="headerlink" title="AcWing-周赛 第100场题解"></a>AcWing-周赛 第100场题解</h2><h4 id="T1-4953-比赛"><a href="#T1-4953-比赛" class="headerlink" title="T1: 4953. 比赛"></a>T1: <a href="https://www.acwing.com/problem/content/4956/">4953. 比赛</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6323965/">AcWing 4953. 比赛</a></p><hr><h4 id="T2-4954-挑选"><a href="#T2-4954-挑选" class="headerlink" title="T2: 4954. 挑选"></a>T2: <a href="https://www.acwing.com/problem/content/4957/">4954. 挑选</a></h4><p><strong>考察知识点</strong>：<u>二进制枚举法</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6331136/">AcWing 4954. 挑选</a></p><hr><h2 id="AcWing-周赛-第99场题解"><a href="#AcWing-周赛-第99场题解" class="headerlink" title="AcWing-周赛 第99场题解"></a>AcWing-周赛 第99场题解</h2><h4 id="T1-4950-四则运算"><a href="#T1-4950-四则运算" class="headerlink" title="T1: 4950. 四则运算"></a>T1: <a href="https://www.acwing.com/problem/content/4953/">4950. 四则运算</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6279695/">AcWing 4950. 四则运算</a></p><hr><h4 id="T2-4951-整理账本"><a href="#T2-4951-整理账本" class="headerlink" title="T2: 4951. 整理账本"></a>T2: <a href="https://www.acwing.com/problem/content/4954/">4951. 整理账本</a></h4><p><strong>考察知识点</strong>：<u>STL的使用，unordered_map、map、vector、pair、sort，</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6282996/">AcWing 4951. 整理账本</a></p><hr><h2 id="AcWing-周赛-第98场题解"><a href="#AcWing-周赛-第98场题解" class="headerlink" title="AcWing-周赛 第98场题解"></a>AcWing-周赛 第98场题解</h2><h4 id="T1-4947-大整数"><a href="#T1-4947-大整数" class="headerlink" title="T1: 4947. 大整数"></a>T1: <a href="https://www.acwing.com/problem/content/4950/">4947. 大整数</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6228724/">AcWing 4947. 大整数</a></p><hr><h4 id="T2-4948-大乘积"><a href="#T2-4948-大乘积" class="headerlink" title="T2: 4948. 大乘积"></a>T2: <a href="https://www.acwing.com/problem/content/4951/">4948. 大乘积</a></h4><p><strong>考察知识点</strong>：<u>语法题，字符串处理</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6238467/">AcWing 4948. 大乘积</a></p><hr><h2 id="AcWing-周赛-第97场题解"><a href="#AcWing-周赛-第97场题解" class="headerlink" title="AcWing-周赛 第97场题解"></a>AcWing-周赛 第97场题解</h2><h4 id="T1-4944-热身计算"><a href="#T1-4944-热身计算" class="headerlink" title="T1: 4944. 热身计算"></a>T1: <a href="https://www.acwing.com/problem/content/4947/">4944. 热身计算</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6125128/">AcWing 4944. 热身计算</a></p><hr><h4 id="T2-4945-比大小"><a href="#T2-4945-比大小" class="headerlink" title="T2: 4945. 比大小"></a>T2: <a href="https://www.acwing.com/problem/content/4948/">4945. 比大小</a></h4><p><strong>考察知识点</strong>：<u>直接模拟，快速幂计算，秦九韶算法</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6125715/">AcWing 4945. 比大小</a></p><hr><h4 id="T3-4946-叶子节点"><a href="#T3-4946-叶子节点" class="headerlink" title="T3: 4946. 叶子节点"></a>T3: <a href="https://www.acwing.com/problem/content/4949/">4946. 叶子节点</a></h4><p><strong>考察知识点</strong>：<u>树的深度优先遍历</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6156437/">AcWing 4946. 叶子节点</a></p><hr><h2 id="第二届ACC-AcWing-Cup-全国联赛"><a href="#第二届ACC-AcWing-Cup-全国联赛" class="headerlink" title="第二届ACC(AcWing Cup)全国联赛"></a>第二届ACC(AcWing Cup)全国联赛</h2><h4 id="T1-4941-凑数"><a href="#T1-4941-凑数" class="headerlink" title="T1: 4941. 凑数"></a>T1: <a href="https://www.acwing.com/problem/content/4944/">4941. 凑数</a></h4><p><strong>考察知识点</strong>：<u>位运算，二进制</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6175836/">AcWing 4941. 凑数</a></p><hr><h4 id="T2-4942-砝码称重"><a href="#T2-4942-砝码称重" class="headerlink" title="T2: 4942. 砝码称重"></a>T2: <a href="https://www.acwing.com/problem/content/4945/">4942. 砝码称重</a></h4><p><strong>考察知识点</strong>：<u>同余性质，n进制</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6177606/">AcWing 4942. 砝码称重</a></p><hr><h2 id="AcWing-周赛-第96场题解"><a href="#AcWing-周赛-第96场题解" class="headerlink" title="AcWing-周赛 第96场题解"></a>AcWing-周赛 第96场题解</h2><h4 id="T1-4876-完美数"><a href="#T1-4876-完美数" class="headerlink" title="T1: 4876. 完美数"></a>T1: <a href="https://www.acwing.com/problem/content/4879/">4876. 完美数</a></h4><p><strong>考察知识点</strong>：<u>完美数，整除性质</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6037798/">AcWing 4876. 完美数</a></p><hr><h4 id="T2-4877-最大价值"><a href="#T2-4877-最大价值" class="headerlink" title="T2: 4877. 最大价值"></a>T2: <a href="https://www.acwing.com/problem/content/4880/">4877. 最大价值</a></h4><p><strong>考察知识点</strong>：<u>DP裸题，完全背包+多重背包组合</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6062906/">AcWing 4877. 最大价值</a></p><hr><h2 id="AcWing-周赛-第95场题解"><a href="#AcWing-周赛-第95场题解" class="headerlink" title="AcWing-周赛 第95场题解"></a>AcWing-周赛 第95场题解</h2><h4 id="T1-4873-简单计算"><a href="#T1-4873-简单计算" class="headerlink" title="T1:4873. 简单计算"></a>T1:<a href="https://www.acwing.com/problem/content/4876/">4873. 简单计算</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5957060/">AcWing 4873. 简单计算</a></p><hr><h4 id="T2-4874-约数"><a href="#T2-4874-约数" class="headerlink" title="T2: 4874. 约数"></a>T2: <a href="https://www.acwing.com/problem/content/4877/">4874. 约数</a></h4><p><strong>考察知识点</strong>：<u>筛质数，线性筛法</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5959789/">AcWing 4874. 约数</a></p><hr><h2 id="AcWing-周赛-第94场题解"><a href="#AcWing-周赛-第94场题解" class="headerlink" title="AcWing-周赛 第94场题解"></a>AcWing-周赛 第94场题解</h2><h4 id="T1-4870-装物品"><a href="#T1-4870-装物品" class="headerlink" title="T1: 4870. 装物品"></a>T1: <a href="https://www.acwing.com/problem/content/4873/">4870. 装物品</a></h4><p><strong>考察知识点</strong>：<u>判断余数，向上取整</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5852668/">AcWing 4870. 装物品</a></p><hr><h2 id="AcWing-周赛-第93场题解"><a href="#AcWing-周赛-第93场题解" class="headerlink" title="AcWing-周赛 第93场题解"></a>AcWing-周赛 第93场题解</h2><h4 id="T1-4867-整除数"><a href="#T1-4867-整除数" class="headerlink" title="T1: 4867. 整除数"></a>T1: <a href="https://www.acwing.com/problem/content/4870/">4867. 整除数</a></h4><p><strong>考察知识点</strong>：<u>除法性质，整除</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5738492/">AcWing 4867. 整除数</a></p><hr><h2 id="AcWing-周赛-第92场题解"><a href="#AcWing-周赛-第92场题解" class="headerlink" title="AcWing-周赛 第92场题解"></a>AcWing-周赛 第92场题解</h2><h4 id="T1-4864-多边形"><a href="#T1-4864-多边形" class="headerlink" title="T1: 4864. 多边形"></a>T1: <a href="https://www.acwing.com/problem/content/4867/">4864. 多边形</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5628101/">AcWing 4864. 多边形</a></p><hr><h2 id="AcWing-周赛-第xx场题解"><a href="#AcWing-周赛-第xx场题解" class="headerlink" title="AcWing-周赛 第xx场题解"></a>AcWing-周赛 第xx场题解</h2><h4 id="T1"><a href="#T1" class="headerlink" title="T1:"></a>T1:</h4><p><strong>考察知识点</strong>：</p><p><strong>题解及分析</strong>：</p><p>ps:还有之前的一些周赛，待整理… (抽空更)</p><hr><h2 id="活动地址"><a href="#活动地址" class="headerlink" title="活动地址"></a>活动地址</h2><p><a href="https://www.acwing.com/activity/1/competition/">竞赛 - AcWing周赛</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;AcWing-周赛-第104场题解&quot;&gt;&lt;a href=&quot;#AcWing-周赛-第104场题解&quot; class=&quot;headerlink&quot; title=&quot;AcWing-周赛 第104场题解&quot;&gt;&lt;/a&gt;AcWing-周赛 第104场题解&lt;/h2&gt;&lt;h4 id=&quot;</summary>
      
    
    
    
    <category term="AcWing周赛" scheme="https://ariesfun.gitee.io/categories/AcWing%E5%91%A8%E8%B5%9B/"/>
    
    
    <category term="C/C++" scheme="https://ariesfun.gitee.io/tags/C-C/"/>
    
    <category term="AcWing" scheme="https://ariesfun.gitee.io/tags/AcWing/"/>
    
    <category term="刷题记录" scheme="https://ariesfun.gitee.io/tags/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础 第四讲 SSH和SCP</title>
    <link href="https://ariesfun.gitee.io/posts/58be.html"/>
    <id>https://ariesfun.gitee.io/posts/58be.html</id>
    <published>2023-04-30T19:40:46.040Z</published>
    <updated>2023-05-01T08:20:52.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux基础-第四讲-SSH和SCP"><a href="#Linux基础-第四讲-SSH和SCP" class="headerlink" title="Linux基础 第四讲 SSH和SCP"></a>Linux基础 第四讲 SSH和SCP</h1><h2 id="1-教程"><a href="#1-教程" class="headerlink" title="1. 教程"></a>1. 教程</h2><h3 id="（1）ssh登录"><a href="#（1）ssh登录" class="headerlink" title="（1）ssh登录"></a>（1）ssh登录</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p><strong>远程登录服务器：ssh user@hostname</strong></p><ul><li>user: 用户名</li><li>hostname: IP地址或域名</li></ul><p><strong>第一次登录</strong>时会提示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;123.57.47.211 (123.57.47.211)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:iy237yysfCe013/l+kpDGfEG9xxHxm0dnxnAbJTPpG8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span><br></pre></td></tr></table></figure><p>输入yes，然后回车即可。</p><p>这样会将该服务器的信息记录在<code>~/.ssh/known_hosts</code>文件中。</p><p>然后输入密码即可登录到远程服务器中。</p><hr><p>默认登录端口号为22。如果想<strong>登录某一特定端口</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname -p 22</span><br></pre></td></tr></table></figure><hr><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>创建文件 <code>~/.ssh/config</code>。</p><p>然后在文件中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host myserver1</span><br><span class="line">    HostName IP地址或域名</span><br><span class="line">    User 用户名</span><br><span class="line"></span><br><span class="line">Host myserver2</span><br><span class="line">    HostName IP地址或域名</span><br><span class="line">    User 用户名</span><br></pre></td></tr></table></figure><p>之后再使用服务器时，可以直接使用别名myserver1、myserver2。</p><p><strong>ssh + myserver1</strong> <strong>使用别名登录</strong></p><hr><h4 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h4><p>创建密钥：<code>ssh-keygen</code><br>然后一直回车即可。</p><p>执行结束后，<code>~/.ssh/</code>目录下会多两个文件：</p><ul><li><p><strong>id_rsa：私钥</strong></p></li><li><p><strong>id_rsa.pub：公钥(可以公开)</strong></p></li></ul><p><strong>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</strong></p><p>例如，想免密登录myserver服务器。则将公钥中的内容，复制到myserver中的**~/.ssh/authorized_keys**文件里即可。</p><p>也可以使用如下命令<strong>一键添加公钥</strong>：</p><p><code>ssh-copy-id myserver</code></p><hr><h4 id="执行命令-自动化运维会用到"><a href="#执行命令-自动化运维会用到" class="headerlink" title="执行命令(自动化运维会用到)"></a>执行命令(自动化运维会用到)</h4><p>命令格式：<code>ssh user@hostname command</code></p><p><strong>命令会在服务端运行</strong></p><p>例如    <code>ssh user@hostname ls -a</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单引号中的<span class="variable">$i</span>可以求值</span></span><br><span class="line"></span><br><span class="line">ssh myserver &#x27;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&#x27;  # 将服务器端的结果返回到当前终端里输出</span><br><span class="line">或者</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">双引号中的<span class="variable">$i</span>不可以求值</span></span><br><span class="line"></span><br><span class="line">ssh myserver &quot;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="（2）scp传文件"><a href="#（2）scp传文件" class="headerlink" title="（2）scp传文件"></a>（2）scp传文件</h3><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>命令格式：    <code>scp source destination</code><br>将source路径下的文件复制到destination中</p><p><strong>一次复制多个文件：</strong></p><p><code>scp source1 source2 destination</code></p><p><strong>复制文件夹：</strong></p><p><code>scp -r ~/tmp myserver:/home/acs/</code>  <strong># -r要放在路径前面</strong><br>将本地家目录中的tmp文件夹复制到myserver服务器中的<code>/home/acs/</code>目录下。(家目录)</p><p><code>scp -r ~/tmp myserver:homework/</code><br>将本地家目录中的tmp文件夹复制到myserver服务器中的<code>~/homework/</code>目录下。</p><p><code>scp -r myserver:homework .</code><br>将myserver服务器中的~/homework/文件夹复制到本地的当前路径下。</p><p>ps:</p><p>对于传文件，文件传过去，对于<strong>文件名不冲突的文件，是以追加的方式</strong>。(类似cp命令)</p><p>而所传的文件在另一边已经有了<strong>同名时，是以覆盖的形式</strong>, 文件夹不覆盖。</p><p>指定服务器的端口号：</p><p><code>scp -P 22 source1 source2 destination</code><br>注意： <strong>scp的-r -P等参数尽量加在source和destination之前</strong>。</p><p><strong>使用scp配置其他服务器的vim和tmux</strong> (y总的传家配置hh)<br><strong>scp ~/.vimrc ~/.tmux.conf myserver:</strong></p><hr><h2 id="2-获取ssh教程配套的远程服务器账号的信息"><a href="#2-获取ssh教程配套的远程服务器账号的信息" class="headerlink" title="2.获取ssh教程配套的远程服务器账号的信息"></a>2.获取ssh教程配套的远程服务器账号的信息</h2><p><code>homework 4 getinfo</code></p><hr><h2 id="3-创建作业-amp-测试作业的正确性"><a href="#3-创建作业-amp-测试作业的正确性" class="headerlink" title="3. 创建作业 &amp; 测试作业的正确性"></a>3. 创建作业 &amp; 测试作业的正确性</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">homework 4 create 可以重新创建所有lesson_4的作业</span><br><span class="line">homework 4 create id 可以单独创建lesson_4的第id个作业. e.g.</span><br><span class="line">    homework 4 create 0 可以只重新创建lesson_4的第0个作业</span><br><span class="line">homework 4 test 可以评测lesson_4的所有作业</span><br></pre></td></tr></table></figure><hr><h2 id="4-作业"><a href="#4-作业" class="headerlink" title="4. 作业"></a>4. 作业</h2><p>创建好作业后，先进入文件夹/home/acs/homework/lesson_4/，然后：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(0) 进入homework_0文件夹，要求：</span><br><span class="line">    [1] 该文件夹内容为空</span><br><span class="line">    [2] 配置服务器账号的密钥登陆方式。服务器信息可以通过如下命令获得：</span><br><span class="line">        homework 4 getinfo</span><br><span class="line">        将服务器账号的名称（Host）配置成：myserver</span><br><span class="line">        </span><br><span class="line">(1) 进入homework_1文件夹，下列描述中的“本地”均表示当前文件夹。要求：</span><br><span class="line">    [1] 在myserver服务器上创建并清空文件夹：~/homework/lesson_4/homework_1/</span><br><span class="line">    [2] 将本地的main.cpp文件上传到myserver中的~/homework/lesson_4/homework_1/目录中。</span><br><span class="line">    [3] 在本地创建文件夹dir。</span><br><span class="line">    [4] 将myserver中的/etc/lsb-release文件复制到dir中。</span><br><span class="line">    </span><br><span class="line">(2) 进入homework_2文件夹，下列描述中的“本地”均表示当前文件夹，要求：</span><br><span class="line">    [1] 在myserver服务器上创建并清空文件夹：~/homework/lesson_4/homework_2/</span><br><span class="line">    [2] 将本地的dir文件夹上传到myserver中的~/homework/lesson_4/homework_2/目录中。</span><br><span class="line">    </span><br><span class="line">(3) 进入homework_3文件夹，下列描述中的“本地”均表示当前文件夹，要求：</span><br><span class="line">    [1] 在本地创建文件夹dir。</span><br><span class="line">    [2] 将myserver中的/var/lib/locales/supported.d文件夹下载到本地dir文件夹中。</span><br><span class="line">    </span><br><span class="line">(4) 进入homework_4文件夹，编写脚本remote_mkdir.sh和remote_rmdir.sh，要求：</span><br><span class="line">    [1] 在myserver服务器上创建并清空文件夹：~/homework/lesson_4/homework_4/</span><br><span class="line">    [2] 本地目录下仅包含remote_mkdir.sh和remote_rmdir.sh</span><br><span class="line">    [3] remote_mkdir.sh和remote_rmdir.sh具有可执行权限</span><br><span class="line">    [4] remote_mkdir.sh接收一个传入参数。格式为 ./remote_mkdir.sh directory_name</span><br><span class="line">        该操作可以在myserver服务器上的~/homework/lesson_4/homework_4/目录下，创建一个名为directory_name的文件夹</span><br><span class="line">    [5] remote_rmdir.sh接收一个传入传输。格式为 ./remote_rmdir.sh directory_name</span><br><span class="line">        该操作可以将myserver服务器上的~/homework/lesson_4/homework_4/目录下的名为directory_name的文件夹删掉。</span><br><span class="line">    [6] 注意：传入的文件参数可能包含空格。两个脚本均不需要判断传入参数的合法性。</span><br></pre></td></tr></table></figure><hr><p><strong>章节作业打卡笔记：</strong><br><a href="https://www.acwing.com/activity/content/code/content/6375445/">homework_0</a>    <a href="https://www.acwing.com/activity/content/code/content/6375538/">homework_1</a>    <a href="https://www.acwing.com/activity/content/code/content/6375639/">homework_2</a><br><a href="https://www.acwing.com/activity/content/code/content/6375675/">homework_3</a>    <a href="https://www.acwing.com/activity/content/code/content/6375762/">homework_4</a></p><hr><h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5.参考资料"></a>5.参考资料</h2><p>讲义整理自Linux基础课讲义，及评论区的问答整理</p><p><a href="https://www.acwing.com/activity/content/57/">Linux基础课程-AcWing</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux基础-第四讲-SSH和SCP&quot;&gt;&lt;a href=&quot;#Linux基础-第四讲-SSH和SCP&quot; class=&quot;headerlink&quot; title=&quot;Linux基础 第四讲 SSH和SCP&quot;&gt;&lt;/a&gt;Linux基础 第四讲 SSH和SCP&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="Linux基础知识" scheme="https://ariesfun.gitee.io/categories/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Linux" scheme="https://ariesfun.gitee.io/tags/Linux/"/>
    
    <category term="ssh" scheme="https://ariesfun.gitee.io/tags/ssh/"/>
    
    <category term="scp" scheme="https://ariesfun.gitee.io/tags/scp/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘与机器学习 线性回归设计 实训1</title>
    <link href="https://ariesfun.gitee.io/posts/4f1a.html"/>
    <id>https://ariesfun.gitee.io/posts/4f1a.html</id>
    <published>2023-04-30T07:52:52.221Z</published>
    <updated>2023-04-30T07:52:52.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据挖掘与机器学习-线性回归设计-实训1"><a href="#数据挖掘与机器学习-线性回归设计-实训1" class="headerlink" title="数据挖掘与机器学习 线性回归设计 实训1"></a>数据挖掘与机器学习 线性回归设计 实训1</h2><h3 id="（1）实训目的"><a href="#（1）实训目的" class="headerlink" title="（1）实训目的"></a>（1）实训目的</h3><p><strong>1.掌握回归的基本思想；</strong></p><p><strong>2.掌握梯度法的基本原理 。</strong></p><hr><h3 id="（2）主要内容"><a href="#（2）主要内容" class="headerlink" title="（2）主要内容"></a>（2）主要内容</h3><p>1.实现一元线性回归；</p><p>2.画出散点图、回归参数与迭代次数的变化曲线；</p><p>3.分析不同数据变化对回归结果的影响。</p><hr><h3 id="（3）具体处理步骤"><a href="#（3）具体处理步骤" class="headerlink" title="（3）具体处理步骤"></a>（3）具体处理步骤</h3><h4 id="1-导入数据集，绘制数据的散点图"><a href="#1-导入数据集，绘制数据的散点图" class="headerlink" title="1. 导入数据集，绘制数据的散点图"></a>1. 导入数据集，绘制数据的散点图</h4><p><a href="https://pan.baidu.com/s/1jO2p0CSBQedb7QE7PkbJ3A?pwd=2023">data1.txt 数据集下载</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data=np.loadtxt(<span class="string">&quot;data1.txt&quot;</span>, delimiter=<span class="string">&quot;,&quot;</span>) <span class="comment"># 读取数据集，列索引分别是x和y</span></span><br><span class="line"></span><br><span class="line">x=data[:,<span class="number">0</span>:<span class="number">1</span>] <span class="comment"># 取x这列所有值,训练数据</span></span><br><span class="line">y=data[:,<span class="number">1</span>:]</span><br><span class="line">plt.scatter(x,y) <span class="comment"># 绘制散点图</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291223504.png" alt="img-202304291223504"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.shape <span class="comment"># 原数据集形状，n行m列</span></span><br></pre></td></tr></table></figure><pre><code>(97, 2)</code></pre><hr><h4 id="2-对特征进行归一化处理"><a href="#2-对特征进行归一化处理" class="headerlink" title="2. 对特征进行归一化处理"></a>2. 对特征进行归一化处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">featureNormalize</span>(<span class="params">x</span>): <span class="comment"># （特征值x的取值差别较大）需消除特征值的量纲</span></span><br><span class="line">    avg = x.mean()</span><br><span class="line">    sstd = np.std(x, axis=<span class="number">0</span>, ddof=<span class="number">1</span>) <span class="comment"># 进行标准差标准化处理（ddof是分母为n-1,无偏估计）</span></span><br><span class="line">    x = (x-avg)/sstd</span><br><span class="line">    <span class="keyword">return</span> x, avg, sstd</span><br></pre></td></tr></table></figure><hr><h4 id="3-1-定义损失函数-h-theta是预测函数（假设函数），j-theta是损失函数"><a href="#3-1-定义损失函数-h-theta是预测函数（假设函数），j-theta是损失函数" class="headerlink" title="3.1 定义损失函数   h_theta是预测函数（假设函数），j_theta是损失函数"></a>3.1 定义损失函数   h_theta是预测函数（假设函数），j_theta是损失函数</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291221890.png" alt="img-202304291221890" style="zoom:67%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291221178.png" alt="img-202304291221178" style="zoom: 80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">computeCost</span>(<span class="params">x, y, theta</span>): <span class="comment"># 损失函数j_theta</span></span><br><span class="line">    m = x.shape[<span class="number">0</span>] <span class="comment"># 获取第一维度的长度（行数），即X特征项对应的个数</span></span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>((np.dot(x,theta) - y)**<span class="number">2</span>)/(<span class="number">2</span>*m)</span><br></pre></td></tr></table></figure><hr><h4 id="3-2-梯度下降算法"><a href="#3-2-梯度下降算法" class="headerlink" title="3.2 梯度下降算法"></a>3.2 梯度下降算法</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291222715.png" alt="img-202304291222715" style="zoom:67%;" /><h6 id="利用公式-theta-是预测函数每项的系数，times：梯度下降次数，alpha：梯度下降参数变化率"><a href="#利用公式-theta-是预测函数每项的系数，times：梯度下降次数，alpha：梯度下降参数变化率" class="headerlink" title="利用公式 theta : 是预测函数每项的系数，times：梯度下降次数，alpha：梯度下降参数变化率"></a>利用公式 theta : 是预测函数每项的系数，times：梯度下降次数，alpha：梯度下降参数变化率</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gradientDescent</span>(<span class="params">x, y, theta, times, alpha</span>):</span><br><span class="line">    theta_0 = np.ones(x.shape[<span class="number">0</span>]).T</span><br><span class="line">    x = np.insert(x, <span class="number">0</span>, theta_0, axis=<span class="number">1</span>) <span class="comment"># 对原始数据加入一个全为1的列，方便后续计算</span></span><br><span class="line">    m = x.shape[<span class="number">0</span>] <span class="comment"># 行数</span></span><br><span class="line">    n = x.shape[<span class="number">1</span>] <span class="comment"># 列数</span></span><br><span class="line">    costs = np.zeros(times) <span class="comment"># 初始化损失数组</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(times): <span class="comment"># 循环迭代，计算梯度下降的值</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            theta[j] = theta[j] + (alpha/m) * np.<span class="built_in">sum</span>(y - np.dot(x,theta) * x[:,j].reshape(-<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        costs[num] = computeCost(x, y, theta)</span><br><span class="line">    <span class="keyword">return</span> costs <span class="comment"># 返回每次迭代计算的损失</span></span><br></pre></td></tr></table></figure><hr><h4 id="4-计算求得的直线"><a href="#4-计算求得的直线" class="headerlink" title="4. 计算求得的直线"></a>4. 计算求得的直线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x_orgin=x <span class="comment"># 分别取x，y这列的值</span></span><br><span class="line">y_orgin=y</span><br><span class="line"></span><br><span class="line">x1, avg, sstd = featureNormalize(x_orgin) <span class="comment"># 得到经特征归一化后的特征值x</span></span><br><span class="line"></span><br><span class="line">theta = np.zeros(x1.shape[<span class="number">1</span>]+<span class="number">1</span>).reshape(-<span class="number">1</span>,<span class="number">1</span>) <span class="comment"># 变为1列的列向量（2个theta值）</span></span><br><span class="line">times = <span class="number">600</span></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">costs = gradientDescent(x1, y_orgin, theta, times, alpha)</span><br><span class="line"></span><br><span class="line">plt.scatter(x1, y_orgin) <span class="comment"># x1是（-1~4）</span></span><br><span class="line">h_theta = theta[<span class="number">0</span>]+theta[<span class="number">1</span>]*x1 <span class="comment"># 预测的直线</span></span><br><span class="line">plt.plot(x1, h_theta, color= <span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291224464.png" alt="img-202304291224464"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;预测函数: y = %f + %f * x&#x27;</span> % (theta[<span class="number">0</span>], theta[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证，x=3时，y应该在23附近</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x=3, y = %f&#x27;</span> % (theta[<span class="number">0</span>] + <span class="number">3</span>*theta[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><pre><code>预测函数: y = 5.825092 + 5.884855 * xx=3, y = 23.479657</code></pre><hr><h4 id="5-画损失函数，损失随迭代次数变化的曲线"><a href="#5-画损失函数，损失随迭代次数变化的曲线" class="headerlink" title="5. 画损失函数，损失随迭代次数变化的曲线"></a>5. 画损失函数，损失随迭代次数变化的曲线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_times = np.linspace(<span class="number">1</span>,times,times)</span><br><span class="line">plt.plot(x_times, costs[<span class="number">0</span>:times], color=<span class="string">&quot;orange&quot;</span>,linewidth=<span class="number">3</span>) <span class="comment"># 纵坐标是损失值</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291224616.png" alt="img-202304291224616"></p><hr><h4 id="6-结果分析"><a href="#6-结果分析" class="headerlink" title="6. 结果分析"></a>6. 结果分析</h4><p><strong>分析可知，当迭代次数到200次左右时，损失函数趋于收敛损失值达到最小值，迭代次数太多，可能使得出现过拟合现象</strong></p><p><strong>alpha 越小时，即步长越小，使得训练过程中的变化速度较慢，但可能更易于损失函数收敛</strong></p><hr><h3 id="（4）参考资料"><a href="#（4）参考资料" class="headerlink" title="（4）参考资料"></a>（4）参考资料</h3><p><a href="https://pan.baidu.com/s/1jO2p0CSBQedb7QE7PkbJ3A?pwd=2023">data1.txt 数据集下载</a></p><p><a href="https://www.bilibili.com/video/BV1yf4y1o7A5/?spm_id_from=333.788&vd_source=29b001fc6ca0d80398a993dc92c03a9b">机器学习讲解-B站</a></p><p><a href="https://www.bilibili.com/video/BV1GZ4y1e7fK/?share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">使用梯度下降法求解线性回归问题</a></p><p><a href="https://www.acwing.com/blog/content/25336/">Python机器学习笔记 - AcWing</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据挖掘与机器学习-线性回归设计-实训1&quot;&gt;&lt;a href=&quot;#数据挖掘与机器学习-线性回归设计-实训1&quot; class=&quot;headerlink&quot; title=&quot;数据挖掘与机器学习 线性回归设计 实训1&quot;&gt;&lt;/a&gt;数据挖掘与机器学习 线性回归设计 实训1&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="数据挖掘与机器学习" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Matplotlib" scheme="https://ariesfun.gitee.io/tags/Matplotlib/"/>
    
    <category term="Numpy" scheme="https://ariesfun.gitee.io/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 上机实践4（Matplotlib 数据可视化）</title>
    <link href="https://ariesfun.gitee.io/posts/1908.html"/>
    <id>https://ariesfun.gitee.io/posts/1908.html</id>
    <published>2023-04-30T07:30:51.829Z</published>
    <updated>2023-04-30T07:34:06.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-上机实践4（Matplotlib-数据可视化）"><a href="#数据分析与可视化-上机实践4（Matplotlib-数据可视化）" class="headerlink" title="数据分析与可视化 上机实践4（Matplotlib 数据可视化）"></a>数据分析与可视化 上机实践4（Matplotlib 数据可视化）</h2><h3 id="一、实践目的"><a href="#一、实践目的" class="headerlink" title="一、实践目的"></a>一、实践目的</h3><p><strong>1.了解matplotlib库的基本功能。</strong></p><p><strong>2.掌握matplotlib库的使用方法</strong>。 </p><hr><h3 id="二、数据集介绍"><a href="#二、数据集介绍" class="headerlink" title="二、数据集介绍"></a>二、数据集介绍</h3><p>食品偏好数据集统计了2019年不同国家人民对不同食物的偏好情况。数据共计288条，各数据字段含义如下表所示。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301405896.png" alt="img-202304301405896"></p><p><a href="https://pan.baidu.com/s/1XowxkVb9QLds3itkLlL8HA?pwd=2023">food.csv 数据集下载</a></p><hr><h3 id="三、实践内容要求"><a href="#三、实践内容要求" class="headerlink" title="三、实践内容要求"></a>三、实践内容要求</h3><p>1、绘制正弦曲线，并设置标题、坐标轴名称和坐标轴范围；</p><p>2、同一坐标系下绘制多种曲线并通过样式、宽度和颜色加以区分；</p><p>3、对食品偏好数据集进行可视化处理。</p><p>（1）读取数据集，并显示前5行；</p><p>（2）删除无用特征Timestamp和Participant_ID；</p><p>（3）查看数据集的基本情况和统计信息；</p><p>（4）绘制不同国家参与者人数柱状图；</p><p>（5）利用饼形图分别绘制男性和女性对甜点的偏好；</p><p>（6）利用箱体图绘制不同年龄的人对果汁偏爱对比图；</p><p>（7）利用散点图绘制不同年龄的人对甜点的偏爱对比图（提示：年龄作为x轴，maybe，yes和no分别用0,1和-1来表示作为y轴，同时用不同颜色的散点表示Traditional Food和Western Food）；</p><p>（8）根据所绘制的图形，分析人们对不同食物的偏好情况。</p><hr><h3 id="四、完成情况"><a href="#四、完成情况" class="headerlink" title="四、完成情况"></a>四、完成情况</h3><h4 id="（1）简单绘制曲线"><a href="#（1）简单绘制曲线" class="headerlink" title="（1）简单绘制曲线"></a>（1）简单绘制曲线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、绘制正弦曲线，并设置标题、坐标轴名称和坐标轴范围；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>] </span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 可以正常显示中文</span></span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br><span class="line">data=np.arange(<span class="number">0</span>, np.pi*<span class="number">4</span>, <span class="number">0.01</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">4</span>,<span class="number">3</span>),dpi=<span class="number">120</span>)  </span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;sin(x) 正弦曲线&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>,np.pi*<span class="number">4</span>) <span class="comment"># x轴范围</span></span><br><span class="line">plt.ylim(-<span class="number">1</span>,<span class="number">1</span>) <span class="comment"># y轴范围</span></span><br><span class="line">plt.xticks([<span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi, np.pi*<span class="number">3</span>/<span class="number">2</span>, np.pi*<span class="number">2</span>, np.pi*<span class="number">5</span>/<span class="number">2</span>, np.pi*<span class="number">3</span>, np.pi*<span class="number">7</span>/<span class="number">2</span>, np.pi*<span class="number">4</span>]) <span class="comment"># 具体刻度</span></span><br><span class="line">plt.yticks([-<span class="number">1</span>,-<span class="number">0.5</span>,<span class="number">0</span>,<span class="number">0.5</span>,<span class="number">1</span>])</span><br><span class="line">plt.plot(data,np.sin(data)) <span class="comment"># 绘制正弦曲线</span></span><br><span class="line">plt.legend([<span class="string">&#x27;sin&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291817274.png" alt="img-202304291817274"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2、同一坐标系下绘制多种曲线并通过样式、宽度和颜色加以区分；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>] </span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  </span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">4</span>,<span class="number">4</span>),dpi=<span class="number">100</span>) </span><br><span class="line">data=np.arange(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.01</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;多种曲线样式&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">plt.xticks([<span class="number">0</span>,<span class="number">0.2</span>,<span class="number">0.4</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1</span>])</span><br><span class="line">plt.yticks([<span class="number">0</span>,<span class="number">0.2</span>,<span class="number">0.4</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.plot(data, <span class="number">2.5</span>*data, marker=<span class="string">&#x27;^&#x27;</span>)</span><br><span class="line">plt.plot(data, data**<span class="number">0.5</span>, linewidth=<span class="number">4</span>)</span><br><span class="line">plt.plot(data, data**<span class="number">3</span>, linewidth=<span class="number">3</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.legend([<span class="string">&#x27;y=2.5*x&#x27;</span>,<span class="string">&#x27;y=x^0.5&#x27;</span>, <span class="string">&#x27;y=x^3&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291817635.png" alt="img-202304291817635"></p><hr><h4 id="（2）对食品偏好数据集进行可视化处理"><a href="#（2）对食品偏好数据集进行可视化处理" class="headerlink" title="（2）对食品偏好数据集进行可视化处理"></a>（2）对食品偏好数据集进行可视化处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）读取数据集，并显示前5行；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">food=pd.read_csv(<span class="string">&#x27;food.csv&#x27;</span>)</span><br><span class="line">food.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291822462.jpg" alt="img-202304291822462"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）删除无用特征Timestamp和Participant_ID；</span></span><br><span class="line"></span><br><span class="line">food.drop([<span class="string">&#x27;Timestamp&#x27;</span>,<span class="string">&#x27;Participant_ID&#x27;</span>],axis=<span class="number">1</span>,inplace=<span class="literal">True</span>) <span class="comment"># 删除这两列，并替换原数据</span></span><br><span class="line">food.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291822300.jpg" alt="img-202304291822300" style="zoom: 50%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）查看数据集的基本情况和统计信息；</span></span><br><span class="line"></span><br><span class="line">food.info()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 288 entries, 0 to 287</span><br><span class="line">Data columns (total 6 columns):</span><br><span class="line"> #   Column       Non-Null Count  Dtype </span><br><span class="line">---  ------       --------------  ----- </span><br><span class="line"> 0   Gender       284 non-null    object</span><br><span class="line"> 1   Nationality  288 non-null    object</span><br><span class="line"> 2   Age          288 non-null    int64 </span><br><span class="line"> 3   Food         288 non-null    object</span><br><span class="line"> 4   Juice        288 non-null    object</span><br><span class="line"> 5   Dessert      288 non-null    object</span><br><span class="line">dtypes: int64(1), object(5)</span><br><span class="line">memory usage: 13.6+ KB</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">food.describe()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291822894.jpg" alt="003" style="zoom:50%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）绘制不同国家参与者人数柱状图；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">7</span>,<span class="number">6</span>),dpi=<span class="number">100</span>) </span><br><span class="line">data=food[<span class="string">&#x27;Nationality&#x27;</span>].value_counts() <span class="comment"># 统计不同国家参与者人数</span></span><br><span class="line">data.plot(kind=<span class="string">&#x27;bar&#x27;</span>,rot=<span class="number">30</span>) <span class="comment">#设置对应国家的列标签，并倾斜30度</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;国家&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;人数&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;不同国家参与者人数柱状图&#x27;</span>)</span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="built_in">len</span>( data)),data)</span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(data)),data):</span><br><span class="line">    plt.text(x,y,y,ha = <span class="string">&#x27;center&#x27;</span>,va = <span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291817131.png" alt="img-202304291817131" style="zoom: 80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）利用饼形图分别绘制男性和女性对甜点的偏好；</span></span><br><span class="line"></span><br><span class="line">food.groupby(<span class="string">&#x27;Dessert&#x27;</span>)[<span class="string">&#x27;Gender&#x27;</span>].value_counts() <span class="comment"># 统计不同性别对甜点偏好的情况</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Dessert  Gender</span><br><span class="line">Maybe    Female    72</span><br><span class="line">         Male      50</span><br><span class="line">No       Female    35</span><br><span class="line">         Male      17</span><br><span class="line">Yes      Female    58</span><br><span class="line">         Male      52</span><br><span class="line">Name: Gender, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">food[<span class="string">&#x27;Gender&#x27;</span>].value_counts() <span class="comment"># 统计不同性别对应的人数，方便后面绘制饼图</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Female    165</span><br><span class="line">Male      119</span><br><span class="line">Name: Gender, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">8</span>),dpi=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">labels=[<span class="string">&#x27;Maybe&#x27;</span>,<span class="string">&#x27;No&#x27;</span>,<span class="string">&#x27;Yes&#x27;</span>]</span><br><span class="line">x=[<span class="number">72</span>/<span class="number">165</span>, <span class="number">35</span>/<span class="number">165</span>, <span class="number">58</span>/<span class="number">165</span>]</span><br><span class="line">explode=(<span class="number">0.01</span>, <span class="number">0.01</span>, <span class="number">0.01</span>)</span><br><span class="line">plt.pie(x, labels=labels, explode=explode, startangle=<span class="number">60</span>, autopct=<span class="string">&#x27;%1.1f %%&#x27;</span>) <span class="comment"># 分别绘制男性和女性对甜点偏好的饼图</span></span><br><span class="line">plt.title(<span class="string">&#x27;男性对甜点的偏好&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">labels=[<span class="string">&#x27;Maybe&#x27;</span>,<span class="string">&#x27;No&#x27;</span>,<span class="string">&#x27;Yes&#x27;</span>]</span><br><span class="line">x=[<span class="number">50</span>/<span class="number">119</span>, <span class="number">17</span>/<span class="number">119</span>, <span class="number">52</span>/<span class="number">119</span>]</span><br><span class="line">explode=(<span class="number">0.01</span>, <span class="number">0.01</span>, <span class="number">0.01</span>) <span class="comment"># autopct=&#x27;％1.1f%%&#x27;参数表示在饼形图上显示每个部分的百分比</span></span><br><span class="line">plt.pie(x, labels=labels, explode=explode, startangle=<span class="number">60</span>, autopct=<span class="string">&#x27;%1.1f %%&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;女性对甜点的偏好&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291814755.png" alt="img-202304291814755" style="zoom:80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）利用箱体图绘制不同年龄的人对果汁偏爱对比图</span></span><br><span class="line"></span><br><span class="line">food.groupby(<span class="string">&#x27;Juice&#x27;</span>)[<span class="string">&#x27;Age&#x27;</span>].value_counts() <span class="comment"># 先按对果汁的偏爱分组，再统计各自年龄对应的人数</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Juice              Age</span><br><span class="line">Carbonated drinks  21     5</span><br><span class="line">                   23     4</span><br><span class="line">                   25     3</span><br><span class="line">                   22     2</span><br><span class="line">                   24     2</span><br><span class="line">                         ..</span><br><span class="line">Fresh Juice        60     1</span><br><span class="line">                   63     1</span><br><span class="line">                   65     1</span><br><span class="line">                   67     1</span><br><span class="line">                   74     1</span><br><span class="line">Name: Age, Length: 66, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">food[<span class="string">&#x27;Juice&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Fresh Juice          256</span><br><span class="line">Carbonated drinks     32</span><br><span class="line">Name: Juice, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">6</span>),dpi=<span class="number">90</span>)</span><br><span class="line"><span class="comment"># 为方便展示示例效果，这里使用seaborn库来绘制箱体图</span></span><br><span class="line"><span class="comment"># 生成一个水平方向的箱体图，其中每个箱子代表一种不同年龄段人群喜好某种果汁的程度</span></span><br><span class="line">sns.boxplot(x=food[<span class="string">&#x27;Age&#x27;</span>], y=food[<span class="string">&#x27;Juice&#x27;</span>], data=food, orient=<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置横纵坐标标签</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Age&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Juice&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291815783.png" alt="img-202304291815783" style="zoom: 80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）利用散点图绘制不同年龄的人对甜点的偏爱对比图（提示：年龄作为x轴，maybe，yes和no分别用0,1和-1来表示作为y轴，同时用不同颜色的散点表示Traditional Food和Western Food）。</span></span><br><span class="line"><span class="comment"># pd.set_option(&#x27;display.max_rows&#x27;, 100) # 让数据显示更全</span></span><br><span class="line"></span><br><span class="line">df=food.groupby(<span class="string">&#x27;Dessert&#x27;</span>)[<span class="string">&#x27;Age&#x27;</span>].value_counts() <span class="comment"># 统计不同年龄对甜点偏好的情况</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">4</span>),dpi=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(food[<span class="string">&#x27;Age&#x27;</span>], food[<span class="string">&#x27;Dessert&#x27;</span>], color=<span class="string">&#x27;green&#x27;</span>) <span class="comment"># 显示不同年龄，对应的甜品偏好情况</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291815498.png" alt="img-202304291815498" style="zoom: 80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">4</span>),dpi=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对原数据中对甜品的偏爱情况进行替换，y轴用这些来表示:Yes，Maybe和No分别用1，0和-1</span></span><br><span class="line">traditional_likes = food[food[<span class="string">&#x27;Food&#x27;</span>] == <span class="string">&#x27;Traditional food&#x27;</span>][<span class="string">&#x27;Dessert&#x27;</span>].replace(&#123;<span class="string">&#x27;Yes&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Maybe&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;No&#x27;</span>: -<span class="number">1</span>&#125;)</span><br><span class="line">western_likes = food[food[<span class="string">&#x27;Food&#x27;</span>] == <span class="string">&#x27;Western Food&#x27;</span>][<span class="string">&#x27;Dessert&#x27;</span>].replace(&#123;<span class="string">&#x27;Yes&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Maybe&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;No&#x27;</span>: -<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">age = food[<span class="string">&#x27;Age&#x27;</span>] <span class="comment"># x轴是在不同年龄下，人们对传统和西方食物的分布情况</span></span><br><span class="line">plt.scatter(age[food[<span class="string">&#x27;Food&#x27;</span>] == <span class="string">&#x27;Traditional food&#x27;</span>], traditional_likes, color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;Traditional food&#x27;</span>)</span><br><span class="line">plt.scatter(age[food[<span class="string">&#x27;Food&#x27;</span>] == <span class="string">&#x27;Western Food&#x27;</span>], western_likes, color=<span class="string">&#x27;blue&#x27;</span>, label=<span class="string">&#x27;Western Food&#x27;</span>) <span class="comment"># 西方美食对应 Western Food </span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Age&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Dessert&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()   </span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291816686.png" alt="img-202304291816686" style="zoom:80%;" /><hr><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#（8）根据所绘制的图形，分析人们对不同食物的偏好情况。</span><br><span class="line"></span><br><span class="line"># 在该图中，红色表示传统美食的偏好程度，蓝色表示西方美食的偏好程度。可以得出结论，在所有年龄段中人们似乎更喜欢传统美食。</span><br><span class="line"># 其中在年龄20到40之间的人群对传统美食的偏爱程度较高，年龄在15到30之间的人群对西方美食偏爱程度较高。</span><br></pre></td></tr></table></figure><hr><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p><a href="https://pan.baidu.com/s/1XowxkVb9QLds3itkLlL8HA?pwd=2023">food.csv 数据集下载</a></p><p> (5), (6), (7)中的可视化处理参考了<strong>chatgpt</strong>提供的解题思路</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-上机实践4（Matplotlib-数据可视化）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-上机实践4（Matplotlib-数据可视化）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 上机实践4（Matplotlib 数据</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Matplotlib" scheme="https://ariesfun.gitee.io/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 上机实践3（Pandas 数据预处理）</title>
    <link href="https://ariesfun.gitee.io/posts/e26c.html"/>
    <id>https://ariesfun.gitee.io/posts/e26c.html</id>
    <published>2023-04-30T07:29:39.353Z</published>
    <updated>2023-04-30T07:34:01.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-上机实践3（Pandas-数据预处理）"><a href="#数据分析与可视化-上机实践3（Pandas-数据预处理）" class="headerlink" title="数据分析与可视化 上机实践3（Pandas 数据预处理）"></a>数据分析与可视化 上机实践3（Pandas 数据预处理）</h2><hr><h3 id="一、实践目的"><a href="#一、实践目的" class="headerlink" title="一、实践目的"></a>一、实践目的</h3><p>1.掌握数据预处理的思想和方法。<br><strong>2.进一步熟悉Pandas库的使用方法。</strong></p><hr><h3 id="二、数据集介绍"><a href="#二、数据集介绍" class="headerlink" title="二、数据集介绍"></a>二、数据集介绍</h3><p>Lending Club是一家美国P2P公司，投资者在平台中为融资方提供资金，并以此获得贷款利率收益。Lending Club为投资者与融资方提供平台。本实验使用Lending Club2015年公开数据集中截取的一小部分进行分析。数据分为三个部分：<br>（1）用户信息数据</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301433917.png" alt="img-202304301433917"></p><p>（2）用户历史数据</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301433211.png" alt="img-202304301433211"></p><p>（3）贷款交易数据</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301433303.png" alt="img-202304301433303"></p><p><a href="https://pan.baidu.com/s/1uu73xf2SVsJsAjBQceRfKA?pwd=2023">Lending Club2015年公开数据集下载</a></p><hr><h3 id="三、实践内容要求"><a href="#三、实践内容要求" class="headerlink" title="三、实践内容要求"></a>三、实践内容要求</h3><p>（1）导入三个数据表到DataFrame中；</p><p>（2）查看各数据表的前5行；</p><p>（3）查看数据基本情况，并对基本情况进行分析；</p><p>（4）利用“用户编号”这个公共变量，将用户信息数据和用户历史数据合并在一起，对比inner、outer、left和right连接的区别；</p><p>（5）将用户历史数据按账户平均存款排序；</p><p>（6）基于贷款交易数据，进行左连接，将三个数据合并在一起；</p><p>（7）删去用于合并的列名user_id，使用info查看数据缺失情况，删除缺失数据；</p><p>（8）将年收入进行离散化，分为高中低三档；</p><p>（9）贷款状态为”Charged Off”,”In Grace Period”, “Late (31-120 days)”的贷款有违约风险，视为不良贷款，将其值标记为1，其他贷款标记为0；</p><p>（10）将term、grade、emp_length、annual_inc、home_ownership、verification_status这些分类变量进行哑变量处理。</p><hr><h3 id="四、完成情况"><a href="#四、完成情况" class="headerlink" title="四、完成情况"></a>四、完成情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）导入三个数据表到DataFrame中；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">user = pd.read_csv(<span class="string">&#x27;user.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>) <span class="comment"># 读取文件</span></span><br><span class="line">history = pd.read_csv(<span class="string">&#x27;history.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>) </span><br><span class="line">loan = pd.read_csv(<span class="string">&#x27;loan.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）查看各数据表的前5行；</span></span><br><span class="line"></span><br><span class="line">user.head() <span class="comment"># 默认输出前5行数据</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301438980.jpg" alt="img-202304301438980" style="zoom: 60%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301438592.jpg" alt="img-202304301438592" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loan.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301438890.jpg" alt="img-202304301438890" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）查看数据基本情况，并对基本情况进行分析；</span></span><br><span class="line"></span><br><span class="line">user.info()</span><br><span class="line">history.info()</span><br><span class="line">loan.info()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 1707 entries, 0 to 1706</span><br><span class="line">Data columns (total 5 columns):</span><br><span class="line"> #   Column               Non-Null Count  Dtype  </span><br><span class="line">---  ------               --------------  -----  </span><br><span class="line"> 0   user_id              1707 non-null   int64  </span><br><span class="line"> 1   emp_length           1633 non-null   object </span><br><span class="line"> 2   home_ownership       1707 non-null   object </span><br><span class="line"> 3   annual_inc           1707 non-null   float64</span><br><span class="line"> 4   verification_status  1707 non-null   object </span><br><span class="line">dtypes: float64(1), int64(1), object(3)</span><br><span class="line">memory usage: 66.8+ KB</span><br><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 1648 entries, 0 to 1647</span><br><span class="line">Data columns (total 3 columns):</span><br><span class="line"> #   Column                Non-Null Count  Dtype  </span><br><span class="line">---  ------                --------------  -----  </span><br><span class="line"> 0   user                  1648 non-null   int64  </span><br><span class="line"> 1   acc_open_past_24mths  1648 non-null   int64  </span><br><span class="line"> 2   avg_cur_bal           1646 non-null   float64</span><br><span class="line">dtypes: float64(1), int64(2)</span><br><span class="line">memory usage: 38.8 KB</span><br><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 1269 entries, 0 to 1268</span><br><span class="line">Data columns (total 5 columns):</span><br><span class="line"> #   Column       Non-Null Count  Dtype </span><br><span class="line">---  ------       --------------  ----- </span><br><span class="line"> 0   user         1269 non-null   int64 </span><br><span class="line"> 1   term         1269 non-null   object</span><br><span class="line"> 2   int_rate     1269 non-null   object</span><br><span class="line"> 3   grade        1269 non-null   object</span><br><span class="line"> 4   loan_status  1269 non-null   object</span><br><span class="line">dtypes: int64(1), object(4)</span><br><span class="line">memory usage: 49.7+ KB</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）利用“用户编号”这个公共变量，将用户信息数据和用户历史数据合并在一起，对比inner、outer、left和right连接的区别；</span></span><br><span class="line"></span><br><span class="line">a1 = pd.merge(user, history, left_on=<span class="string">&#x27;user_id&#x27;</span>, right_on=<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a1)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">      user_id emp_length home_ownership  annual_inc verification_status  user  \</span><br><span class="line">0           1  10+ years           RENT     78000.0     Source Verified     1   </span><br><span class="line">1           2    8 years       MORTGAGE     58000.0        Not Verified     2   </span><br><span class="line">2           3  10+ years       MORTGAGE    125000.0            Verified     3   </span><br><span class="line">3           4  10+ years           RENT     69000.0     Source Verified     4   </span><br><span class="line">4           5   &lt; 1 year           RENT     50000.0     Source Verified     5   </span><br><span class="line">...       ...        ...            ...         ...                 ...   ...   </span><br><span class="line">1643     1644  10+ years            OWN     72000.0            Verified  1644   </span><br><span class="line">1644     1645    7 years       MORTGAGE     62000.0     Source Verified  1645   </span><br><span class="line">1645     1646    4 years           RENT     50000.0     Source Verified  1646   </span><br><span class="line">1646     1647     1 year           RENT     45000.0        Not Verified  1647   </span><br><span class="line">1647     1648    2 years            OWN     35000.0        Not Verified  1648   </span><br><span class="line"></span><br><span class="line">      acc_open_past_24mths  avg_cur_bal  </span><br><span class="line">0                        5      29828.0  </span><br><span class="line">1                        7       9536.0  </span><br><span class="line">2                        2      32727.0  </span><br><span class="line">3                        8       3214.0  </span><br><span class="line">4                        6       5857.0  </span><br><span class="line">...                    ...          ...  </span><br><span class="line">1643                     3       1676.0  </span><br><span class="line">1644                     4      21360.0  </span><br><span class="line">1645                     1       3180.0  </span><br><span class="line">1646                     8       3652.0  </span><br><span class="line">1647                     3       1586.0  </span><br><span class="line"></span><br><span class="line">[1648 rows x 8 columns]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）将用户历史数据按账户平均存款排序；</span></span><br><span class="line"></span><br><span class="line">a2 = history.sort_values(by = <span class="string">&#x27;avg_cur_bal&#x27;</span>)</span><br><span class="line">a2.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301439203.jpg" alt="img-202304301439203" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）基于贷款交易数据，进行左连接，将三个数据合并在一起；</span></span><br><span class="line"></span><br><span class="line">a3 = pd.merge(a1, loan, how=<span class="string">&#x27;left&#x27;</span>) <span class="comment"># 将三表进行左连接</span></span><br><span class="line"><span class="built_in">print</span>(a3)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">      user_id emp_length home_ownership  annual_inc verification_status  user  \</span><br><span class="line">0           1  10+ years           RENT     78000.0     Source Verified     1   </span><br><span class="line">1           2    8 years       MORTGAGE     58000.0        Not Verified     2   </span><br><span class="line">2           3  10+ years       MORTGAGE    125000.0            Verified     3   </span><br><span class="line">3           4  10+ years           RENT     69000.0     Source Verified     4   </span><br><span class="line">4           5   &lt; 1 year           RENT     50000.0     Source Verified     5   </span><br><span class="line">...       ...        ...            ...         ...                 ...   ...   </span><br><span class="line">1643     1644  10+ years            OWN     72000.0            Verified  1644   </span><br><span class="line">1644     1645    7 years       MORTGAGE     62000.0     Source Verified  1645   </span><br><span class="line">1645     1646    4 years           RENT     50000.0     Source Verified  1646   </span><br><span class="line">1646     1647     1 year           RENT     45000.0        Not Verified  1647   </span><br><span class="line">1647     1648    2 years            OWN     35000.0        Not Verified  1648   </span><br><span class="line"></span><br><span class="line">      acc_open_past_24mths  avg_cur_bal        term int_rate grade  \</span><br><span class="line">0                        5      29828.0   60 months   12.39%     C   </span><br><span class="line">1                        7       9536.0   36 months    6.99%     A   </span><br><span class="line">2                        2      32727.0   60 months   17.14%     D   </span><br><span class="line">3                        8       3214.0   36 months   13.66%     C   </span><br><span class="line">4                        6       5857.0   36 months   13.66%     C   </span><br><span class="line">...                    ...          ...         ...      ...   ...   </span><br><span class="line">1643                     3       1676.0         NaN      NaN   NaN   </span><br><span class="line">1644                     4      21360.0         NaN      NaN   NaN   </span><br><span class="line">1645                     1       3180.0         NaN      NaN   NaN   </span><br><span class="line">1646                     8       3652.0         NaN      NaN   NaN   </span><br><span class="line">1647                     3       1586.0         NaN      NaN   NaN   </span><br><span class="line"></span><br><span class="line">          loan_status  </span><br><span class="line">0          Fully Paid  </span><br><span class="line">1         Charged Off  </span><br><span class="line">2     In Grace Period  </span><br><span class="line">3          Fully Paid  </span><br><span class="line">4         Charged Off  </span><br><span class="line">...               ...  </span><br><span class="line">1643              NaN  </span><br><span class="line">1644              NaN  </span><br><span class="line">1645              NaN  </span><br><span class="line">1646              NaN  </span><br><span class="line">1647              NaN  </span><br><span class="line"></span><br><span class="line">[1648 rows x 12 columns]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）删去用于合并的列名user_id，使用info查看数据缺失情况，删除缺失数据；</span></span><br><span class="line"></span><br><span class="line">a3.drop(<span class="string">&#x27;user_id&#x27;</span>,axis = <span class="number">1</span>,inplace = <span class="literal">True</span>) <span class="comment"># axis=1，删除user_id这一列</span></span><br><span class="line"><span class="built_in">print</span>(a3)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">     emp_length home_ownership  annual_inc verification_status  user  \</span><br><span class="line">0     10+ years           RENT     78000.0     Source Verified     1   </span><br><span class="line">1       8 years       MORTGAGE     58000.0        Not Verified     2   </span><br><span class="line">2     10+ years       MORTGAGE    125000.0            Verified     3   </span><br><span class="line">3     10+ years           RENT     69000.0     Source Verified     4   </span><br><span class="line">4      &lt; 1 year           RENT     50000.0     Source Verified     5   </span><br><span class="line">...         ...            ...         ...                 ...   ...   </span><br><span class="line">1643  10+ years            OWN     72000.0            Verified  1644   </span><br><span class="line">1644    7 years       MORTGAGE     62000.0     Source Verified  1645   </span><br><span class="line">1645    4 years           RENT     50000.0     Source Verified  1646   </span><br><span class="line">1646     1 year           RENT     45000.0        Not Verified  1647   </span><br><span class="line">1647    2 years            OWN     35000.0        Not Verified  1648   </span><br><span class="line"></span><br><span class="line">      acc_open_past_24mths  avg_cur_bal        term int_rate grade  \</span><br><span class="line">0                        5      29828.0   60 months   12.39%     C   </span><br><span class="line">1                        7       9536.0   36 months    6.99%     A   </span><br><span class="line">2                        2      32727.0   60 months   17.14%     D   </span><br><span class="line">3                        8       3214.0   36 months   13.66%     C   </span><br><span class="line">4                        6       5857.0   36 months   13.66%     C   </span><br><span class="line">...                    ...          ...         ...      ...   ...   </span><br><span class="line">1643                     3       1676.0         NaN      NaN   NaN   </span><br><span class="line">1644                     4      21360.0         NaN      NaN   NaN   </span><br><span class="line">1645                     1       3180.0         NaN      NaN   NaN   </span><br><span class="line">1646                     8       3652.0         NaN      NaN   NaN   </span><br><span class="line">1647                     3       1586.0         NaN      NaN   NaN   </span><br><span class="line"></span><br><span class="line">          loan_status  </span><br><span class="line">0          Fully Paid  </span><br><span class="line">1         Charged Off  </span><br><span class="line">2     In Grace Period  </span><br><span class="line">3          Fully Paid  </span><br><span class="line">4         Charged Off  </span><br><span class="line">...               ...  </span><br><span class="line">1643              NaN  </span><br><span class="line">1644              NaN  </span><br><span class="line">1645              NaN  </span><br><span class="line">1646              NaN  </span><br><span class="line">1647              NaN  </span><br><span class="line"></span><br><span class="line">[1648 rows x 11 columns]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a3.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">emp_length               71</span><br><span class="line">home_ownership            0</span><br><span class="line">annual_inc                0</span><br><span class="line">verification_status       0</span><br><span class="line">user                      0</span><br><span class="line">acc_open_past_24mths      0</span><br><span class="line">avg_cur_bal               2</span><br><span class="line">term                    379</span><br><span class="line">int_rate                379</span><br><span class="line">grade                   379</span><br><span class="line">loan_status             379</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a3.dropna(axis = <span class="number">0</span>, inplace =<span class="literal">True</span>) <span class="comment"># 沿行删除所有数据</span></span><br><span class="line">a3.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">emp_length              0</span><br><span class="line">home_ownership          0</span><br><span class="line">annual_inc              0</span><br><span class="line">verification_status     0</span><br><span class="line">user                    0</span><br><span class="line">acc_open_past_24mths    0</span><br><span class="line">avg_cur_bal             0</span><br><span class="line">term                    0</span><br><span class="line">int_rate                0</span><br><span class="line">grade                   0</span><br><span class="line">loan_status             0</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （8）将年收入进行离散化，分为高中低三档；</span></span><br><span class="line"></span><br><span class="line">a3[<span class="string">&#x27;年收入&#x27;</span>] = pd.cut(a3[<span class="string">&#x27;annual_inc&#x27;</span>], bins=[<span class="number">0</span>, <span class="number">50000</span>, <span class="number">100000</span>, a3[<span class="string">&#x27;annual_inc&#x27;</span>].<span class="built_in">max</span>()], labels=[<span class="string">&#x27;低&#x27;</span>,<span class="string">&#x27;中&#x27;</span>, <span class="string">&#x27;高&#x27;</span>])</span><br><span class="line">a3.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301440474.jpg" alt="img-202304301440474"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（9）贷款状态为&quot;Charged Off&quot;,&quot;In Grace Period&quot;, &quot;Late (31-120 days)&quot;的贷款有违约风险，视为不良贷款，将其值标记为1，其他贷款标记为0；</span></span><br><span class="line"><span class="comment"># 使用字典方式进行替换</span></span><br><span class="line"></span><br><span class="line">a3.replace(to_replace=&#123;<span class="string">&#x27;loan_status&#x27;</span>:</span><br><span class="line">&#123;<span class="string">&#x27;Fully Paid&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;Current&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;Charged Off&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;In Grace Period&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;Late (31-120 days)&#x27;</span>:<span class="number">1</span>&#125;&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">a3.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一种方法</span></span><br><span class="line"><span class="comment"># df[&#x27;loan_status&#x27;].replace(to_replace=[&#x27;Fully Paid&#x27;,&#x27;Current&#x27;,&#x27;Charged Off&#x27;,&#x27;In Grace Period&#x27;,&#x27;Late (31-120 days)&#x27;],</span></span><br><span class="line"><span class="comment"># value=[0,0,1,1,1],inplace=True)</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301441270.jpg" alt="009"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（10）将term、grade、emp_length、annual_inc、home_ownership、verification_status这些分类变量进行哑变量处理。</span></span><br><span class="line"></span><br><span class="line">ss = [<span class="string">&#x27;term&#x27;</span>, <span class="string">&#x27;grade&#x27;</span>, <span class="string">&#x27;emp_length&#x27;</span>, <span class="string">&#x27;annual_inc&#x27;</span>, <span class="string">&#x27;home_ownership&#x27;</span>, <span class="string">&#x27;verification_status&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> ss:</span><br><span class="line">    dum_list = pd.get_dummies(a3[s], prefix = s)</span><br><span class="line">    <span class="built_in">print</span>(dum_list.head())</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">   term_ 36 months  term_ 60 months</span><br><span class="line">0                0                1</span><br><span class="line">1                1                0</span><br><span class="line">2                0                1</span><br><span class="line">3                1                0</span><br><span class="line">4                1                0</span><br><span class="line">   grade_A  grade_B  grade_C  grade_D  grade_E  grade_F  grade_G</span><br><span class="line">0        0        0        1        0        0        0        0</span><br><span class="line">1        1        0        0        0        0        0        0</span><br><span class="line">2        0        0        0        1        0        0        0</span><br><span class="line">3        0        0        1        0        0        0        0</span><br><span class="line">4        0        0        1        0        0        0        0</span><br><span class="line">   emp_length_1 year  emp_length_10+ years  emp_length_2 years  \</span><br><span class="line">0                  0                     1                   0   </span><br><span class="line">1                  0                     0                   0   </span><br><span class="line">2                  0                     1                   0   </span><br><span class="line">3                  0                     1                   0   </span><br><span class="line">4                  0                     0                   0   </span><br><span class="line"></span><br><span class="line">   emp_length_3 years  emp_length_4 years  emp_length_5 years  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   0   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   emp_length_6 years  emp_length_7 years  emp_length_8 years  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   1   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   emp_length_9 years  emp_length_&lt; 1 year  </span><br><span class="line">0                   0                    0  </span><br><span class="line">1                   0                    0  </span><br><span class="line">2                   0                    0  </span><br><span class="line">3                   0                    0  </span><br><span class="line">4                   0                    1  </span><br><span class="line">   annual_inc_16000.0  annual_inc_18000.0  annual_inc_18500.0  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   0   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   annual_inc_19000.0  annual_inc_19600.0  annual_inc_20000.0  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   0   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   annual_inc_21000.0  annual_inc_21600.0  annual_inc_22000.0  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   0   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   annual_inc_22500.0  ...  annual_inc_280000.0  annual_inc_300000.0  \</span><br><span class="line">0                   0  ...                    0                    0   </span><br><span class="line">1                   0  ...                    0                    0   </span><br><span class="line">2                   0  ...                    0                    0   </span><br><span class="line">3                   0  ...                    0                    0   </span><br><span class="line">4                   0  ...                    0                    0   </span><br><span class="line"></span><br><span class="line">   annual_inc_300300.0  annual_inc_310000.0  annual_inc_335000.0  \</span><br><span class="line">0                    0                    0                    0   </span><br><span class="line">1                    0                    0                    0   </span><br><span class="line">2                    0                    0                    0   </span><br><span class="line">3                    0                    0                    0   </span><br><span class="line">4                    0                    0                    0   </span><br><span class="line"></span><br><span class="line">   annual_inc_350000.0  annual_inc_385000.0  annual_inc_450000.0  \</span><br><span class="line">0                    0                    0                    0   </span><br><span class="line">1                    0                    0                    0   </span><br><span class="line">2                    0                    0                    0   </span><br><span class="line">3                    0                    0                    0   </span><br><span class="line">4                    0                    0                    0   </span><br><span class="line"></span><br><span class="line">   annual_inc_550000.0  annual_inc_580000.0  </span><br><span class="line">0                    0                    0  </span><br><span class="line">1                    0                    0  </span><br><span class="line">2                    0                    0  </span><br><span class="line">3                    0                    0  </span><br><span class="line">4                    0                    0  </span><br><span class="line"></span><br><span class="line">[5 rows x 320 columns]</span><br><span class="line">   home_ownership_MORTGAGE  home_ownership_OWN  home_ownership_RENT</span><br><span class="line">0                        0                   0                    1</span><br><span class="line">1                        1                   0                    0</span><br><span class="line">2                        1                   0                    0</span><br><span class="line">3                        0                   0                    1</span><br><span class="line">4                        0                   0                    1</span><br><span class="line">   verification_status_Not Verified  verification_status_Source Verified  \</span><br><span class="line">0                                 0                                    1   </span><br><span class="line">1                                 1                                    0   </span><br><span class="line">2                                 0                                    0   </span><br><span class="line">3                                 0                                    1   </span><br><span class="line">4                                 0                                    1   </span><br><span class="line"></span><br><span class="line">   verification_status_Verified  </span><br><span class="line">0                             0  </span><br><span class="line">1                             0  </span><br><span class="line">2                             1  </span><br><span class="line">3                             0  </span><br><span class="line">4                             0  </span><br></pre></td></tr></table></figure><hr><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p><a href="https://pan.baidu.com/s/1uu73xf2SVsJsAjBQceRfKA?pwd=2023">Lending Club2015年公开数据集下载</a></p><p><a href="https://blog.csdn.net/weixin_46945026/article/details/116856574"> Lending Club贷款数据转换与融合</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-上机实践3（Pandas-数据预处理）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-上机实践3（Pandas-数据预处理）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 上机实践3（Pandas 数据预处理）&quot;&gt;&lt;/a&gt;数据</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="Pandas" scheme="https://ariesfun.gitee.io/tags/Pandas/"/>
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 上机实践2（Pandas 统计分析）</title>
    <link href="https://ariesfun.gitee.io/posts/54a7.html"/>
    <id>https://ariesfun.gitee.io/posts/54a7.html</id>
    <published>2023-04-30T07:28:18.294Z</published>
    <updated>2023-04-30T07:28:38.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-上机实践2（Pandas-统计分析）"><a href="#数据分析与可视化-上机实践2（Pandas-统计分析）" class="headerlink" title="数据分析与可视化 上机实践2（Pandas 统计分析）"></a>数据分析与可视化 上机实践2（Pandas 统计分析）</h2><hr><h3 id="一、实践目的"><a href="#一、实践目的" class="headerlink" title="一、实践目的"></a>一、实践目的</h3><p><strong>1.了解 Pandas 库的基本功能。</strong></p><p><strong>2.掌握 Pandas 库的使用方法。</strong></p><hr><h3 id="二、数据集介绍"><a href="#二、数据集介绍" class="headerlink" title="二、数据集介绍"></a>二、数据集介绍</h3><p>本实验使用酒品消耗量数据集，其记录了全球 193 个国家某年的各类酒品消<br>耗数据，主要数据集变量如下：</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301523886.jpg" alt="img-202304301523886" style="zoom:67%;" /><p><a href="https://pan.baidu.com/s/1Mfwg9hICfGhxFHTnaXxmAg?pwd=2023">drinks.csv 数据集下载</a></p><hr><h3 id="三、实践内容要求"><a href="#三、实践内容要求" class="headerlink" title="三、实践内容要求"></a>三、实践内容要求</h3><ol><li>数据预处理</li></ol><p>（1）导入 excel 表格中的数据到 DataFrame 中；</p><p>（2）查看数据的前 5 行和后 8 行。</p><ol start="2"><li>数据操作</li></ol><p>（1）查看数据中各变量类型；</p><p>（2）将啤酒销量改成 object 类型；</p><p>（3）将列名的英文改为中文格式；</p><p>（4）初步查看数据类型和大小；</p><p>（5）查看数据数值统计情况；</p><p>（6）查看索引值；</p><p>（7）将索引值修改为所在的大洲；</p><p>（8）查看缺失值情况；</p><p>（9）采用恰当的方法对缺失值进行填充。</p><ol start="3"><li>饮酒情况对比</li></ol><p>（1）查找啤酒、烈酒和红酒的消耗量都高于相应酒种消耗量 75%分位数的<br>国家；</p><p>（2）统计（1）中各大洲国家的个数；</p><p>（3）统计各个大洲各类酒的消耗总量；</p><p>（4）计算各类酒占各大洲总消耗量的比重。</p><p>4．通过饮酒情况对比，对各大洲的饮酒习惯进行分析。</p><hr><h3 id="四、完成情况"><a href="#四、完成情况" class="headerlink" title="四、完成情况"></a>四、完成情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 数据预处理</span></span><br><span class="line"><span class="comment">#（1）导入 excel 表格中的数据到 DataFrame 中；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>,<span class="literal">True</span>)</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;drinks.csv&#x27;</span>, sep =<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">df.head()  <span class="comment"># 默认显示前5行</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111800278.jpg" alt="img-202304111800278"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail(<span class="number">8</span>) <span class="comment"># 查看数据的后8行</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111801331.jpg" alt="img-202304111801331"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 数据操作</span></span><br><span class="line"><span class="comment">#（1）查看数据中各变量类型；</span></span><br><span class="line"></span><br><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><pre><code>country                          objectbeer_servings                   float64spirit_servings                 float64wine_servings                   float64total_litres_of_pure_alcohol    float64continent                        objectdtype: object</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）将啤酒消耗量改成 object 类型；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;beer_servings&#x27;</span>] = df[<span class="string">&#x27;beer_servings&#x27;</span>].astype(<span class="built_in">object</span>)</span><br><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><pre><code>country                          objectbeer_servings                    objectspirit_servings                 float64wine_servings                   float64total_litres_of_pure_alcohol    float64continent                        objectdtype: object</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）将列名的英文改为中文格式；</span></span><br><span class="line"></span><br><span class="line">df.rename(columns = &#123;<span class="string">&#x27;country&#x27;</span>:<span class="string">&#x27;国家&#x27;</span>, <span class="string">&#x27;beer_servings&#x27;</span>:<span class="string">&#x27;啤酒消耗量&#x27;</span>, <span class="string">&#x27;spirit_servings&#x27;</span>:<span class="string">&#x27;烈酒消耗量&#x27;</span>, <span class="string">&#x27;wine_servings&#x27;</span>:<span class="string">&#x27;红酒消耗量&#x27;</span>, <span class="string">&#x27;total_litres_of_pure_alcohol&#x27;</span>:<span class="string">&#x27;总酒精消耗量&#x27;</span>, <span class="string">&#x27;continent&#x27;</span>:<span class="string">&#x27;所在大洲&#x27;</span>&#125;, inplace = <span class="literal">True</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111801050.jpg" alt="img-202304111801050"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）初步查看数据类型和大小；</span></span><br><span class="line"></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 193 entries, 0 to 192Data columns (total 6 columns): #   Column  Non-Null Count  Dtype  ---  ------  --------------  -----   0   国家      193 non-null    object  1   啤酒消耗量   190 non-null    object  2   烈酒消耗量   190 non-null    float64 3   红酒消耗量   190 non-null    float64 4   总酒精消耗量  193 non-null    float64 5   所在大洲    170 non-null    object dtypes: float64(3), object(3)memory usage: 9.2+ KB</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）查看数据数值统计情况；</span></span><br><span class="line"></span><br><span class="line">df[[<span class="string">&#x27;啤酒消耗量&#x27;</span>, <span class="string">&#x27;烈酒消耗量&#x27;</span>, <span class="string">&#x27;红酒消耗量&#x27;</span>, <span class="string">&#x27;总酒精消耗量&#x27;</span>]].describe()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111801126.jpg" alt="img-202304111801126" style="zoom: 80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）查看索引值；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list(df.index) # 行索引是0到192</span></span><br><span class="line"><span class="built_in">list</span>(df.columns)</span><br></pre></td></tr></table></figure><pre><code>[&#39;国家&#39;, &#39;啤酒消耗量&#39;, &#39;烈酒消耗量&#39;, &#39;红酒消耗量&#39;, &#39;总酒精消耗量&#39;, &#39;所在大洲&#39;]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）将索引值修改为所在的大洲；</span></span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&#x27;所在大洲&#x27;</span>,drop=<span class="literal">False</span>)    <span class="comment"># 将列转化为行索引</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111802383.jpg" alt="img-202304111802383" style="zoom:80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（8）查看缺失值情况；</span></span><br><span class="line"></span><br><span class="line">df.isnull().<span class="built_in">sum</span>() <span class="comment"># 缺失值的统计</span></span><br></pre></td></tr></table></figure><pre><code>国家             0啤酒消耗量       3烈酒消耗量       3红酒消耗量       3总酒精消耗量     0所在大洲        23dtype: int64</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（9）采用恰当的方法对缺失值进行填充。</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;啤酒消耗量&#x27;</span>] = df[<span class="string">&#x27;啤酒消耗量&#x27;</span>].fillna(df[<span class="string">&#x27;啤酒消耗量&#x27;</span>].mean()) <span class="comment"># 对酒的消耗量缺失值用平均值填充</span></span><br><span class="line">df[<span class="string">&#x27;烈酒消耗量&#x27;</span>] = df[<span class="string">&#x27;烈酒消耗量&#x27;</span>].fillna(df[<span class="string">&#x27;烈酒消耗量&#x27;</span>].mean())</span><br><span class="line">df[<span class="string">&#x27;红酒消耗量&#x27;</span>] = df[<span class="string">&#x27;红酒消耗量&#x27;</span>].fillna(df[<span class="string">&#x27;红酒消耗量&#x27;</span>].mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对所在大洲的缺失值不做处理</span></span><br><span class="line">df.isnull().<span class="built_in">sum</span>() <span class="comment"># 缺失值的统计</span></span><br></pre></td></tr></table></figure><pre><code>国家             0啤酒消耗量       0烈酒消耗量       0红酒消耗量       0总酒精消耗量     0所在大洲        23dtype: int64</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 饮酒情况对比</span></span><br><span class="line"><span class="comment">#（1）查找啤酒、烈酒和红酒的消耗量都高于相应酒种消耗量 75%分位数的国家；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;啤酒消耗量&#x27;</span>].quantile(<span class="number">0.75</span>) <span class="comment"># 或者用des = df.describe(include=&quot;all&quot;) 和 des.loc[&#x27;75%&#x27;,&#x27;啤酒消耗量&#x27;] 来取出各类酒对75%分位数的值</span></span><br><span class="line"></span><br><span class="line">alcohol = df.loc[ (df[<span class="string">&#x27;啤酒消耗量&#x27;</span>]&gt;df[<span class="string">&#x27;啤酒消耗量&#x27;</span>].quantile(<span class="number">0.75</span>)) &amp; (df[<span class="string">&#x27;烈酒消耗量&#x27;</span>]&gt;df[<span class="string">&#x27;烈酒消耗量&#x27;</span>].quantile(<span class="number">0.75</span>)) &amp; (df[<span class="string">&#x27;红酒消耗量&#x27;</span>]&gt;df[<span class="string">&#x27;红酒消耗量&#x27;</span>].quantile(<span class="number">0.75</span>)) ]</span><br><span class="line">alcohol <span class="comment"># 显示满足条件的每行详细记录（含国家名，各类酒的消耗量，所在大洲）</span></span><br><span class="line"></span><br><span class="line">alcohol[<span class="string">&#x27;国家&#x27;</span>] <span class="comment"># 显示满足条件的国家</span></span><br></pre></td></tr></table></figure><pre><code>3                 Andorra25               Bulgaria44                 Cyprus45         Czech Republic60                Finland75                Hungary93                 Latvia99             Luxembourg141    Russian Federation151                Serbia155              Slovakia160                 Spain184                   USAName: 国家, dtype: object</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）统计（1）中各大洲国家的个数；</span></span><br><span class="line"></span><br><span class="line">alcohol[<span class="string">&#x27;所在大洲&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure><pre><code>EU    11AS     1Name: 所在大洲, dtype: int64</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）统计各个大洲各类酒的消耗总量；</span></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;所在大洲&#x27;</span>).<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111803376.jpg" alt="img-202304111803376" style="zoom:80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）计算各类酒占各大洲总消耗量的比重。</span></span><br><span class="line"></span><br><span class="line">d = df.groupby(<span class="string">&#x27;所在大洲&#x27;</span>).<span class="built_in">sum</span>()</span><br><span class="line">d.drop(<span class="string">&#x27;总酒精消耗量&#x27;</span>,axis = <span class="number">1</span>,inplace = <span class="literal">True</span>) <span class="comment"># axis=1，删除总酒精消耗量这一列</span></span><br><span class="line">d.div(d.<span class="built_in">sum</span>(axis=<span class="number">1</span>), axis=<span class="number">0</span>) <span class="comment"># 按列（即投影到列）求和, 再按行（即投影到行）除法</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111803314.jpg" alt="img-202304111803314" style="zoom:80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4．通过饮酒情况对比，对各大洲的饮酒习惯进行分析。</span></span><br><span class="line"></span><br><span class="line">d1 = df.groupby(<span class="string">&#x27;所在大洲&#x27;</span>).<span class="built_in">sum</span>()</span><br><span class="line">d1[<span class="string">&#x27;总酒精消耗量&#x27;</span>]</span><br><span class="line"><span class="comment"># 由上面（4）中的各类酒的占比分析及总酒精消耗量得知，</span></span><br><span class="line"><span class="comment"># 几乎所有大洲都对啤酒的消耗量较高，尤其是AF（非洲）；但对红酒的消耗量较低</span></span><br><span class="line"><span class="comment"># 同时EU（欧洲）人群对酒精的依赖度最高，OC（大洋洲）人群对酒精的依赖度最低</span></span><br></pre></td></tr></table></figure><pre><code>所在大洲AF    159.4AS     95.5EU    387.8OC     54.1SA     75.7Name: 总酒精消耗量, dtype: float64</code></pre><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p><a href="https://pan.baidu.com/s/1Mfwg9hICfGhxFHTnaXxmAg?pwd=2023">drinks.csv 数据集下载</a></p><p><a href="https://blog.csdn.net/HunGRy_FOOliSHhh/article/details/113762347">使用Pandas获取数据以及数据概览</a></p><p><a href="https://blog.csdn.net/u013177138/article/details/121689496">DataFrame的修改方法(值、列、索引)</a></p><p><a href="https://blog.csdn.net/dair6/article/details/121352283">Pandas中计算分位数的方法describe、quantile</a></p><p><a href="https://blog.csdn.net/weixin_46945026/article/details/116670239">Pandas进一步实战_酒品数据初步探索</a></p><p><a href="https://blog.csdn.net/baidu_34454863/article/details/100859928">Pandas入门_探索酒类消费数据</a></p><p><strong>遇到问题及解决方案</strong></p><p><a href="https://blog.csdn.net/weixin_37474682/article/details/121059702">Python报错解决：TypeError: Cannot interpret ‘＜attribute ‘dtype‘ of ‘numpy.generic‘objects＞‘as a data type</a></p><p>成功更新pandas后，问题得到解决</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301519590.jpg" alt="img-202304301519590"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-上机实践2（Pandas-统计分析）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-上机实践2（Pandas-统计分析）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 上机实践2（Pandas 统计分析）&quot;&gt;&lt;/a&gt;数据分析与</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="Pandas" scheme="https://ariesfun.gitee.io/tags/Pandas/"/>
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 上机实践1（Numpy 数值计算）</title>
    <link href="https://ariesfun.gitee.io/posts/8203.html"/>
    <id>https://ariesfun.gitee.io/posts/8203.html</id>
    <published>2023-04-30T07:03:17.825Z</published>
    <updated>2023-04-30T07:08:29.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-上机实践1（Numpy-数值计算）"><a href="#数据分析与可视化-上机实践1（Numpy-数值计算）" class="headerlink" title="数据分析与可视化 上机实践1（Numpy 数值计算）"></a>数据分析与可视化 上机实践1（Numpy 数值计算）</h2><h3 id="一、实践目的"><a href="#一、实践目的" class="headerlink" title="一、实践目的"></a>一、实践目的</h3><p><strong>1.掌握 Numpy 库的使用方法。</strong></p><p><strong>2.灵活应用 Numpy 库解决数值计算和图像处理的相关问题。</strong> </p><hr><h3 id="二、彩色向灰度图转换原理"><a href="#二、彩色向灰度图转换原理" class="headerlink" title="二、彩色向灰度图转换原理"></a>二、彩色向灰度图转换原理</h3><p>图像是由若干个像素组成，每个像素有明确的位置和被分配的颜色值。</p><p>一张图像就构成了一个像素矩阵。彩色图像的每个像素由 R、G、B 分量构成;分量值介于 0到255 之间。灰度图像是每个像素只有一个采样颜色的图像，显示为从最 暗黑色到最亮的白色的灰度，取值范围 0到255。</p><p>彩色图像向灰度图像转换的常用公式为：<br>Gray = R * 0.299 + G * 0.587 + B * 0.114<br>利用矩阵运算，即可将彩色图像转换为灰度图像。 </p><hr><h3 id="三、实践内容要求"><a href="#三、实践内容要求" class="headerlink" title="三、实践内容要求"></a>三、实践内容要求</h3><ol><li><p>数组的创建<br>（1）创建全 0 数组，全 1 数组，随机数数组； </p><p>（2）创建一个数值范围为 0~1，间隔为 0.01 的数组。</p></li><li><p>任意创建一个二维数组，对其维度进行操作 </p><p> （1）将数组的行变列； </p><p> （2）返回最后一个元素； </p><p> （3）返回第 2 到第 4 个元素； </p><p> （4）返回逆序数组。 </p></li><li><p>任意创建两个二维的数组 arr1、arr2，对两个数组进行四则运算：arr1+arr2、 arr1-arr2、arr1*arr2、arr1/arr2。 </p></li><li><p>创建数组 arr3=[3 6 9 3 1 5 7 2]，分别完成排序、去重、总和、累计和、均 值、标准差、方差、最小值和最大值的统计。</p></li><li><p>了解图像的构成，结合 Matplotlib 和 NumPy 实现彩色图像到灰色图像的 转换，将彩色图像转换为灰度图像。 </p></li><li><p>5 的实验步骤包括以下几个： 1. 导入 numpy 和 matplotlib 模块； 2. 读取彩色图像(plt.imread)； 3. 显示彩色图像(plt.imshow)； 4. 通过数组间的运算，计算灰度图像的像素值； 5. 显示灰度图像</p></li></ol><hr><h3 id="四、完成情况"><a href="#四、完成情况" class="headerlink" title="四、完成情况"></a>四、完成情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.数组的创建；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#（1）创建全 0 数组，全 1 数组，随机数数组；</span></span><br><span class="line">a = np.zeros((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = np.ones((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">c = np.random.random((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）创建一个数值范围为 0~1，间隔为 0.01 的数组。</span></span><br><span class="line">a = np.arange(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.01</span>) <span class="comment"># 第3个参数为间隔距离</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[[0. 0. 0.]</span><br><span class="line"> [0. 0. 0.]</span><br><span class="line"> [0. 0. 0.]]</span><br><span class="line">[[1. 1. 1.]</span><br><span class="line"> [1. 1. 1.]</span><br><span class="line"> [1. 1. 1.]]</span><br><span class="line">[[0.59795796 0.47702449 0.90950593]</span><br><span class="line"> [0.27112045 0.53074871 0.70262116]</span><br><span class="line"> [0.97665706 0.43174363 0.17952276]]</span><br><span class="line">[0.   0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1  0.11 0.12 0.13</span><br><span class="line"> 0.14 0.15 0.16 0.17 0.18 0.19 0.2  0.21 0.22 0.23 0.24 0.25 0.26 0.27</span><br><span class="line"> 0.28 0.29 0.3  0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4  0.41</span><br><span class="line"> 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5  0.51 0.52 0.53 0.54 0.55</span><br><span class="line"> 0.56 0.57 0.58 0.59 0.6  0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69</span><br><span class="line"> 0.7  0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8  0.81 0.82 0.83</span><br><span class="line"> 0.84 0.85 0.86 0.87 0.88 0.89 0.9  0.91 0.92 0.93 0.94 0.95 0.96 0.97</span><br><span class="line"> 0.98 0.99]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 任意创建一个二维数组，对其维度进行操作；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.T) <span class="comment"># 数组转置</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>, <span class="number">2</span>]) <span class="comment"># 返回最后一个元素值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>, <span class="number">2</span>]) <span class="comment"># 返回第2到第4个元素</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>, : <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[: : -<span class="number">1</span>, : : -<span class="number">1</span>]) <span class="comment"># 先对所有行处理返回逆序序列，再对列做逆序处理</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[[0 1 2]</span><br><span class="line"> [3 4 5]</span><br><span class="line"> [6 7 8]]</span><br><span class="line">[[0 3 6]</span><br><span class="line"> [1 4 7]</span><br><span class="line"> [2 5 8]]</span><br><span class="line">8</span><br><span class="line">2</span><br><span class="line">[3 4]</span><br><span class="line">[[8 7 6]</span><br><span class="line"> [5 4 3]</span><br><span class="line"> [2 1 0]]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.任意创建两个二维的数组 arr1、arr2，对两个数组进行四则运算：arr1+arr2、arr1-arr2、arr1*arr2、arr1/arr2；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>) <span class="comment"># 0~8的二维方阵</span></span><br><span class="line">b = np.ones( (<span class="number">3</span>, <span class="number">3</span>) ) <span class="comment"># 全1的方阵</span></span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="built_in">print</span>(a - b)</span><br><span class="line"><span class="built_in">print</span>(a * b)</span><br><span class="line"><span class="built_in">print</span>(a / b)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[[1. 2. 3.]</span><br><span class="line"> [4. 5. 6.]</span><br><span class="line"> [7. 8. 9.]]</span><br><span class="line">[[-1.  0.  1.]</span><br><span class="line"> [ 2.  3.  4.]</span><br><span class="line"> [ 5.  6.  7.]]</span><br><span class="line">[[0. 1. 2.]</span><br><span class="line"> [3. 4. 5.]</span><br><span class="line"> [6. 7. 8.]]</span><br><span class="line">[[0. 1. 2.]</span><br><span class="line"> [3. 4. 5.]</span><br><span class="line"> [6. 7. 8.]]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 创建数组 arr3=[3 6 9 3 1 5 7 2]，分别完成排序、去重、总和、累计和、均值、标准差、方差、最小值和最大值的统计。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(np.sort(a)) <span class="comment"># 升序排列</span></span><br><span class="line"><span class="built_in">print</span>(np.unique(a)) <span class="comment"># 去重</span></span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">sum</span>()) <span class="comment"># 求总和</span></span><br><span class="line"><span class="built_in">print</span>(a.mean()) <span class="comment"># 求均值</span></span><br><span class="line"><span class="built_in">print</span>(a.std()) <span class="comment"># 求标准差</span></span><br><span class="line"><span class="built_in">print</span>(a.var()) <span class="comment"># 求方差</span></span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">min</span>()) <span class="comment"># 求最小值</span></span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">max</span>()) <span class="comment"># 求最大值</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[1 2 3 3 5 6 7 9]</span><br><span class="line">[1 2 3 5 6 7 9]</span><br><span class="line">36</span><br><span class="line">4.5</span><br><span class="line">2.5495097567963922</span><br><span class="line">6.5</span><br><span class="line">1</span><br><span class="line">9</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5.将彩色图像转换为灰度图像 RGB to GRAY</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># matplotlib.pyplot.imread(path)用于读取一张图片，将图像数据变成数组array.</span></span><br><span class="line">img = plt.imread(<span class="string">&#x27;logo.png&#x27;</span>) <span class="comment"># plt读取的通道顺序为R、G、B</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用subplot展示</span></span><br><span class="line">plt.figure(figsize = (<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">image1 = plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">image1.set_title(<span class="string">&#x27;Raw Image&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gray转化公式，red*0.299 + green*0.587 + blue*0.114</span></span><br><span class="line">img1 = <span class="number">0.2989</span> * img[:,:,<span class="number">0</span>] + <span class="number">0.5870</span> * img[:,:,<span class="number">1</span>] + <span class="number">0.114</span> * img[:,:,<span class="number">2</span>]</span><br><span class="line">image2 = plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">image2.set_title(<span class="string">&#x27;Gray Image&#x27;</span>)</span><br><span class="line">plt.imshow(img1, cmap = <span class="string">&#x27;gray&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301449380.png" alt="img-202304301449380"></p><hr><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p><a href="https://ariesfun.gitee.io/posts/85c6.html">计算机视觉 上机实践一 图像的基本操作 </a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-上机实践1（Numpy-数值计算）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-上机实践1（Numpy-数值计算）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 上机实践1（Numpy 数值计算）&quot;&gt;&lt;/a&gt;数据分析与可视化</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="NumPy" scheme="https://ariesfun.gitee.io/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 实践基础练习六（Pandas）</title>
    <link href="https://ariesfun.gitee.io/posts/1c4c.html"/>
    <id>https://ariesfun.gitee.io/posts/1c4c.html</id>
    <published>2023-04-30T05:53:25.597Z</published>
    <updated>2023-04-30T05:55:14.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习六-（Pandas）"><a href="#数据分析与可视化-实践基础练习六-（Pandas）" class="headerlink" title="数据分析与可视化 实践基础练习六 （Pandas）"></a>数据分析与可视化 实践基础练习六 （Pandas）</h2><h3 id="一、本节需要掌握的Pandas相关函数或属性"><a href="#一、本节需要掌握的Pandas相关函数或属性" class="headerlink" title="一、本节需要掌握的Pandas相关函数或属性"></a>一、本节需要掌握的Pandas相关函数或属性</h3><ol><li><p>数据清洗：<strong>缺失值处理、重复值处理、异常值处理</strong></p></li><li><p>数据标准化方法：<strong>离差标准化、标准差标准化、小数定标标准化</strong></p></li><li><p>数据转换：<strong>类别型数据的亚变量处理、连续变量的离散化</strong></p></li></ol><hr><h3 id="二、实训案例"><a href="#二、实训案例" class="headerlink" title="二、实训案例"></a>二、实训案例</h3><h4 id="1-本数据集为一个包含30000个样本的美国高中生社交网络信息数据集。"><a href="#1-本数据集为一个包含30000个样本的美国高中生社交网络信息数据集。" class="headerlink" title="1. 本数据集为一个包含30000个样本的美国高中生社交网络信息数据集。"></a>1. 本数据集为一个包含30000个样本的美国高中生社交网络信息数据集。</h4><p>数据均匀采样于2006年到2009年，每个样本包含40个变量，其中gradyear、gender、age和friends四个变量代表高中生的毕业年份、性别、年龄和好友数等基本信息，剩余36个关键词代表了高中生的5大兴趣类：课外活动、时尚、宗教、浪漫和反社会行为，具体描述如下：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301347552.png" alt="img-202304301347552"></p><p><a href="https://pan.baidu.com/s/16NFEosBYX3F_o-oP5Vdpeg?pwd=2023">teenager 数据集下载</a></p><hr><h4 id="2-结合数据集完成以下操作。"><a href="#2-结合数据集完成以下操作。" class="headerlink" title="2. 结合数据集完成以下操作。"></a>2. 结合数据集完成以下操作。</h4><p>（1）读取数据并查看数据的前5行；</p><p>（2）查看数据集整体情况；</p><p>（3）查看缺失值的统计性描述分布情况；</p><p>（4）假设青少年的年龄范围为13-20岁，我们将不在此范围的数据记为缺失值，重新统计缺失值数目；</p><p>（5）选取年龄的均值填充年龄缺失值；</p><p>（6）统计性别缺失值并将其删除；</p><p>（7）采用箱线图对friend列数据进行异常值检测；</p><p>（8）删除异常值（规定：超过上四分位+1.5倍IQR距离，或者下四分位-1.5倍IQR距离的点为异常值，四分位距(IQR)就是上四分位与下四分位的差值，我们以IQR的1.5倍为标准）</p><p>（9）采用箱线图查看异常值剔除后的数据分布情况；</p><p>（10）对friend列进行标准差标准化处理；</p><p>（11）对gender列进行One-Hot编码；</p><p>（12）采用等距离散化方法对friends进行划分。</p><hr><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）读取数据并查看数据的前5行；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;teenager_sns.csv&#x27;</span>, sep = <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">df.head(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211857175.jpg" alt="img-202304211857175"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）查看数据集整体情况；</span></span><br><span class="line"></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 30000 entries, 0 to 29999</span><br><span class="line">Data columns (total 40 columns):</span><br><span class="line"> #   Column        Non-Null Count  Dtype  </span><br><span class="line">---  ------        --------------  -----  </span><br><span class="line"> 0   gradyear      30000 non-null  int64  </span><br><span class="line"> 1   gender        27276 non-null  object </span><br><span class="line"> 2   age           24914 non-null  float64</span><br><span class="line"> 3   friends       30000 non-null  int64  </span><br><span class="line"> 4   basketball    30000 non-null  int64  </span><br><span class="line"> 5   football      30000 non-null  int64  </span><br><span class="line"> 6   soccer        30000 non-null  int64  </span><br><span class="line"> 7   softball      30000 non-null  int64  </span><br><span class="line"> 8   volleyball    30000 non-null  int64  </span><br><span class="line"> 9   swimming      30000 non-null  int64  </span><br><span class="line"> 10  cheerleading  30000 non-null  int64  </span><br><span class="line"> 11  baseball      30000 non-null  int64  </span><br><span class="line"> 12  tennis        30000 non-null  int64  </span><br><span class="line"> 13  sports        30000 non-null  int64  </span><br><span class="line"> 14  cute          30000 non-null  int64  </span><br><span class="line"> 15  sex           30000 non-null  int64  </span><br><span class="line"> 16  sexy          30000 non-null  int64  </span><br><span class="line"> 17  hot           30000 non-null  int64  </span><br><span class="line"> 18  kissed        30000 non-null  int64  </span><br><span class="line"> 19  dance         30000 non-null  int64  </span><br><span class="line"> 20  band          30000 non-null  int64  </span><br><span class="line"> 21  marching      30000 non-null  int64  </span><br><span class="line"> 22  music         30000 non-null  int64  </span><br><span class="line"> 23  rock          30000 non-null  int64  </span><br><span class="line"> 24  god           30000 non-null  int64  </span><br><span class="line"> 25  church        30000 non-null  int64  </span><br><span class="line"> 26  jesus         30000 non-null  int64  </span><br><span class="line"> 27  bible         30000 non-null  int64  </span><br><span class="line"> 28  hair          30000 non-null  int64  </span><br><span class="line"> 29  dress         30000 non-null  int64  </span><br><span class="line"> 30  blonde        30000 non-null  int64  </span><br><span class="line"> 31  mall          30000 non-null  int64  </span><br><span class="line"> 32  shopping      30000 non-null  int64  </span><br><span class="line"> 33  clothes       30000 non-null  int64  </span><br><span class="line"> 34  hollister     30000 non-null  int64  </span><br><span class="line"> 35  abercrombie   30000 non-null  int64  </span><br><span class="line"> 36  die           30000 non-null  int64  </span><br><span class="line"> 37  death         30000 non-null  int64  </span><br><span class="line"> 38  drunk         30000 non-null  int64  </span><br><span class="line"> 39  drugs         30000 non-null  int64  </span><br><span class="line">dtypes: float64(1), int64(38), object(1)</span><br><span class="line">memory usage: 9.2+ MB</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）查看缺失值的统计性描述分布情况；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;gender&#x27;</span>].describe()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">count     27276</span><br><span class="line">unique        2</span><br><span class="line">top           F</span><br><span class="line">freq      22054</span><br><span class="line">Name: gender, dtype: object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;age&#x27;</span>].describe()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count    24914.000000</span><br><span class="line">mean        17.993949</span><br><span class="line">std          7.858054</span><br><span class="line">min          3.086000</span><br><span class="line">25%         16.312000</span><br><span class="line">50%         17.287000</span><br><span class="line">75%         18.259000</span><br><span class="line">max        106.927000</span><br><span class="line">Name: age, dtype: float64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）假设青少年的年龄范围为13-20岁，我们将不在此范围的数据记为缺失值，重新统计缺失值数目；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;age&#x27;</span>].isnull().<span class="built_in">sum</span>() <span class="comment"># 先统计年龄的缺失值数目；</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5086</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将不在此范围的数据记为缺失值(np.nan)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df[<span class="string">&#x27;age&#x27;</span>] = df.apply(<span class="keyword">lambda</span> x : np.nan <span class="keyword">if</span> (x[<span class="string">&#x27;age&#x27;</span>]&lt;<span class="number">13.0</span>) | (x[<span class="string">&#x27;age&#x27;</span>]&gt;<span class="number">20.0</span>) <span class="keyword">else</span> x[<span class="string">&#x27;age&#x27;</span>], axis = <span class="number">1</span>) </span><br><span class="line">df[<span class="string">&#x27;age&#x27;</span>].isnull().<span class="built_in">sum</span>() <span class="comment"># 再次统计值</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5523</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）选取年龄的均值填充年龄缺失值；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># df[&#x27;fill_age&#x27;]=df[&#x27;age&#x27;].fillna(df[&#x27;age&#x27;].mean()) # 增加了新列,使用均值来填充缺失值</span></span><br><span class="line">df.insert(<span class="number">3</span>, <span class="string">&#x27;fill_age&#x27;</span>, df[<span class="string">&#x27;age&#x27;</span>].fillna(df[<span class="string">&#x27;age&#x27;</span>].mean())) <span class="comment"># 插到age这列后面</span></span><br><span class="line">df.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211857172.jpg" alt="img-202304211857172"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）统计性别缺失值并将其删除；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;gender&#x27;</span>].isnull().<span class="built_in">sum</span>() <span class="comment"># 2724</span></span><br><span class="line">df.dropna(subset=[<span class="string">&#x27;gender&#x27;</span>], inplace=<span class="literal">True</span>) <span class="comment"># subset[&#x27;col&#x27;],即丢子列&#x27;col&#x27;中含有缺失值的行</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;gender&#x27;</span>].isnull().<span class="built_in">sum</span>() <span class="comment"># 性别的缺失值变为0</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）采用箱线图对friend列数据进行异常值检测；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>,<span class="number">6</span>)) <span class="comment"># 只对friends这列进行处理</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.boxplot(x = df.friends) <span class="comment"># 画箱体图</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;friends&#x27;</span>, fontsize = <span class="number">14</span>) <span class="comment"># 横坐标名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Count&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分布情况</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.hist(df.friends, bins = <span class="number">15</span>) <span class="comment"># 画直方图</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;friends&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Count&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211858295.jpg" alt="img-202304211858295"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（8）删除异常值（规定：超过上四分位+1.5倍IQR距离，或者下四分位-1.5倍IQR距离的点为异常值，四分位距(IQR)就是上四分位与下四分位的差值，我们以IQR的1.5倍为标准）</span></span><br><span class="line"></span><br><span class="line">IQR = df[<span class="string">&#x27;friends&#x27;</span>].quantile(<span class="number">0.75</span>) - df[<span class="string">&#x27;friends&#x27;</span>].quantile(<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">up = df[<span class="string">&#x27;friends&#x27;</span>].quantile(<span class="number">0.75</span>) + IQR*<span class="number">1.5</span> <span class="comment"># 表示上限，最大值</span></span><br><span class="line">down = df[<span class="string">&#x27;friends&#x27;</span>].quantile(<span class="number">0.25</span>) - IQR*<span class="number">1.5</span> <span class="comment"># 表示下限，最低值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对friends的这列进行判断，为真的会保留，其余的都是异常值</span></span><br><span class="line">teenager = df[ (df[<span class="string">&#x27;friends&#x27;</span>] &gt; down) &amp; (df[<span class="string">&#x27;friends&#x27;</span>] &lt; up)] </span><br><span class="line">teenager[<span class="string">&#x27;friends&#x27;</span>].describe()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count    26122.000000</span><br><span class="line">mean        25.409425</span><br><span class="line">std         24.951122</span><br><span class="line">min          0.000000</span><br><span class="line">25%          4.000000</span><br><span class="line">50%         19.000000</span><br><span class="line">75%         40.000000</span><br><span class="line">max        103.000000</span><br><span class="line">Name: friends, dtype: float64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（9）采用箱线图查看异常值剔除后的数据分布情况；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>,<span class="number">6</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.boxplot(x = teenager.friends) <span class="comment"># 画箱体图</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;friends&#x27;</span>, fontsize = <span class="number">14</span>) <span class="comment"># 横坐标名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Count&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分布情况</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.hist(teenager.friends, bins = <span class="number">15</span>) <span class="comment"># 直方图</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;friends&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Count&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211852442.png" alt="img-202304211852442"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（10）对friend列进行标准差标准化处理；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">StandarScaler</span>(<span class="params">data</span>):</span><br><span class="line">    data=(data - data.mean()) / data.std() <span class="comment"># 标准差标准化转化公式</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增一列表示标准差标准化处理后的结果</span></span><br><span class="line">teenager.insert(<span class="number">4</span>, <span class="string">&#x27;firStd&#x27;</span>, StandarScaler(teenager[<span class="string">&#x27;friends&#x27;</span>]))</span><br><span class="line">teenager.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211858472.jpg" alt="img-202304211858472"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（11）对gender列进行One-Hot编码；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行哑变量变换，变为数值型</span></span><br><span class="line">pd.get_dummies(teenager).head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211859905.jpg" alt="img-202304211859905"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（12）采用等距离散化方法对friends进行划分。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等距离散化,在friends后新增一列</span></span><br><span class="line">col_new = <span class="string">&#x27;group&#x27;</span></span><br><span class="line">teenager.insert(<span class="number">4</span>, col_new, pd.cut(teenager[<span class="string">&#x27;friends&#x27;</span>], <span class="number">3</span>, labels = [<span class="string">&#x27;好友少&#x27;</span>, <span class="string">&#x27;好友正常&#x27;</span>, <span class="string">&#x27;好友多&#x27;</span>])) <span class="comment"># 按从小到大等距排列，分为三组（自定义标签名）</span></span><br><span class="line">teenager.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211859133.jpg" alt="img-202304211859133"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">teenager[<span class="string">&#x27;group&#x27;</span>].value_counts() <span class="comment"># 统计各个分组的数量</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">好友少     18226</span><br><span class="line">好友正常     5847</span><br><span class="line">好友多      2049</span><br><span class="line">Name: group, dtype: int64</span><br></pre></td></tr></table></figure><hr><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://pan.baidu.com/s/16NFEosBYX3F_o-oP5Vdpeg?pwd=2023">teenager 数据集下载</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-实践基础练习六-（Pandas）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-实践基础练习六-（Pandas）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 实践基础练习六 （Pandas）&quot;&gt;&lt;/a&gt;数据分析与可视化 实践</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="Pandas" scheme="https://ariesfun.gitee.io/tags/Pandas/"/>
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 实践基础练习五（Pandas）</title>
    <link href="https://ariesfun.gitee.io/posts/1aee.html"/>
    <id>https://ariesfun.gitee.io/posts/1aee.html</id>
    <published>2023-04-30T05:26:56.650Z</published>
    <updated>2023-04-30T05:44:40.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习五-（Pandas）"><a href="#数据分析与可视化-实践基础练习五-（Pandas）" class="headerlink" title="数据分析与可视化 实践基础练习五 （Pandas）"></a>数据分析与可视化 实践基础练习五 （Pandas）</h2><h3 id="一、本节需要掌握的Pandas相关函数或属性"><a href="#一、本节需要掌握的Pandas相关函数或属性" class="headerlink" title="一、本节需要掌握的Pandas相关函数或属性"></a>一、本节需要掌握的Pandas相关函数或属性</h3><ol><li><p>Pandas数据运算    </p></li><li><p>Pandas常用的汇总与统计性方法</p></li><li><p>数据分组<strong>df.groupby( )</strong>   </p><p> 参数by：可以是函数，字典，Series; axis=0是按列，1是按行</p></li><li><p>数据聚合<strong>agg()、apply()、transform()</strong>     </p><p> agg(): 可对分组后的数据进行一系列的操作包含求和求最值，均值等</p><p> apply(): 可自定义面向分组的聚合函数（Series对象是对每个元素处理，DataFrame对象是对一行或一列处理，groupby对象是对一个分组进行处理）</p><p> transfrom(): 不对数据进行聚合输出，而只是对每一行记录提供了相应的聚合结果（输出结果有冗余）</p></li></ol><h3 id="二、实训案例"><a href="#二、实训案例" class="headerlink" title="二、实训案例"></a>二、实训案例</h3><h4 id="1-行星数据集记录了2014年之前发现的行星的信息，数据中主要特征有："><a href="#1-行星数据集记录了2014年之前发现的行星的信息，数据中主要特征有：" class="headerlink" title="1.行星数据集记录了2014年之前发现的行星的信息，数据中主要特征有："></a>1.行星数据集记录了2014年之前发现的行星的信息，数据中主要特征有：</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301300306.png" alt="img-202304301300306" style="zoom: 80%;" /><p><a href="https://pan.baidu.com/s/1joADk3p2taeNvDEhrkkLgg?pwd=2023">planets.csv 数据集下载</a></p><h4 id="2-结合数据集完成以下操作。"><a href="#2-结合数据集完成以下操作。" class="headerlink" title="2. 结合数据集完成以下操作。"></a>2. 结合数据集完成以下操作。</h4><p>（1）读取planets.csv文件；</p><p>（2）查看数据前5行；</p><p>（3）查看数据基本情况；</p><p>（4）按method特征对数据进行分组，并将新数据记为grouped；</p><p>（5）将数据按发现年份在2000年前和2000年后进行分组；</p><p>（6）求2000年前和2000年后的分组均值；</p><p>（7）查看不同方法发现的行星与地球距离的中位数；</p><p>（8）按发现行星的方法和发现的年代进行分组，并统计相应分组下发现的行星的总数；</p><p>（9）计算不同方法发现的行星在各特征上的极差；</p><p>（10）分别计算各种方法发现的行星的距离的均值和发现的数量之和。</p><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）读取planets.csv文件,导入行星数据表到DataFrame中；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;planets.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）查看数据前5行；</span></span><br><span class="line"></span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211841741.jpg" alt="img-202304211841741" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）查看数据基本情况；</span></span><br><span class="line"></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 1035 entries, 0 to 1034</span><br><span class="line">Data columns (total 6 columns):</span><br><span class="line"> #   Column          Non-Null Count  Dtype  </span><br><span class="line">---  ------          --------------  -----  </span><br><span class="line"> 0   method          1035 non-null   object </span><br><span class="line"> 1   number          1035 non-null   int64  </span><br><span class="line"> 2   orbital_period  992 non-null    float64</span><br><span class="line"> 3   mass            513 non-null    float64</span><br><span class="line"> 4   distance        808 non-null    float64</span><br><span class="line"> 5   year            1035 non-null   int64  </span><br><span class="line">dtypes: float64(3), int64(2), object(1)</span><br><span class="line">memory usage: 48.6+ KB</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）按method特征对数据进行分组，并将新数据记为grouped；</span></span><br><span class="line"></span><br><span class="line">grouped = df.groupby(<span class="string">&#x27;method&#x27;</span>)</span><br><span class="line">grouped.head(<span class="number">3</span>) <span class="comment">#对每个分组后的数据显示前3行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grouped.size() # 可统计每个分组的数量 </span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211842491.jpg" alt="img-202304211842491" style="zoom: 67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）将数据按发现年份在2000年前和2000年后进行分组；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行分段分组</span></span><br><span class="line">col_new = <span class="string">&#x27;Before 2000&#x27;</span> <span class="comment"># true就是在2000年前发现的</span></span><br><span class="line">df.insert(<span class="number">6</span>, col_new, df[<span class="string">&#x27;year&#x27;</span>] &lt; <span class="number">2000</span>) <span class="comment"># insert()用于插入列</span></span><br><span class="line"></span><br><span class="line">group = df.groupby(<span class="string">&#x27;Before 2000&#x27;</span>)</span><br><span class="line">group.head() <span class="comment"># 查看分组后各自前5行数据</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211843859.jpg" alt="img-202304211843859" style="zoom:80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）求2000年前和2000年后的分组均值；</span></span><br><span class="line"></span><br><span class="line">group.mean() <span class="comment"># 用于求按按年份分组后数据的均值</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211843676.jpg" alt="img-20230421184367"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）查看不同方法发现的行星与地球距离的中位数；</span></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;method&#x27;</span>)[<span class="string">&#x27;distance&#x27;</span>].median() <span class="comment"># 先按methood分组，取&#x27;distance&#x27;的这列数据再求中位数</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">method</span><br><span class="line">Astrometry                         17.875</span><br><span class="line">Eclipse Timing Variations         315.360</span><br><span class="line">Imaging                            40.395</span><br><span class="line">Microlensing                     3840.000</span><br><span class="line">Orbital Brightness Modulation    1180.000</span><br><span class="line">Pulsar Timing                    1200.000</span><br><span class="line">Pulsation Timing Variations           NaN</span><br><span class="line">Radial Velocity                    40.445</span><br><span class="line">Transit                           341.000</span><br><span class="line">Transit Timing Variations         855.000</span><br><span class="line">Name: distance, dtype: float64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（8）按发现行星的方法和发现的年代进行分组，并统计相应分组下发现的行星的总数；</span></span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="number">40</span>) <span class="comment"># 为了让数据更全显示，可指定最大显示的行数</span></span><br><span class="line">df.groupby([<span class="string">&#x27;method&#x27;</span>, <span class="string">&#x27;year&#x27;</span>])[<span class="string">&#x27;number&#x27;</span>].<span class="built_in">sum</span>() <span class="comment"># 先对数据按&#x27;method&#x27;和&#x27;year&#x27;来分组</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">method                     year</span><br><span class="line">Astrometry                 2010     1</span><br><span class="line">                           2013     1</span><br><span class="line">Eclipse Timing Variations  2008     4</span><br><span class="line">                           2009     1</span><br><span class="line">                           2010     4</span><br><span class="line">                                   ..</span><br><span class="line">Transit                    2014    93</span><br><span class="line">Transit Timing Variations  2011     2</span><br><span class="line">                           2012     2</span><br><span class="line">                           2013     2</span><br><span class="line">                           2014     3</span><br><span class="line">Name: number, Length: 69, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（9）计算不同方法发现的行星在各特征上的极差；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在上面的（5）中引入了一列布尔值变量，为了便于数值计算此时可将该列删掉</span></span><br><span class="line">df.drop(<span class="string">&#x27;Before 2000&#x27;</span>, axis = <span class="number">1</span>, inplace = <span class="literal">True</span>) <span class="comment"># 确认替换原数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保证分组数据grouped不含boolean类型</span></span><br><span class="line">grouped.apply(<span class="keyword">lambda</span> x: x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>()) <span class="comment"># apply可自定义面向分组的聚合函数，对每一列计算极差函数（相当于grouped.max() - grouped.min()）</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211844285.jpg" alt="img-20230421184428" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（10）分别计算各种方法发现的行星的距离的均值和发现的数量之和。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用聚合函数</span></span><br><span class="line">grouped.agg(&#123;<span class="string">&#x27;distance&#x27;</span>: [np.mean], <span class="string">&#x27;number&#x27;</span>: [np.<span class="built_in">sum</span>]&#125;) <span class="comment"># 使用字典作为参数,来求距离的均值和数量之和</span></span><br><span class="line">                                                         <span class="comment"># 也可使用grouped[&#x27;distance&#x27;].mean() 和 grouped[&#x27;number&#x27;].sum()</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211844643.jpg" alt="img-202304211844643" style="zoom: 50%;" /><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://pan.baidu.com/s/1joADk3p2taeNvDEhrkkLgg?pwd=2023">planets.csv 数据集下载</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-实践基础练习五-（Pandas）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-实践基础练习五-（Pandas）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 实践基础练习五 （Pandas）&quot;&gt;&lt;/a&gt;数据分析与可视化 实践</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="Pandas" scheme="https://ariesfun.gitee.io/tags/Pandas/"/>
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>春季每日一题2023 已完结</title>
    <link href="https://ariesfun.gitee.io/posts/3f57.html"/>
    <id>https://ariesfun.gitee.io/posts/3f57.html</id>
    <published>2023-04-22T02:15:55.087Z</published>
    <updated>2023-05-22T11:44:01.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AcWing-春季每日一题2023-已完结"><a href="#AcWing-春季每日一题2023-已完结" class="headerlink" title="AcWing 春季每日一题2023 (已完结)"></a>AcWing 春季每日一题2023 (已完结)</h2><h3 id="打卡题目（内容有疑问或错误，欢迎随时询问或指正哈-）"><a href="#打卡题目（内容有疑问或错误，欢迎随时询问或指正哈-）" class="headerlink" title="打卡题目（内容有疑问或错误，欢迎随时询问或指正哈~）"></a>打卡题目（内容有疑问或错误，欢迎随时询问或指正哈~）</h3><hr><p><strong>Day17: 05/08</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3483/">【棋盘游戏】</a>    考查知识点： <u>单源最短路径，SPFA，图论</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6419849/">AcWing 3480. 棋盘游戏</a></p><hr><p><strong>Day16: 05/07</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/description/3485/">【大数运算】</a>    考查知识点： <u>高精度，符号判断，模板题</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6414963/">AcWing 3482. 大数运算</a></p><hr><p><strong>Day15: 05/06</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3500/">【质数】</a>    考查知识点： <u>筛质数，线性筛法，埃氏筛法，模板题</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9193593/">AcWing 3497. 质数</a></p><hr><p><strong>Day14: 05/05</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3515/">【最短距离总和】</a>    考查知识点： <u>最短距离总和，Floyd，DP</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9182517/">AcWing 3512. 最短距离总和</a></p><p>题目：<a href="https://www.acwing.com/problem/content/856/">【 Floyd求最短路】</a>    考查知识点： <u> 最短路，Floyd，求每一对顶点的最短距离，模板题</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6399816/">AcWing 854. Floyd求最短路</a></p><hr><p><strong>Day13: 05/03</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3501/">【日期差值】</a>    考查知识点： <u>模拟题，日期计算</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6388230/">AcWing 3498. 日期差值</a></p><hr><p><strong>Day12: 05/02</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3476/">【鸡兔同笼】</a>    考查知识点： <u>直接模拟，贪心</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6383154/">AcWing 3473. 鸡兔同笼</a></p><hr><p><strong>Day11: 05/01</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3454/">【 字符串排序II】</a>    考查知识点： <u>对字符排序，cmp函数，pair排序</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9155991/">AcWing 3451. 字符串排序II</a></p><p>题目：<a href="https://www.acwing.com/problem/content/3428/">【 小白鼠排队】</a>    考查知识点： <u>sort() 排序，pair二元组排序</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9155751/">AcWing 3425. 小白鼠排队</a></p><hr><p><strong>Day10: 04/30</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/description/3398/">【 10进制 VS 2进制】</a>    考查知识点： <u>C++高精度处理，进位制</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6373717/">AcWing 3395. 10进制 VS 2进制 </a></p><p>题目：<a href="https://www.acwing.com/problem/content/3478/">【 简单密码】</a>    考查知识点： <u>模拟题，字符串处理</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6372935/">AcWing 3475. 简单密码 </a></p><hr><p><strong>Day9: 04/29</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3579/">【 分组统计】</a>    考查知识点： <u>模拟题，数组去重</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6370000/">AcWing 3576. 分组统计 </a></p><hr><p><strong>Day8: 04/28</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3546/">【 三元组】</a>    考查知识点： <u>简单模拟，(考研机试题)</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6362210/">AcWing 3543. 三元组 </a></p><hr><p><strong>Day7: 04/27</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3511/">【最长公共子串】</a>    考查知识点： <u>最长公共子串问题，二分，字符串哈希，哈希表(STL)</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9132682/">AcWing 3508. 最长公共子串 </a></p><hr><p><strong>Day6: 04/26</strong> </p><p>题目：<a href="https://www.acwing.com/problem/content/3449/">【整数奇偶排序】</a>    考查知识点： <u>模拟题，简单排序</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9126853/">AcWing 3446. 整数奇偶排序</a></p><p>题目：<a href="https://www.acwing.com/problem/content/3434/">【skew数】</a>    考查知识点： <u>模拟题，字符串处理</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9126817/">AcWing 3431. skew数 </a></p><hr><p><strong>Day5: 04/25（补）</strong> 很有思维难度，写了好久呜呜~~</p><p>题目：<a href="https://www.acwing.com/problem/content/4967/">【子矩阵】</a>    考查知识点： <u>（二维）单调队列，滑动窗口拓展</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9122007/">AcWing 4964. 子矩阵 </a></p><hr><p><strong>Day4: 04/22</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/4961/">【接龙数列】</a>    考查知识点： <u>动态规划，线性DP，最长上升子序列变形</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6320641/">AcWing 4958. 接龙数列</a></p><hr><p><strong>Day3: 04/12</strong> </p><p>题目：<a href="https://www.acwing.com/problem/content/4960/">【飞机降落】</a>    考查知识点： <u>DFS，全排列，(状态压缩DP)</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6260091/">AcWing 4957. 飞机降落</a></p><hr><p><strong>Day2: 04/11</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/4959/">【冶炼金属】</a>    考查知识点： <u>二分，推公式，整除性质</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6254141/">AcWing 4956. 冶炼金属</a></p><hr><p><strong>Day1: 04/09</strong> </p><p>题目：<a href="https://www.acwing.com/problem/content/description/3387/">【二叉树遍历】</a>    考查知识点： <u>DFS，树的遍历(前中后)，递归搜索树</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6237121/">AcWing 3384. 二叉树遍历</a></p><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>活动地址：<a href="https://www.acwing.com/activity/content/introduction/3166/">AcWing-春季每日一题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;AcWing-春季每日一题2023-已完结&quot;&gt;&lt;a href=&quot;#AcWing-春季每日一题2023-已完结&quot; class=&quot;headerlink&quot; title=&quot;AcWing 春季每日一题2023 (已完结)&quot;&gt;&lt;/a&gt;AcWing 春季每日一题2023 (已完</summary>
      
    
    
    
    <category term="每日一题打卡" scheme="https://ariesfun.gitee.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%89%93%E5%8D%A1/"/>
    
    
    <category term="C/C++" scheme="https://ariesfun.gitee.io/tags/C-C/"/>
    
    <category term="刷题记录" scheme="https://ariesfun.gitee.io/tags/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    <category term="每日一题" scheme="https://ariesfun.gitee.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="经典算法" scheme="https://ariesfun.gitee.io/tags/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础 第三讲 Shell语法</title>
    <link href="https://ariesfun.gitee.io/posts/1e1a.html"/>
    <id>https://ariesfun.gitee.io/posts/1e1a.html</id>
    <published>2023-04-20T13:08:25.999Z</published>
    <updated>2023-05-01T08:20:52.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux基础-第三讲-shell语法"><a href="#Linux基础-第三讲-shell语法" class="headerlink" title="Linux基础 第三讲 shell语法"></a>Linux基础 第三讲 shell语法</h2><h2 id="1-shell语法"><a href="#1-shell语法" class="headerlink" title="1. shell语法"></a>1. shell语法</h2><h3 id="1-概论"><a href="#1-概论" class="headerlink" title="(1) 概论"></a>(1) 概论</h3><p><strong>shell是我们通过命令行与操作系统沟通的语言。</strong></p><p>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。<br><code>AC Terminal</code>中的命令行可以看成是一个“<strong>shell脚本在逐行执行</strong>”。</p><p>Linux中常见的shell脚本有很多种，常见的有：</p><ul><li><p>Bourne Shell(/usr/bin/sh或/bin/sh)</p></li><li><p><strong>Bourne Again Shell(/bin/bash)</strong></p></li><li><p>C Shell(/usr/bin/csh)</p></li><li><p>K Shell(/usr/bin/ksh)</p></li><li><p>zsh</p></li><li><p>…</p></li></ul><p><strong>Linux系统中一般默认使用bash</strong>，所以接下来讲解bash中的语法。<br>文件开头需要写<code>#! /bin/bash</code>，指明bash为脚本解释器。</p><p><strong>学习技巧</strong><br><strong>不要死记硬背，遇到含糊不清的地方，可以在AC Terminal里实际运行一遍。</strong></p><p><strong>脚本示例</strong><br>新建一个<code>test.sh</code>文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash  <span class="comment"># 指明解释器</span></span></span><br><span class="line">echo &quot;Hello World!&quot; # echo表示输出</span><br></pre></td></tr></table></figure><p><strong>运行方式</strong></p><ul><li><p>用解释器执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bash + 脚本文件名</span></span><br><span class="line"></span><br><span class="line">bash test.sh</span><br><span class="line">Hello World!  # 脚本输出</span><br></pre></td></tr></table></figure></li><li><p>作为可执行文件运行</p></li></ul><p><code>ls -l filename</code> 查看文件权限</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230201125236717.png" alt="image-20230201125236717"></p><p>每组共三个权限<strong>rwx</strong>,即读写执行权限（上图都无可执行权限）</p><p>有三组：1 作者本身的权限， 2  同组的权限， 3 其他用户的权限</p><p><code>chmod +x test.sh</code>  <strong>使脚本具有可执行权限</strong>（增加权限），同时文件名颜色从白到绿色</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./test.sh # 当前路径下执行</span><br><span class="line">Hello World! # 脚本输出</span><br><span class="line"></span><br><span class="line">/home/acs/test.sh  # 绝对路径下执行</span><br><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">~/test.sh  # 家目录路径下执行</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h3 id="2-注释"><a href="#2-注释" class="headerlink" title="(2) 注释"></a>(2) 注释</h3><p><strong>单行注释</strong><br>每行中<code>#</code>之后的内容均是注释。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一行注释</span></span><br><span class="line">echo &#x27;Hello World&#x27;  # 这也是注释</span><br></pre></td></tr></table></figure><p><strong>多行注释</strong></p><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;EOF   # 注意冒号也可以不用加</span><br><span class="line">第一行注释</span><br><span class="line">第二行注释</span><br><span class="line">第三行注释</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其中EOF可以换成其它任意字符串。 EOF == abc == !</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="(3) 变量"></a>(3) 变量</h3><p><strong>定义变量</strong><br>定义变量，不需要加<code>$</code>符号，例如：</p><p>ps: 定义变量时，赋值时<strong>等号两边</strong>不能有空格。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name1=&#x27;ariesfun&#x27;  # 单引号定义字符串，</span><br><span class="line">name2=&quot;ariesfun&quot;  # 双引号定义字符串</span><br><span class="line">name3=ariesfun    # 也可以不加引号，同样表示字符串</span><br></pre></td></tr></table></figure><p><strong>使用变量</strong><br>使用变量，需要加上<code>$</code>符号，或者<code>$&#123;&#125;</code>符号。花括号是可选的，主要为了<strong>帮助解释器识别变量边界</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun</span><br><span class="line">echo $name  # 输出ariesfun</span><br><span class="line">echo $&#123;name&#125; # 输出ariesfun</span><br><span class="line">echo $&#123;name&#125;hhhh  # 输出ariesfunhhhh</span><br></pre></td></tr></table></figure><p>定义变量的时候变量都是字符串，但当变量需要是整数时，会自动把变量转换成整数。</p><p><strong>只读变量</strong><br>使用<code>readonly</code>或者<code>declare</code>可以将变量<strong>变为只读</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun</span><br><span class="line">readonly name</span><br><span class="line">declare -r name  # 两种写法均可</span><br><span class="line">name=abc  # 会报错，因为此时name只读</span><br></pre></td></tr></table></figure><p><strong>删除变量</strong><br><code>unset</code>可以删除变量。</p><p>同时被声明为只读的变量无法被unset删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun</span><br><span class="line">unset name</span><br><span class="line">echo $name  # 输出空行</span><br></pre></td></tr></table></figure><p><strong>变量类型</strong></p><p>配环境会用到。</p><p><strong>1)</strong> 自定义变量（<strong>局部变量</strong>）<br>    子进程不能访问的变量</p><p><strong>2)<strong>环境变量（</strong>全局变量</strong>）<br>    子进程可以访问的变量</p><p>自定义变量改成全局变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun  # 定义变量</span><br><span class="line">export name  # 第一种方法，只在当前bash中有效</span><br><span class="line">declare -x name # 第二种方法</span><br></pre></td></tr></table></figure><p>环境变量改为局部变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export name=ariesfun  # 定义环境变量</span><br><span class="line">declare +x name  # 改为自定义变量</span><br></pre></td></tr></table></figure><p><strong>字符串</strong><br>字符串可以用单引号或双引号，也可以不用引号。</p><p>单引号与双引号的区别：</p><ul><li>单引号中的内容会原样输出，不会执行、不会取变量；</li><li><strong>双引号中的内容可以执行、可以取变量；</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun  # 不用引号</span><br><span class="line">echo &#x27;hello, $name \&quot;hh\&quot;&#x27;  # 单引号字符串，输出 hello, $name \&quot;hh\&quot;</span><br><span class="line">echo &quot;hello, $name \&quot;hh\&quot;&quot;  # 双引号字符串，输出 hello, ariesfun &quot;hh&quot;</span><br></pre></td></tr></table></figure><p><strong>获取字符串长度</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;ariesfun&quot;</span><br><span class="line">echo $&#123;#name&#125;  # 输出8</span><br></pre></td></tr></table></figure><p><strong>提取子串</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;hello, ariesfun&quot;</span><br><span class="line">echo $&#123;name:0:5&#125;  # 提取从0开始的5个字符(类python中的切片，左闭右开)</span><br></pre></td></tr></table></figure><p>ps : </p><p><code>top</code>输出正在执行的进程，按<code>q</code>退出</p><p><code>type+命令</code>可以解释该命令的来源（内嵌命令、第三方命令等）</p><p><code>bash</code>可以用来开一个新的进程(原进程会休眠)，输入<code>exit</code>或按<code>ctrl+d</code>退出新的<code>bash</code></p><p><code>bash</code>：开启子进程，<code>exit</code>或<code>ctrl+d</code> : 退出子进程<br><code>export</code>变为环境变量，<code>declare +x</code>变为自定义变量</p><hr><h3 id="4-默认变量"><a href="#4-默认变量" class="headerlink" title="(4) 默认变量"></a>(4) 默认变量</h3><p><strong>文件参数变量</strong><br>在执行shell脚本时，可以向脚本传递参数。<code>$1</code>是第一个参数，<code>$2</code>是第二个参数，以此类推。</p><p>特殊的，**$0是文件名（包含路径）**。</p><p>其实就是我们输入的第一段，输入<strong>绝对路径</strong>就显示绝对路径，输入<strong>相对路径</strong>就显示相对路径</p><p>eg. 创建文件<code>test.sh</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;文件名：&quot;$0</span><br><span class="line">echo &quot;参数一：&quot;$1</span><br><span class="line">echo &quot;参数二：&quot;$2</span><br><span class="line">echo &quot;参数三：&quot;$3</span><br><span class="line">echo &quot;参数四：&quot;$4  #echo $&#123;10&#125; 多位参数需要加大括号</span><br></pre></td></tr></table></figure><p>然后执行该脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./test.sh 1 2 3 4</span><br><span class="line">文件名：./test.sh</span><br><span class="line">参数一：1</span><br><span class="line">参数二：2</span><br><span class="line">参数三：3</span><br><span class="line">参数四：4</span><br></pre></td></tr></table></figure><p><strong>其它参数相关变量</strong></p><table><thead><tr><th align="left">参数</th><th>说明</th></tr></thead><tbody><tr><td align="left"><code>$#</code></td><td>代表文件传入的参数个数，如上例中值为4</td></tr><tr><td align="left"><code>$*</code></td><td>由所有参数构成的用空格隔开的字符串，如上例中值为<code>&quot;$1 $2 $3 $4&quot;</code></td></tr><tr><td align="left"><code>$@</code></td><td>每个参数分别用双引号括起来的字符串，如上例中值为<code>&quot;$1&quot; &quot;$2&quot; &quot;$3&quot; &quot;$4&quot;</code></td></tr><tr><td align="left"><code>$$</code></td><td>脚本当前运行的进程ID</td></tr><tr><td align="left"><code>$?</code></td><td>返回上一条命令的<strong>退出状态</strong>（注意不是stdout，而是<strong>exit code</strong>）,<strong>0表示正常退出</strong>，其他值表示错误</td></tr><tr><td align="left"><code>$(command)</code></td><td>获取标准输出，返回<code>command</code>这条命令的stdout<strong>（可嵌套，能实现多个命令）</strong></td></tr><tr><td align="left">command，用``包起来（键盘左上角）</td><td>返回<code>command</code>这条命令的stdout（不可嵌套）</td></tr></tbody></table><p>ps:</p><p><code>$* </code> 会把几个参数合并成一个参数,<br><code>&amp;@</code> 结果出来的这几个参数仍然是独立的。</p><hr><h3 id="5-数组"><a href="#5-数组" class="headerlink" title="(5) 数组"></a>(5) 数组</h3><p>数组中可以存放多个不同类型的值，</p><p><strong>只支持一维数组，初始化时不需要指明数组大小, 数组下标从0开始。</strong></p><p><strong>定义</strong><br><u>数组用小括号表示，元素之间用空格隔开</u>。例如：</p><p><code>array=(1 abc &quot;def&quot; yyy)</code><br>也可以直接定义数组中某个元素的值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array[0]=1</span><br><span class="line">array[1]=abc</span><br><span class="line">array[2]=&quot;def&quot;</span><br><span class="line">array[3]=yyy</span><br></pre></td></tr></table></figure><p><strong>读取数组中某个元素的值</strong><br>格式：</p><p><code>$&#123;array[index]&#125;</code></p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yyy)</span><br><span class="line">echo $&#123;array[0]&#125;</span><br><span class="line">echo $&#123;array[1]&#125;</span><br><span class="line">echo $&#123;array[2]&#125;</span><br><span class="line">echo $&#123;array[3]&#125;</span><br></pre></td></tr></table></figure><p><strong>读取整个数组, 并输出</strong><br>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yyy)</span><br><span class="line"></span><br><span class="line">echo $&#123;array[@]&#125;  # 第一种写法</span><br><span class="line">echo $&#123;array[*]&#125;  # 第二种写法</span><br></pre></td></tr></table></figure><p><strong>数组长度</strong><br>类似于字符串,使用<code>#</code>号</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yyy)</span><br><span class="line"></span><br><span class="line">echo $&#123;#array[@]&#125;  # 第一种写法</span><br><span class="line">echo $&#123;#array[*]&#125;  # 第二种写法</span><br></pre></td></tr></table></figure><p>ps: 注意<br><strong>在读取整个数组时，未定义的部分就不会显示</strong>。比如定义了<code>a[0] a[1] a[2] a[1000]</code>,</p><p>利用<code>echo $&#123;a[@]&#125;</code>输出时，只会显示定义的数组那4个元素的值</p><p>对上例求长度时，结果是4，而不是1000</p><hr><h3 id="6-expr命令"><a href="#6-expr命令" class="headerlink" title="(6) expr命令"></a>(6) expr命令</h3><p><strong>expr命令用于求表达式的值</strong>，格式为：<code>expr 表达式</code></p><p><strong>expr可以用<code>$()</code>和``来取返回值。</strong></p><p><strong>乘号和括号都需要转义才能使用,因为单个符号有自己含义</strong></p><p><strong>表达式说明：</strong></p><ul><li><p>用空格隔开每一项</p></li><li><p>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可试试转义）</p></li><li><p>对包含空格和其他特殊字符的字符串要用引号括起来</p></li><li><p>expr会在<code>stdout</code>中输出结果。如果为<strong>逻辑关系表达式</strong>，则结果为真时，<code>stdout</code>输出1，否则输出0。</p></li><li><p>expr的<code>exit code</code>：如果为<strong>逻辑关系表达式</strong>，则结果为真时，<code>exit code</code>为0，否则为1。</p></li></ul><p>例如：（非重点）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr 3 &#x27;&gt;&#x27; 2 # 结果为真，stdout输出1，exit code为0 </span><br><span class="line">expr 3 &#x27;&lt;&#x27; 2 # 结果为假，stdout输出0，exit code为1</span><br></pre></td></tr></table></figure><p><strong>字符串表达式</strong></p><ul><li><p><code>length STRING</code> ps: 取得得字符串要<strong>加双引号</strong>,以防中间含有空格<br>  返回<code>STRING</code>的<strong>长度</strong></p></li><li><p><code>index STRING CHARSET</code><br>  <code>CHARSET</code>中任意单个字符在STRING中<strong>最前面的字符位置</strong>，<strong>下标从1开始</strong>。</p><p>  如果在STRING中完全不存在<code>CHARSET</code>中的字符，则返回0。</p></li><li><p><code>substr STRING POSITION LENGTH</code><br>  返回<code>STRING</code>字符串中从<code>POSITION</code>开始，长度最大为<code>LENGTH</code>的子串, <strong>截取子串</strong></p><p>  如果<code>POSITION</code>或<code>LENGTH</code>为负数，0或非数值，则返回空字符串。</p></li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;Hello World!&quot;</span><br><span class="line"></span><br><span class="line">echo `expr length &quot;$str&quot;`  # ``不是单引号，表示执行该命令，会输出12</span><br><span class="line">echo `expr index &quot;$str&quot; aWd`  # 输出7，下标从1开始</span><br><span class="line">echo `expr substr &quot;$str&quot; 2 3`  # 输出 ell</span><br></pre></td></tr></table></figure><p><strong>整数表达式</strong><br><code>expr</code>支持普通的算术操作，<u>算术表达式优先级低于字符串表达式，高于逻辑关系表达式</u>。</p><ul><li><code>+ - </code><br>加减运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><ul><li><p><code>* / %</code><br>乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</p><p>求n的m次幂 ： <code>echo $[n**m]</code> </p></li></ul><ul><li><code>()</code> 可以改变优先级，但<strong>需要用反斜杠转义</strong>。</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一行注释</span></span><br><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a + $b`  # 输出7</span><br><span class="line">echo `expr $a - $b`  # 输出-1</span><br><span class="line">echo `expr $a \* $b`  # 输出12，*需要转义(加单引号也可)</span><br><span class="line">echo `expr $a / $b`  # 输出0，整除</span><br><span class="line">echo `expr $a % $b` # 输出3</span><br><span class="line">echo $( expr \( $a + 1 \) \* \( $b + 1 \) )</span><br><span class="line">echo `expr \( $a + 1 \) \* \( $b + 1 \)`     # 输出20，值为(a +1) * (b + 1)</span><br></pre></td></tr></table></figure><p><strong>逻辑关系表达式</strong></p><ul><li><p><code>|</code><br>  如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。</p></li><li><p><code>&amp;</code><br>  如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</p></li><li><p><code>&lt; &lt;= = == != &gt;= &gt;</code><br>  比较两端的参数，如果为true，则返回1，否则返回0。”==”是”=”的同义词。</p><p>  <code>expr</code>首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</p></li><li><p><code>()</code> 可以改变优先级，但需要<strong>用反斜杠转义</strong>。</p></li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a \&gt; $b`  # 输出0，&gt;需要转义</span><br><span class="line">echo `expr $a &#x27;&lt;&#x27; $b`  # 输出1，也可以将特殊字符用引号引起来</span><br><span class="line">echo `expr $a &#x27;&gt;=&#x27; $b`  # 输出0</span><br><span class="line">echo `expr $a \&lt;\= $b`  # 输出1</span><br><span class="line"></span><br><span class="line">c=0</span><br><span class="line">d=5</span><br><span class="line"></span><br><span class="line">echo `expr $c \&amp; $d`  # 输出0</span><br><span class="line">echo `expr $a \&amp; $b`  # 输出3</span><br><span class="line">echo `expr $c \| $d`  # 输出5</span><br><span class="line">echo `expr $a \| $b`  # 输出3</span><br></pre></td></tr></table></figure><hr><h3 id="7-read命令"><a href="#7-read命令" class="headerlink" title="(7) read命令"></a>(7) read命令</h3><p><code>read</code>命令用于<strong>从标准输入中读取单行数据</strong>。当读到文件结束符时，<strong>exit code为1</strong>，否则为0。</p><p><strong>参数说明</strong></p><ul><li><code>-p</code>: 后面可以接提示信息<br>  <code>-t</code>: 后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</li></ul><p>实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">read name  # 读入name的值</span><br><span class="line">acwing yyy  # 标准输入</span><br><span class="line">echo $name  # 输出name的值</span><br><span class="line">acwing yyy  # 标准输出 </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;Please input your name: &quot; -t 5 name  # 读入name的值，等待时间5秒</span><br><span class="line">  # -t 和 -p 的顺序不影响实际效果</span><br><span class="line">Please input your name: acwing yyy  # 标准输入</span><br><span class="line">echo $name  # 输出name的值</span><br><span class="line">acwing yyy  # 标准输出</span><br></pre></td></tr></table></figure><hr><h3 id="8-echo命令"><a href="#8-echo命令" class="headerlink" title="(8) echo命令"></a>(8) echo命令</h3><p><strong><code>echo</code> 输出变量</strong>时需要加上<code>$</code>, 输出常量时不要加<code>$</code>.</p><p><strong><code>echo</code>用于输出字符串</strong>。命令格式：<code>echo STRING</code></p><p>ps: 查看命令用法<code>help commond</code>, eg.<code>help echo</code></p><p><strong>显示普通字符串</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello AC Terminal&quot;</span><br><span class="line">echo Hello AC Terminal  # 引号可以省略</span><br></pre></td></tr></table></figure><p><strong>显示转义字符</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;\&quot;Hello AC Terminal\&quot;&quot;  # 注意只能使用双引号，如果使用单引号，则不转义</span><br><span class="line">echo \&quot;Hello AC Terminal\&quot;  # 也可以省略双引号</span><br></pre></td></tr></table></figure><p><strong>显示变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=yyy</span><br><span class="line">echo &quot;My name is $name&quot;  # 输出 My name is yyy</span><br></pre></td></tr></table></figure><p><strong>显示换行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hi\n&quot;  # -e 开启转义</span><br><span class="line">echo &quot;acwing&quot;</span><br><span class="line">输出结果：</span><br><span class="line">Hi</span><br><span class="line"></span><br><span class="line">acwing</span><br></pre></td></tr></table></figure><p><strong>显示不换行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hi \c&quot; # -e 开启转义 \c 不换行</span><br><span class="line">echo &quot;acwing&quot;</span><br><span class="line">输出结果：</span><br><span class="line">Hi acwing</span><br></pre></td></tr></table></figure><p><strong>显示结果定向至文件</strong></p><p><code>echo &quot;Hello World&quot; &gt; output.txt  # 将内容以覆盖的方式输出到output.txt中</code></p><p><strong>原样输出字符串，不进行转义或取变量(用单引号)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=acwing</span><br><span class="line">echo &#x27;$name\&quot;&#x27;</span><br><span class="line">输出结果:</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">name\&quot;</span></span><br></pre></td></tr></table></figure><p><strong>显示命令的执行结果</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo `date`</span><br><span class="line">输出结果：</span><br><span class="line"></span><br><span class="line">Wed Sep 1 11:45:33 CST 2021</span><br></pre></td></tr></table></figure><hr><h3 id="9-printf命令"><a href="#9-printf命令" class="headerlink" title="(9) printf命令"></a>(9) printf命令</h3><p><strong>printf命令用于格式化输出</strong>，类似于C/C++中的printf函数。</p><p><u>默认不会在字符串末尾添加换行符。</u></p><p><strong>命令格式：</strong></p><p><code>printf format-string [arguments...]</code></p><p><strong>用法示例</strong><br>脚本文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%10d.\n&quot; 123  # 占10位，右对齐</span><br><span class="line">printf &quot;%-10.2f.\n&quot; 123.123321  # 占10位，保留2位小数（不完全的四舍五入），左对齐</span><br><span class="line">printf &quot;My name is %s\n&quot; &quot;yyy&quot;  # 格式化输出字符串</span><br><span class="line">printf &quot;%d * %d = %d\n&quot;  2 3 `expr 2 \* 3` # 表达式的值作为参数</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   123.</span><br><span class="line">   123.12    .</span><br><span class="line">My name is yyy</span><br><span class="line">2 * 3 = 6</span><br></pre></td></tr></table></figure><hr><h3 id="10-test命令与判断符号"><a href="#10-test命令与判断符号" class="headerlink" title="(10) test命令与判断符号[]"></a>(10) test命令与判断符号[]</h3><p><strong>短路原则</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A | B</span><br><span class="line">A非0非空，直接返回A,不计算B</span><br><span class="line">A为0，返回B</span><br><span class="line"></span><br><span class="line">A &amp; B    </span><br><span class="line">A，B有0或空， 就是0</span><br><span class="line">A非0，返回A, 忽略B (短路原则)</span><br></pre></td></tr></table></figure><p><strong>逻辑运算符<code>&amp;&amp;</code>和<code>||</code></strong></p><ul><li><p><code>&amp;&amp;</code> 表示与，<code>|| </code>表示或</p></li><li><p>二者具有短路原则：</p><p>  <code>expr1 &amp;&amp; expr2</code>：当<code>expr1</code>为假时，直接忽略<code>expr2</code></p><p>  <code>expr1 || expr2</code>：当<code>expr1</code>为真时，直接忽略<code>expr2</code></p></li><li><p>表达式的<code>exit code</code><strong>为0，表示真</strong>；为非零，表示假。（与<code>C/C++</code>中的定义相反）</p></li></ul><p><strong><code>test</code>命令</strong><br>在命令行中输入<code>help test</code>，可以查看<code>test</code>命令的用法。</p><p><strong><code>test</code>命令用于判断文件类型，以及对变量做比较。</strong></p><p><strong><code>test</code>命令用<code>exit code</code>返回结果</strong>，而不是使用<code>stdout</code>。<strong>0表示真</strong>，非0表示假。</p><p><code>if</code>也是返回真的时候可以执行。<code>exit code</code>为0表示真，所以可以执行。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test 2 -lt 3  # 为真，返回值为0</span><br><span class="line">echo $?  # 输出上个命令的返回值，输出0</span><br><span class="line">ls  # 列出当前目录下的所有文件</span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line"></span><br><span class="line">test -e test.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">exist  # test.sh 文件存在</span><br><span class="line">test -e test2.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">Not exist  # testh2.sh 文件不存在</span><br></pre></td></tr></table></figure><p><strong>文件类型判断</strong></p><p>命令格式：</p><p><code>test -e filename  # 判断文件是否存在</code></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-e</td><td>文件是否存在</td></tr><tr><td>-f</td><td>是否为文件</td></tr><tr><td>-d</td><td>是否为目录</td></tr></tbody></table><p><strong>文件权限判断</strong></p><p>命令格式：</p><p><code>test -r filename  # 判断文件是否可读</code></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-r</td><td>文件是否可读</td></tr><tr><td>-w</td><td>文件是否可写</td></tr><tr><td>-x</td><td>文件是否可执行</td></tr><tr><td>-s</td><td>是否为非空文件</td></tr></tbody></table><p><strong>整数间的比较</strong></p><p>命令格式：</p><p><code>test $a -eq $b  # a是否等于b</code></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-eq</td><td>a是否等于b</td></tr><tr><td>-ne</td><td>a是否不等于b</td></tr><tr><td>-gt</td><td>a是否大于b</td></tr><tr><td>-lt</td><td>a是否小于b</td></tr><tr><td>-ge</td><td>a是否大于等于b</td></tr><tr><td>-le</td><td>a是否小于等于b</td></tr></tbody></table><p><strong>字符串比较</strong></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>test <strong>-z</strong> STRING</td><td>判断STRING<strong>是否为空</strong>，如果为空，则返回true</td></tr><tr><td>test <strong>-n</strong> STRING</td><td>判断STRING<strong>是否非空</strong>，如果非空，则返回true（-n可以省略）</td></tr><tr><td>test str1 == str2</td><td>判断str1是否<strong>等于</strong>str2</td></tr><tr><td>test str1 != str2</td><td>判断str1是否不<strong>等于</strong>str2</td></tr></tbody></table><p>​    </p><p><strong>多重条件判定</strong></p><p>命令格式：</p><p><code>test -r filename -a -x filename</code></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-a</td><td>两条件<strong>是否同时成立</strong></td></tr><tr><td>-o</td><td>两条件<strong>是否至少一个成立</strong></td></tr><tr><td>!</td><td><strong>取反</strong>。如 test ! -x file，当file不可执行时，返回true</td></tr></tbody></table><p>​<br><strong>判断符号[]</strong><br><code>[]</code>与<code>test</code>用法几乎一模一样，更常用于<code>if</code>语句中。另外<code>[[]]</code>是<code>[]</code>的加强版，支持的特性更多。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ 2 -lt 3 ]  # 为真，返回值为0</span><br><span class="line">echo $?  # 输出上个命令的返回值，输出0</span><br><span class="line"></span><br><span class="line">ls  # 列出当前目录下的所有文件</span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line">[ -e test.sh ] &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">exist  # test.sh 文件存在</span><br><span class="line">[ -e test2.sh ] &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">Not exist  # test2.sh 文件不存在</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>[]</code>内的<strong>每一项都要用空格隔开</strong></li><li>中括号内的<strong>变量，最好用双引号括起来</strong></li><li>中括号内的<strong>常数，最好用单或双引号括起来</strong></li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;acwing yyy&quot;</span><br><span class="line">[ $name == &quot;acwing yyy&quot; ]  # 错误，等价于 [ acwing yxc == &quot;acwing yyy&quot; ]，参数太多</span><br><span class="line">[ &quot;$name&quot; == &quot;acwing yyy&quot; ]  # 正确</span><br></pre></td></tr></table></figure><hr><h3 id="11-判断语句"><a href="#11-判断语句" class="headerlink" title="(11) 判断语句"></a>(11) 判断语句</h3><p><strong>if…then形式</strong><br>类似于<code>C/C++</code>中的<code>if-else</code>语句。</p><p>ps: 当条件<code>condition</code>的<code>exit code</code>退出状态为0，表示为真时才会执行<code>then</code>后边的语句</p><hr><p><strong>单层if</strong><br>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">if [ &quot;$a&quot; -lt &quot;$b&quot; ] &amp;&amp; [ &quot;$a&quot; -gt 2 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;在范围内</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>3在范围内</code></p><hr><p><strong>单层if-else</strong><br>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">else</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">if ! [ &quot;$a&quot; -lt &quot;$b&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;不小于$&#123;b&#125;</span><br><span class="line">else</span><br><span class="line">    echo $&#123;a&#125;小于$&#123;b&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>3小于4</code></p><hr><p><strong>多层if-elif-elif-else</strong><br>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">elif condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">elif condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">else</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line">if [ $a -eq 1 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于1</span><br><span class="line">elif [ $a -eq 2 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于2</span><br><span class="line">elif [ $a -eq 3 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于3</span><br><span class="line">else</span><br><span class="line">    echo 其他</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>其他</code></p><hr><p><strong>case…esac形式</strong><br>类似于<code>C/C++</code>中的<code>switch</code>语句。</p><p>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case $变量名称 in</span><br><span class="line">    值1)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;  # 类似于C/C++中的break</span><br><span class="line">    值2)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">    *)  # 类似于C/C++中的default</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line">case $a in</span><br><span class="line">    1)</span><br><span class="line">        echo $&#123;a&#125;等于1</span><br><span class="line">        ;;  </span><br><span class="line">    2)</span><br><span class="line">        echo $&#123;a&#125;等于2</span><br><span class="line">        ;;  </span><br><span class="line">    3)                                                </span><br><span class="line">        echo $&#123;a&#125;等于3</span><br><span class="line">        ;;  </span><br><span class="line">    *)</span><br><span class="line">        echo 其他</span><br><span class="line">        ;;  </span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>其他</code></p><hr><h3 id="12-循环语句"><a href="#12-循环语句" class="headerlink" title="(12) 循环语句"></a>(12) 循环语句</h3><p><strong>for…in…do…done</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for var in val1 val2 val3</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例1，输出a 2 cc，<strong>每个元素一行</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in a 2 cc</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例2，输出当前路径下的所有文件名，<strong>每个文件名一行</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for file in `ls`</span><br><span class="line">do</span><br><span class="line">    echo $file</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例3，输出1-10</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in $(seq 1 10)  # seq只支持数字遍历，可产生左闭右闭的区间的所有整数</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例4，<strong>使用{1..10} 或者 {a..z}</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;a..z&#125;</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p><strong>for ((…;…;…)) do…done</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for ((expression; condition; expression))</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，输出1-10，每个数占一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1; i&lt;=10; i++))</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p><strong>while…do…done循环</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，文件结束符为<code>ctrl+d</code>，输入文件结束符后<code>read</code>指令返回false。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while read name</span><br><span class="line">do</span><br><span class="line">    echo $name</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p><strong>until…do…done循环</strong><br><strong>当条件为真时结束。</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，当用户输入yes或者YES时结束，否则一直等待读入。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ &quot;$&#123;word&#125;&quot; == &quot;yes&quot; ] || [ &quot;$&#123;word&#125;&quot; == &quot;YES&quot; ]</span><br><span class="line">do</span><br><span class="line">    read -p &quot;Please input yes/YES to stop this program: &quot; word</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p><strong>break命令</strong><br><u>跳出当前一层循环</u>，<strong>注意与C/C++不同的是：break不能跳出case语句</strong>。</p><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">while read name</span><br><span class="line">do</span><br><span class="line">    for ((i=1;i&lt;=10;i++))</span><br><span class="line">    do</span><br><span class="line">        case $i in</span><br><span class="line">            8)</span><br><span class="line">                break</span><br><span class="line">                ;;</span><br><span class="line">            *)</span><br><span class="line">                echo $i</span><br><span class="line">                ;;</span><br><span class="line">        esac</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>该示例每读入非EOF的字符串，会输出一遍1-7。<br>该程序可以输入<code>ctrl+d</code>文件结束符来结束，也可以直接用<code>ctrl+c</code>杀掉该进程。</p><hr><p><code>continue命令</code><br>跳出当前循环。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1;i&lt;=10;i++))</span><br><span class="line">do</span><br><span class="line">    if [ `expr $i % 2` -eq 0 ]</span><br><span class="line">    then</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>该程序输出1-10中的所有奇数。</p><hr><p><strong>死循环的处理方式</strong><br>如果<code>AC Terminal</code>可以打开该程序，则输入<code>ctrl+c</code>即可。</p><p>否则可以直接关闭进程：</p><ul><li>使用<code>top</code>命令找到进程的PID（按q可以退出）,  <code>ps aux</code>可查看当前所有的进程</li><li>输入<code>kill -9 PID</code>即可关掉此进程</li></ul><hr><h3 id="13-函数"><a href="#13-函数" class="headerlink" title="(13) 函数"></a>(13) 函数</h3><p><code>bash</code>中的函数类似于<code>C/C++</code>中的函数，但return的返回值与C/C++不同，<strong>返回的是exit code，取值为0-255</strong>，<strong>0表示正常结束。</strong></p><p>如果想获取函数的输出结果，可以通过<code>echo</code>输出到<code>stdout</code>中，然后通过<code>$(function_name)</code>来获取<code>stdout</code>中的结果。</p><p><strong>函数的<code>return值</code>可以通过<code>$?</code>来获取。</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[function] func_name() &#123;  # function关键字可以省略</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>不获取 return值和 stdout值</strong><br>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;</span><br><span class="line">    name=yyy</span><br><span class="line">    echo &quot;Hello $name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>Hello yyy</code></p><hr><p><strong>获取 return值和stdout值</strong><br>不写<code>return</code>时，默认<code>return 0</code>。</p><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;</span><br><span class="line">    name=yyy</span><br><span class="line">    echo &quot;Hello $name&quot;</span><br><span class="line"></span><br><span class="line">    return 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output=$(func)</span><br><span class="line">ret=$?</span><br><span class="line"></span><br><span class="line">echo &quot;output = $output&quot;</span><br><span class="line">echo &quot;return = $ret&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>output = Hello yyy</code><br><code>return = 123</code></p><hr><p><strong>函数的输入参数</strong><br>在函数内，<code>$1</code>表示第一个输入参数，<code>$2</code>表示第二个输入参数，依此类推。</p><p>注意：<strong>函数内的<code>$0</code>仍然是文件名</strong>，而不是函数名。</p><p>ps: <code>$()</code>会读取函数的<code>stdout</code>，而不会直接输出来，导致屏幕上没输出</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;  # 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span><br><span class="line">    word=&quot;&quot;</span><br><span class="line">    while [ &quot;$&#123;word&#125;&quot; != &#x27;y&#x27; ] &amp;&amp; [ &quot;$&#123;word&#125;&quot; != &#x27;n&#x27; ]</span><br><span class="line">    do</span><br><span class="line">        read -p &quot;要进入func($1)函数吗？请输入y/n：&quot; word</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    if [ &quot;$word&quot; == &#x27;n&#x27; ]</span><br><span class="line">    then</span><br><span class="line">        echo 0</span><br><span class="line">        return 0</span><br><span class="line">    fi  </span><br><span class="line">    </span><br><span class="line">    if [ $1 -le 0 ] </span><br><span class="line">    then</span><br><span class="line">        echo 0</span><br><span class="line">        return 0</span><br><span class="line">    fi  </span><br><span class="line">    </span><br><span class="line">    sum=$(func $(expr $1 - 1))</span><br><span class="line">    echo $(expr $sum + $1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo $(func 10)</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>55</code></p><hr><p><strong>函数内的局部变量</strong><br>可以在函数内定义局部变量，作用范围仅在当前函数内。</p><p>可以在递归函数中定义局部变量。</p><p>命令格式：</p><p><code>local 变量名=变量值</code><br>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">func() &#123;</span><br><span class="line">    local name=yyy</span><br><span class="line">    echo $name</span><br><span class="line">&#125;</span><br><span class="line">func</span><br><span class="line"></span><br><span class="line">echo $name</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>yyy</code></p><p>第一行为函数内的name变量，<strong>第二行为函数外调用name变量</strong>，会发现此时该变量不存在。</p><hr><h3 id="14-exit命令"><a href="#14-exit命令" class="headerlink" title="(14) exit命令"></a>(14) exit命令</h3><p><strong>使用exit会结束整个shell脚本</strong></p><p><code>exit</code>命令用来退出当前<code>shell</code>进程，并返回一个退出状态；使用<code>$?</code>可以接收这个退出状态。</p><p><code>exit</code>命令可以接受一个整数值作为参数，代表退出状态。<strong>如果不指定，默认状态值是 0</strong>。</p><p><code>exit</code>退出状态只能是一个介于 <strong>0~255 之间的整数</strong>，其中<strong>只有 0 表示成功</strong>，其它值都表示失败。</p><p>示例：</p><p>创建脚本<code>test.sh</code>，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $# -ne 1 ]  # 如果传入参数个数等于1，则正常退出；否则非正常退出。</span><br><span class="line">then</span><br><span class="line">    echo &quot;arguments not valid&quot;</span><br><span class="line">    exit 1</span><br><span class="line">else</span><br><span class="line">    echo &quot;arguments valid&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行该脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh </span><br><span class="line">./test.sh acwing</span><br><span class="line">arguments valid</span><br><span class="line"></span><br><span class="line">echo $?  # 传入一个参数，则正常退出，exit code为0</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">./test.sh </span><br><span class="line">arguments not valid</span><br><span class="line">echo $?  # 传入参数个数不是1，则非正常退出，exit code为1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><hr><h3 id="15-文件重定向"><a href="#15-文件重定向" class="headerlink" title="(15) 文件重定向"></a>(15) 文件重定向</h3><p>每个进程默认打开3个文件描述符：</p><ul><li><p><code>stdin</code>标准输入，从命令行读取数据，文件描述符为0</p></li><li><p><code>stdout</code>标准输出，向命令行输出数据，文件描述符为1</p></li><li><p><code>stderr</code>标准错误输出，向命令行输出数据，文件描述符为2</p></li></ul><p>可以用文件重定向将这三个文件重定向到其他文件中。</p><hr><p><strong>重定向命令列表</strong></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>command &gt; file</code></td><td>将<code>stdout</code>重定向到<code>file</code>中</td></tr><tr><td><code>command &lt; file</code></td><td>将<code>stdin</code>重定向到<code>file</code>中</td></tr><tr><td><code>command &gt;&gt; file</code></td><td>将<code>stdout</code>以<strong>追加方式</strong>重定向到<code>file</code>中</td></tr><tr><td><code>command n&gt; file</code></td><td>将文件描述符<code>n</code>重定向到<code>file</code>中</td></tr><tr><td><code>command n&gt;&gt; file</code></td><td>将文件描述符<code>n</code>以追加方式重定向到<code>file</code>中</td></tr></tbody></table><hr><p><strong>输入和输出重定向</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hello \c&quot; &gt; output.txt  # 将stdout重定向到output.txt中</span><br><span class="line">echo &quot;World&quot; &gt;&gt; output.txt  # 将字符串追加到output.txt中</span><br><span class="line"></span><br><span class="line">read str &lt; output.txt  # 从output.txt中读取字符串</span><br><span class="line"></span><br><span class="line">echo $str  # 输出结果：Hello World</span><br></pre></td></tr></table></figure><hr><p><strong>同时重定向stdin和stdout</strong><br>创建bash脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line"></span><br><span class="line">read a</span><br><span class="line">read b</span><br><span class="line"></span><br><span class="line">echo $(expr &quot;$a&quot; + &quot;$b&quot;)</span><br></pre></td></tr></table></figure><p>创建input.txt，里面的内容为：</p><p>3<br>4</p><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh  # 添加可执行权限</span><br><span class="line">./test.sh &lt; input.txt &gt; output.txt  # 从input.txt中读取内容，将输出写入output.txt中</span><br><span class="line">cat output.txt  # 查看output.txt中的内容</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p>ps: (补充内容)<br>1.<code>ls -l &gt;文件 </code>（列表的内容写入文件a.txt中 覆盖写）</p><p>2.<code>ls -al &gt;&gt;文件</code> （列表的内容文件追加到文件aa.txt的末尾）</p><p>3.<code>cat 文件1 &gt;文件2</code> （将文件1的内容覆盖到文件2）</p><p>4.<code>echo “内容” &gt;&gt;文件</code> (将echo的内容追加到文件末尾)</p><hr><h3 id="16-引入外部脚本"><a href="#16-引入外部脚本" class="headerlink" title="(16) 引入外部脚本"></a>(16) 引入外部脚本</h3><p>类似于<code>C/C++</code>中的<code>include</code>操作，**<code>bash</code>也可以引入其他文件中的代码**。</p><p>语法格式：</p><p><code>. filename </code>  注意点和文件名之间有一个空格</p><p><code>source filename</code>  这里<strong>会将filename执行一遍</strong></p><p>示例<br>创建<code>test1.sh</code>，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">name=yyy  # 定义变量name</span><br></pre></td></tr></table></figure><p>然后创建test2.sh，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">source test1.sh # 或 . test1.sh</span><br><span class="line"></span><br><span class="line">echo My name is: $name  # 可以使用test1.sh中的变量</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test2.sh </span><br><span class="line">./test2.sh </span><br><span class="line">My name is: yyy</span><br></pre></td></tr></table></figure><p>ps:</p><p><code>ll</code>等价于<code>ls -a</code>查看隐藏文件</p><hr><h2 id="2-创建作业-amp-测试作业的正确性"><a href="#2-创建作业-amp-测试作业的正确性" class="headerlink" title="2.创建作业 &amp; 测试作业的正确性"></a>2.创建作业 &amp; 测试作业的正确性</h2><pre><code>homework 3 create 可以重新创建所有lesson_3的作业homework 3 create id 可以单独创建lesson_3的第id个作业.e.g.homework 3 create 0 可以只重新创建lesson_3的第0个作业homework 3 test 可以评测lesson_3的所有作业</code></pre><hr><h2 id="3-章节作业"><a href="#3-章节作业" class="headerlink" title="3.章节作业"></a>3.章节作业</h2><p>创建好作业后，先进入文件夹<code>/home/acs/homework/lesson_3/</code>，然后：</p><h3 id="homework-0"><a href="#homework-0" class="headerlink" title="homework_0:"></a>homework_0:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(0) 进入homework_0文件夹，编写自动完成lesson_1作业的脚本helper.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含helper.sh</span><br><span class="line">    [2] helper.sh具有可执行权限</span><br><span class="line">    [3] 在任意路径依次执行下列命令后，lesson_1的作业可以得到满分：</span><br><span class="line">        1) homework 1 create</span><br><span class="line">        2) /home/acs/homework/lesson_3/homework_0/helper.sh</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-0"><a href="#作业笔记：homework-0" class="headerlink" title="作业笔记：homework_0"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6296012/">homework_0</a></h4><hr><h3 id="homework-1"><a href="#homework-1" class="headerlink" title="homework_1:"></a>homework_1:</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(1) 进入homework_1文件夹，编写脚本check_file.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含check_file.sh。</span><br><span class="line">    [2] check_file.sh具有可执行权限。</span><br><span class="line">    [3] check_file.sh接收一个传入参数。格式为 ./check_file.sh file</span><br><span class="line">    [4] 判断传递参数，分别在标准输出中输出如下内容（不包括双引号）：</span><br><span class="line">    1) 如果传入参数个数不是1，则输出一行：&quot;arguments not valid&quot;，然后退出，退出状态等于1。</span><br><span class="line">    2) 如果file文件不存在，则输出一行：&quot;not exist&quot;，然后退出，退出状态等于2。</span><br><span class="line">    3) 如果file文件存在，则输出分别进行如下5个判断，然后退出，退出状态等于0。</span><br><span class="line">        1] 如果file为普通文件，则输出一行：&quot;regular file&quot;</span><br><span class="line">        2] 如果file为目录（文件夹），则输出一行：&quot;directory&quot;</span><br><span class="line">        3] 如果file具有可读权限，则输出一行：&quot;readable&quot;</span><br><span class="line">        4] 如果file具有可写权限，则输出一行：&quot;writable&quot;</span><br><span class="line">        5] 如果file具有可执行权限，则输出一行：&quot;executable&quot;</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-1"><a href="#作业笔记：homework-1" class="headerlink" title="作业笔记：homework_1"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6310307/">homework_1</a></h4><hr><h3 id="homework-2"><a href="#homework-2" class="headerlink" title="homework_2:"></a>homework_2:</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(2) 进入homework_2文件夹，编写脚本main.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含main.sh</span><br><span class="line">    [2] main.sh具有可执行权限</span><br><span class="line">    [3] 该文件从stdin(标准输入)中读取一个整数n</span><br><span class="line">    [4] 在stdout(标准输出)输出斐波那契数列的第n项。即：a[0] = 1, a[1] = 1, a[i] = a[i - 1] + a[i - 2], 求a[n]。</span><br><span class="line">    [5] 数据保证 0 &lt;= n &lt;= 20，脚本不需要判断n的合法性。</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-2"><a href="#作业笔记：homework-2" class="headerlink" title="作业笔记：homework_2"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6310364/">homework_2</a></h4><hr><h3 id="homework-3"><a href="#homework-3" class="headerlink" title="homework_3:"></a>homework_3:</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(3) 进入homework_3文件夹，编写脚本main.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含main.sh</span><br><span class="line">    [2] main.sh具有可执行权限</span><br><span class="line">    [3] 该文件从stdin(标准输入)中读取两行整数n和m</span><br><span class="line">    [4] 在stdout(标准输出)中输出1~n的按字典序从小到大的顺序数第m个全排列，输出一行，用空格隔开所有数，行末可以有多余空格。</span><br><span class="line">    [5] 数据保证 1 &lt;= n &lt;= 10, 1 &lt;= m &lt;= min(100, n!)，脚本不需要判断数据的合法性。</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-3"><a href="#作业笔记：homework-3" class="headerlink" title="作业笔记：homework_3"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6310370/">homework_3</a></h4><hr><h3 id="homework-4"><a href="#homework-4" class="headerlink" title="homework_4:"></a>homework_4:</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(4) 进入homework_4文件夹，编写脚本main.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含main.sh</span><br><span class="line">    [2] main.sh具有可执行权限</span><br><span class="line">    [3] main.sh接收两个传入参数。格式为 ./main.sh input_file output_file</span><br><span class="line">    [4] 从input_file中读取一个正整数n，然后将前n个正整数的平方和写入output_file中</span><br><span class="line">    [5] 数据保证 1 &lt;= n &lt;= 100，脚本不需要判断所有数据的合法性。</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-4"><a href="#作业笔记：homework-4" class="headerlink" title="作业笔记：homework_4"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6310385/">homework_4</a></h4><hr><h2 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4.参考资料"></a>4.参考资料</h2><p>讲义整理自Linux基础课讲义，及评论区的问答整理</p><p><a href="https://www.acwing.com/activity/content/57/">Linux基础课程-AcWing</a></p><p><a href="https://www.acwing.com/activity/content/57/">https://www.acwing.com/activity/content/57/</a>)</p><p>章节作业打卡笔记：</p><p><a href="https://www.acwing.com/activity/content/code/content/6296012/">homework_0</a>    <a href="https://www.acwing.com/activity/content/code/content/6310307/">homework_1</a>    <a href="https://www.acwing.com/activity/content/code/content/6310364/">homework_2</a><br><a href="https://www.acwing.com/activity/content/code/content/6310370/">homework_3</a>    <a href="https://www.acwing.com/activity/content/code/content/6310385/">homework_4</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux基础-第三讲-shell语法&quot;&gt;&lt;a href=&quot;#Linux基础-第三讲-shell语法&quot; class=&quot;headerlink&quot; title=&quot;Linux基础 第三讲 shell语法&quot;&gt;&lt;/a&gt;Linux基础 第三讲 shell语法&lt;/h2&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="Linux基础知识" scheme="https://ariesfun.gitee.io/categories/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Linux" scheme="https://ariesfun.gitee.io/tags/Linux/"/>
    
    <category term="shell语法" scheme="https://ariesfun.gitee.io/tags/shell%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>AcWing-周赛 第97场题解</title>
    <link href="https://ariesfun.gitee.io/posts/420.html"/>
    <id>https://ariesfun.gitee.io/posts/420.html</id>
    <published>2023-04-02T18:38:55.951Z</published>
    <updated>2023-04-02T18:39:22.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AcWing-周赛-第97场题解"><a href="#AcWing-周赛-第97场题解" class="headerlink" title="AcWing-周赛 第97场题解"></a>AcWing-周赛 第97场题解</h2><h3 id="T1-AcWing-4944-热身计算"><a href="#T1-AcWing-4944-热身计算" class="headerlink" title="T1: AcWing 4944. 热身计算"></a>T1: AcWing 4944. 热身计算</h3><p>给定两个正整数 a, b，请你分别计算 min(a,b) 以及 ⌊|a−b|/2⌋的值。⌊|a−b|/2⌋表示不大于 |a−b|/2的最大整数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含两个正整数 a,b。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，输出两个整数，分别表示 min(a,b)以及 ⌊|a−b|/2⌋。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>所有测试点满足 1 ≤ a, b ≤ 100。</p><h4 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h4><p>3  1</p><h4 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h4><p>1  1</p><h4 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h4><p>2  3</p><h4 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h4><p>2  0</p><h4 id="输入样例3"><a href="#输入样例3" class="headerlink" title="输入样例3"></a>输入样例3</h4><p>7  3</p><h4 id="输出样例3："><a href="#输出样例3：" class="headerlink" title="输出样例3："></a>输出样例3：</h4><p>3  2</p><hr><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">min</span>(a, b) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="built_in">abs</span>(a - b) / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="T2-AcWing-4945-比大小"><a href="#T2-AcWing-4945-比大小" class="headerlink" title="T2: AcWing 4945. 比大小"></a>T2: AcWing 4945. 比大小</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个 n 位 bx 进制数 X 和一个 m位 by进制数 Y。</p><p>X 和 Y 都为正整数，且都不含前导 0。</p><p>请你比较它们的大小。</p><h4 id="输入格式。"><a href="#输入格式。" class="headerlink" title="输入格式。"></a>输入格式。</h4><p>第一行包含两个整数 n, bx。</p><p>第二行包含 n 个整数 x1,x2,…,x，表示 X的各位数字，它们按照从最高有效位到最低有效位的顺序给出。</p><p>第三行包含两个整数 m,by。</p><p>第四行包含 m 个整数 y1,y2,…,y，表示 Y 的各位数字，它们按照从最高有效位到最低有效位的顺序给出。</p><p>X 和 Y 的各位数字在输入中均按十进制表示给出。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行：</p><ul><li><p>如果 X &lt; Y，则输出 <code>&lt;</code>。</p></li><li><p>如果 X &gt; Y，则输出 <code>&gt;</code>。</p></li><li><p>如果 X = Y，则输出 <code>=</code>。</p></li></ul><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 6 个测试点满足 2 ≤ bx, by ≤ 16。<br>所有测试点满足 1 ≤ n, m ≤ 1，2 ≤ bx, by ≤ 40，bx ≠ by，0 ≤ xi &lt; bx，0 ≤ yi&lt; by。</p><h4 id="输入样例1-1"><a href="#输入样例1-1" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">1 0 1 1 1 1</span><br><span class="line">2 10</span><br><span class="line">4 7</span><br></pre></td></tr></table></figure><h4 id="输出样例1-1"><a href="#输出样例1-1" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=</span><br></pre></td></tr></table></figure><h4 id="输入样例2-1"><a href="#输入样例2-1" class="headerlink" title="输入样例2"></a>输入样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 0 2</span><br><span class="line">2 5</span><br><span class="line">2 4</span><br></pre></td></tr></table></figure><h4 id="输出样例2-1"><a href="#输出样例2-1" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;</span><br></pre></td></tr></table></figure><h4 id="输入样例3-1"><a href="#输入样例3-1" class="headerlink" title="输入样例3"></a>输入样例3</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7 16</span><br><span class="line">15 15 4 0 0 7 10</span><br><span class="line">7 9</span><br><span class="line">4 8 0 3 1 5 0</span><br></pre></td></tr></table></figure><h4 id="输出样例3"><a href="#输出样例3" class="headerlink" title="输出样例3"></a>输出样例3</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p><strong>直接模拟，快速幂计算</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, bx, x, m, by, y;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; bx;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> X = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n --)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x; <span class="comment">// 共循读n次（n-1 ~ 0）</span></span><br><span class="line">        X += <span class="built_in">pow</span>(bx, n) * x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; m &gt;&gt; by;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> Y = <span class="number">0</span>; <span class="comment">// 最大到40^9级别（会爆int）</span></span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; y;</span><br><span class="line">        Y += <span class="built_in">pow</span>(by, m) * y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(X &lt; Y) <span class="built_in">puts</span>(<span class="string">&quot;&lt;&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; Y) <span class="built_in">puts</span>(<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>秦九韶算法，数学公式推导</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long LL;</span><br><span class="line"></span><br><span class="line">LL get()</span><br><span class="line">&#123;</span><br><span class="line">    int n, b;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; b;</span><br><span class="line">    LL res = 0;</span><br><span class="line">    while(n --) // n最大是10位</span><br><span class="line">    &#123;</span><br><span class="line">        int x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        res = res * b + x; // 秦九韶算法，数学公式推导</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    LL x = get();</span><br><span class="line">    LL y = get();</span><br><span class="line"></span><br><span class="line">    if(x &gt; y) puts(&quot;&gt;&quot;);</span><br><span class="line">    else if(x &lt; y) puts(&quot;&lt;&quot;);</span><br><span class="line">    else puts(&quot;=&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="T3-AcWing-4946-叶子节点"><a href="#T3-AcWing-4946-叶子节点" class="headerlink" title="T3: AcWing 4946. 叶子节点"></a>T3: AcWing 4946. 叶子节点</h3><p>给定一棵 n 个节点的树，节点编号 1 ∼ n。</p><p>1号节点为树的根节点。</p><p>每个节点要么是黑色的，要么是白色的。</p><p>对于一个叶子节点，如果从该节点到根节点的路径（包括两端节点）中有超过 m 个</p><p>黑色节点连续的排列在一起，则称该节点为无效叶子节点。</p><p>有效叶子节点数量 = 总叶子节点数量 - 无效叶子节点数量</p><p>请你统计，给定树中有效叶子节点的数量。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n, m。</p><p>第二行包含 n 个整数 a1, a2, …, an，其中 ai表示第 i 个节点的颜色，1 表示黑色，0 表示白色。</p><p>接下来 n−1 行，每行包含两个整数 x, y，表示节点 x 和节点 y 之间存在一条无向边。</p><p>保证输入给定的是一棵树。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，表示给定树中<strong>有效</strong>叶子节点的数量。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 66 个测试点满足 2 ≤ n ≤ 10。<br>所有测试点满足 2 ≤ n ≤ 10e5，1 ≤ m ≤ n，0 ≤ ai ≤ 1，1 ≤ x, y ≤ n，x ≠ y。</p><h4 id="输入样例1-2"><a href="#输入样例1-2" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 1</span><br><span class="line">1 1 0 0</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure><h4 id="输出样例1-2"><a href="#输出样例1-2" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="输入样例2-2"><a href="#输入样例2-2" class="headerlink" title="输入样例2"></a>输入样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7 1</span><br><span class="line">1 0 1 1 0 0 0</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">2 5</span><br><span class="line">3 6</span><br><span class="line">3 7</span><br></pre></td></tr></table></figure><h4 id="输出样例2-2"><a href="#输出样例2-2" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><hr><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">2</span> * N; <span class="comment">// 无向边，需存两次 10万范围O(N)或O（nlogn）</span></span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx; <span class="comment">// 定义邻接表</span></span><br><span class="line"><span class="type">int</span> c[N]; <span class="comment">// 存结点颜色</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">// 加边，头插法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa, <span class="type">int</span> cnt, <span class="type">bool</span> vaild)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c[u]) cnt ++;</span><br><span class="line">    <span class="keyword">else</span> cnt = <span class="number">0</span>; <span class="comment">// 不连续就清零</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt &gt; m) vaild = <span class="literal">false</span>; <span class="comment">// 无效叶子结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, sons = <span class="number">0</span>; <span class="comment">// 存子节点数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i]) <span class="comment">// 树的遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == fa) <span class="keyword">continue</span>; <span class="comment">// j是父结点，继续遍历</span></span><br><span class="line">        <span class="keyword">else</span> sons ++; <span class="comment">// 是子结点</span></span><br><span class="line">        <span class="comment">// j是当前结点, u是父结点</span></span><br><span class="line">        res += <span class="built_in">dfs</span>(j, u, cnt, vaild); <span class="comment">// 递归下一个节点，加上子树中满足有效子节点数量 </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!sons &amp;&amp; vaild) res ++; <span class="comment">// 若sons为0则代表没有子节点，即叶子节点</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]); <span class="comment">// 颜色数组c[]下标1开始读</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h); <span class="comment">// 初始化头结点,加&lt;cstring&gt;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a, b), <span class="built_in">add</span>(b, a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化dfs, 第4个参数表示该叶子结点是有效的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="literal">true</span>)); <span class="comment">// 树的深度优先遍历</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.acwing.com/video/4679/">题目讲解 - y总</a></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/8883176/">单链表题目</a></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/8854336/">类似题型 - 树的重心（树与图的深度优先遍历DFS）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;AcWing-周赛-第97场题解&quot;&gt;&lt;a href=&quot;#AcWing-周赛-第97场题解&quot; class=&quot;headerlink&quot; title=&quot;AcWing-周赛 第97场题解&quot;&gt;&lt;/a&gt;AcWing-周赛 第97场题解&lt;/h2&gt;&lt;h3 id=&quot;T1-AcWing</summary>
      
    
    
    
    <category term="AcWing周赛" scheme="https://ariesfun.gitee.io/categories/AcWing%E5%91%A8%E8%B5%9B/"/>
    
    
    <category term="C/C++" scheme="https://ariesfun.gitee.io/tags/C-C/"/>
    
    <category term="AcWing" scheme="https://ariesfun.gitee.io/tags/AcWing/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 实践基础练习四（Pandas）</title>
    <link href="https://ariesfun.gitee.io/posts/341a.html"/>
    <id>https://ariesfun.gitee.io/posts/341a.html</id>
    <published>2023-04-01T12:08:48.513Z</published>
    <updated>2023-04-30T04:47:51.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习四-（Pandas）"><a href="#数据分析与可视化-实践基础练习四-（Pandas）" class="headerlink" title="数据分析与可视化 实践基础练习四 （Pandas）"></a>数据分析与可视化 实践基础练习四 （Pandas）</h2><hr><h3 id="一、本节需掌握的Pandas相关函数或属性"><a href="#一、本节需掌握的Pandas相关函数或属性" class="headerlink" title="一、本节需掌握的Pandas相关函数或属性"></a>一、本节需掌握的Pandas相关函数或属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Series和DataFrame数据类型的创建</span><br><span class="line"></span><br><span class="line"><span class="comment"># Series创建（可以是列表，标量值，字典，ndarray，其他函数），index是行索引</span></span><br><span class="line">pd.Series(data=<span class="literal">None</span>, index=<span class="literal">None</span>, dtype=<span class="literal">None</span>, name=<span class="literal">None</span>, copy=<span class="literal">False</span>, fastpath)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DataFrame创建（有行索引和列索引，其类型可以是列表，字典，元组或Series，n维的ndarray）</span></span><br><span class="line">eg. pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> Series的基本操作（类似ndarray，字典类型的操作）</span><br><span class="line">可通过自定义索引列表来切片，自定义索引访问，get()方法</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> DataFrame数据查找、增加、删除和修改</span><br><span class="line"></span><br><span class="line">d[ [<span class="string">&#x27;col_1&#x27;</span>,<span class="string">&#x27;col_2&#x27;</span>] ] <span class="comment"># 通过列索引或以属性的方式可单独或取DataFrame的列数据 </span></span><br><span class="line">d[<span class="number">0</span>:<span class="number">2</span>] <span class="comment"># 切片方式，取0到1行</span></span><br><span class="line"></span><br><span class="line">head(),tail() <span class="comment"># 获取连续的数据</span></span><br><span class="line">loc(),iloc() <span class="comment"># 一个是跟行/列索引名（或是条件查询）loc的切片方式是闭区间，一个是跟行/列索引下标</span></span><br><span class="line"></span><br><span class="line">append() <span class="comment"># 增加一行数据</span></span><br><span class="line">insert() <span class="comment"># 可插入新的一列数据</span></span><br><span class="line"></span><br><span class="line">drop() <span class="comment">#删除， ！！！稍微特殊：axis为1是按列删，0是按行删</span></span><br><span class="line">set_index() <span class="comment">#更换索引</span></span><br><span class="line"></span><br><span class="line">直接修改是对DataFrame数据修改</span><br><span class="line">replace() <span class="comment"># 对数据进行替换,以字典形式</span></span><br><span class="line">rename() <span class="comment"># 修改列名，需传入需要修改列名的字典</span></span><br><span class="line">eg. d.rename(colmus=&#123;<span class="string">&#x27;城市&#x27;</span>:<span class="string">&#x27;city&#x27;</span>&#125;),inplace=<span class="literal">True</span>) <span class="comment"># 将右值赋给左值，加上布尔值是否要替换</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> DataFrame索引重建reindex( )  </span><br><span class="line">.reindex(index=<span class="literal">None</span>, columns=<span class="literal">None</span>, fill_value...) <span class="comment">#可进行新的自定义索引，填充指定值</span></span><br></pre></td></tr></table></figure><hr><h3 id="二、实训案例"><a href="#二、实训案例" class="headerlink" title="二、实训案例"></a>二、实训案例</h3><h4 id="1-Pokemon宠物小精灵数据初步探索。"><a href="#1-Pokemon宠物小精灵数据初步探索。" class="headerlink" title="1. Pokemon宠物小精灵数据初步探索。"></a>1. Pokemon宠物小精灵数据初步探索。</h4><p><a href="https://pan.baidu.com/s/1T6mHGFvxg6W7RRX3JMq-Mg?pwd=2023">Pokemon数据集下载</a></p><p>案例中使用宠物小精灵的相关数据进行分析，其中各列的列名意义为：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011253221.jpg" alt="img-202304011253221"></p><p>·    name：宠物小精灵的名称</p><p>·    Type 1：宠物小精灵的第一类型    Type 2：宠物小精灵的第二类型</p><p>·    Total：综合能力（生命点数、攻击强度、防御强度、特殊攻击强度、特殊防御强度和速度的总和）</p><p>·    HP：生命点数</p><p>·    Attack：攻击强度          Defense：防御强度</p><p>·    Sp.Atk：特殊攻击强度        Sp.Def：特殊防御强度</p><p>·    Speed：速度            Generation：世代数</p><p>·    Lengendary：True表示为传奇小精灵，False表示非传奇小精灵</p><hr><h4 id="2-结合数据集完成以下相关操作。"><a href="#2-结合数据集完成以下相关操作。" class="headerlink" title="2. 结合数据集完成以下相关操作。"></a>2. 结合数据集完成以下相关操作。</h4><p>（1）读取Pokemon.csv文件；</p><p>（2）展示数据前10行；</p><p>（3）删除名为“#”的列；</p><p>（4）将各列名改为中文, 参数inplace设置替换原数据；</p><p>（5）分别查看数据表的行、列索引；</p><p>（6）查看第一类型的唯一值；</p><p>（7）查看行标签为2、4小精灵的名称和综合能力；</p><p>（8）查看行标签为5到10小精灵的名称和综合能力；</p><p>（9）通过切片方式查看前6个小精灵的数据；</p><p>（10）查看攻击强度大于160的小精灵的所有数据；</p><p>（11）查看传奇小精灵的数据，只展示前十行数据；</p><p>（12）创建新列“能力600”，插入到综合能力一列的后面，该列显示综合能力大于等于600的为True，小于600为False；</p><p>（13）创建新列“世代456”，插入到最后一列，该列显示世代数为4、5和6的小精灵为True, 其他为False，随机选取10行数据进行展示。</p><hr><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （1）读取Pokemon.csv文件；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">d = pd.read_csv(<span class="string">&#x27;Pokemon.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>) <span class="comment"># 读取文件</span></span><br><span class="line">d.head() <span class="comment"># 默认输出前5行数据</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011925325.jpg" alt="001"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （2）展示数据前10行；</span></span><br><span class="line"></span><br><span class="line">d.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011925442.jpg" alt="002"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （3）删除名为“#”的列；</span></span><br><span class="line"></span><br><span class="line">d.drop(<span class="string">&#x27;#&#x27;</span>, axis = <span class="number">1</span>, inplace = <span class="literal">True</span>) <span class="comment"># 确认替换原数据</span></span><br><span class="line">d.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011925979.jpg" alt="003"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （4）将各列名改为中文, 参数inplace设置替换原数据；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入字典类型值</span></span><br><span class="line">d.rename(columns=&#123;<span class="string">&#x27;Name&#x27;</span>:<span class="string">&#x27;名称&#x27;</span>, <span class="string">&#x27;Type 1&#x27;</span>:<span class="string">&#x27;第一类型&#x27;</span>, <span class="string">&#x27;Type 2&#x27;</span>:<span class="string">&#x27;第一类型&#x27;</span>, <span class="string">&#x27;Total&#x27;</span>:<span class="string">&#x27;综合能力&#x27;</span>, <span class="string">&#x27;HP&#x27;</span>:<span class="string">&#x27;生命点数&#x27;</span>, <span class="string">&#x27;Attack&#x27;</span>:<span class="string">&#x27;攻击强度&#x27;</span>, <span class="string">&#x27;Defense&#x27;</span>:<span class="string">&#x27;防御强度&#x27;</span>, <span class="string">&#x27;Sp.Atk&#x27;</span>:<span class="string">&#x27;特殊攻击强度&#x27;</span>, <span class="string">&#x27;Sp.Def&#x27;</span>:<span class="string">&#x27;特殊攻击强度&#x27;</span>, <span class="string">&#x27;Speed&#x27;</span>:<span class="string">&#x27;速度&#x27;</span>, <span class="string">&#x27;Generation&#x27;</span>:<span class="string">&#x27;世代数&#x27;</span>, <span class="string">&#x27;Legendary&#x27;</span>:<span class="string">&#x27;传奇小精灵&#x27;</span>, &#125;, inplace = <span class="literal">True</span>)</span><br><span class="line">d.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011926259.jpg" alt="004"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （5）分别查看数据表的行、列索引；</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(d.index) <span class="comment"># 共800行</span></span><br><span class="line"><span class="built_in">list</span>(d.columns) <span class="comment"># 输出列索引</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;名称&#x27;,</span><br><span class="line">    &#x27;第一类型&#x27;,</span><br><span class="line">    &#x27;第一类型&#x27;,</span><br><span class="line">    &#x27;综合能力&#x27;,</span><br><span class="line">    &#x27;生命点数&#x27;,</span><br><span class="line">    &#x27;攻击强度&#x27;,</span><br><span class="line">    &#x27;防御强度&#x27;,</span><br><span class="line">    &#x27;Sp. Atk&#x27;,</span><br><span class="line">    &#x27;Sp. Def&#x27;,</span><br><span class="line">    &#x27;速度&#x27;,</span><br><span class="line">    &#x27;世代数&#x27;,</span><br><span class="line">    &#x27;传奇小精灵&#x27;]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （6）查看第一类型的唯一值；</span></span><br><span class="line"></span><br><span class="line">d[<span class="string">&#x27;第一类型&#x27;</span>].nunique() </span><br><span class="line"><span class="comment"># nunique统计去重后元素的个数（过滤掉nan，但会统计空字符串）</span></span><br><span class="line"><span class="comment"># unique统计去重后所有元素（包含nan以及空字符串）</span></span><br><span class="line"><span class="comment"># value_counts()是Series拥有的方法，一般在DataFrame中使用时，需要指定对哪一列或行</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一类型    18</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （7）查看行标签为2、4小精灵的名称和综合能力；</span></span><br><span class="line"></span><br><span class="line">d.loc[ [<span class="number">2</span>, <span class="number">4</span>], [<span class="string">&#x27;名称&#x27;</span>, <span class="string">&#x27;综合能力&#x27;</span>] ]</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011927577.jpg" alt="007" style="zoom: 67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （8）查看行标签为5到10小精灵的名称和综合能力；</span></span><br><span class="line"></span><br><span class="line">d.iloc[ <span class="number">5</span>:<span class="number">11</span>, [<span class="number">0</span>, <span class="number">3</span>] ] <span class="comment"># 名称和综合能力分别在第0列和第3列</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011927045.jpg" alt="008" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （9）通过切片方式查看前6个小精灵的数据；</span></span><br><span class="line"></span><br><span class="line">d.loc[<span class="number">0</span>:<span class="number">5</span>] <span class="comment"># 索引值是闭区间</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011928939.jpg" alt="009"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （10）查看攻击强度大于160的小精灵的所有数据；</span></span><br><span class="line"></span><br><span class="line">d.loc[d[<span class="string">&#x27;攻击强度&#x27;</span>] &gt; <span class="number">160</span>] <span class="comment"># 条件查询，返回结果为True的那些行</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011928156.jpg" alt="010"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  （11）查看传奇小精灵的数据，只展示前十行数据；</span></span><br><span class="line"></span><br><span class="line">d1 = d.loc[d[<span class="string">&#x27;传奇小精灵&#x27;</span>] == <span class="literal">True</span>]</span><br><span class="line">d1.head(<span class="number">10</span>) <span class="comment"># 或者 d[d[&#x27;传奇小精灵&#x27;] == True].head(10)</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011929780.jpg" alt="011"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （12）创建新列“能力600”，插入到综合能力一列的后面，该列显示综合能力大于等于600的为True，小于600为False；</span></span><br><span class="line"></span><br><span class="line">col_new = <span class="string">&#x27;能力600&#x27;</span></span><br><span class="line">d.insert(<span class="number">4</span>, col_new, d[<span class="string">&#x27;综合能力&#x27;</span>] &gt; <span class="number">600</span>) <span class="comment"># insert()用于插入列（参数跟插入列后的位置，列索引名，插入的值）</span></span><br><span class="line">d</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011932776.jpg" alt="012"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （13）创建新列“世代456”，插入到最后一列，该列显示世代数为4、5和6的小精灵为True, 其他为False，随机选取10行数据进行展示。</span></span><br><span class="line"></span><br><span class="line">col_new1 = <span class="string">&#x27;世代456&#x27;</span></span><br><span class="line">d.insert(<span class="number">13</span>, col_new1, d[<span class="string">&#x27;世代数&#x27;</span>].isin([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]) ) <span class="comment"># 最后一列的下标是12, isin()接受一个列表，来判断该列中元素是否在列表中</span></span><br><span class="line">d.sample(<span class="number">10</span>) <span class="comment"># sample()用于从DataFrame中随机选择行或列</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011929160.jpg" alt="013"></p><hr><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://pan.baidu.com/s/1T6mHGFvxg6W7RRX3JMq-Mg?pwd=2023">Pokemon数据集</a></p><p><a href="https://blog.csdn.net/m0_49705298/article/details/119142523">Pandas统计函数count，unique，nunique的区别</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-实践基础练习四-（Pandas）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-实践基础练习四-（Pandas）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 实践基础练习四 （Pandas）&quot;&gt;&lt;/a&gt;数据分析与可视化 实践</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="Pandas" scheme="https://ariesfun.gitee.io/tags/Pandas/"/>
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 实践基础练习三（NumPy）</title>
    <link href="https://ariesfun.gitee.io/posts/dfda.html"/>
    <id>https://ariesfun.gitee.io/posts/dfda.html</id>
    <published>2023-04-01T11:59:01.372Z</published>
    <updated>2023-04-30T04:45:34.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习三-（NumPy）"><a href="#数据分析与可视化-实践基础练习三-（NumPy）" class="headerlink" title="数据分析与可视化 实践基础练习三 （NumPy）"></a>数据分析与可视化 实践基础练习三 （NumPy）</h2><h3 id="一、实训要求"><a href="#一、实训要求" class="headerlink" title="一、实训要求"></a>一、实训要求</h3><p><strong>实训：葡萄酒品质数据NumPy基础分析</strong></p><p>本次案例使用葡萄酒品质数据，该数据集包含1599种红葡萄酒的各种信息，如酒的固定酸度、挥发性酸度和pH值等测量值，也包括一个酒的品质得分，该得分是至少三类口味测试者给该款酒打分的平均值。该数据来源于公开数据库UCI，更多详细信息可以查看  <a href="https://archive.ics.uci.edu/ml/datasets/Wine+Quality">https://archive.ics.uci.edu/ml/datasets/Wine+Quality</a> 。</p><p>数据集下载，<a href="https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/">DataSet</a>。</p><p>数据说明：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011237728.jpg" alt="img-202304011237728"></p><hr><h3 id="二、练习题目"><a href="#二、练习题目" class="headerlink" title="二、练习题目"></a>二、练习题目</h3><p>请完成以下操作：</p><p>1、提取第一种葡萄酒的所有数据；</p><p>2、将葡萄酒数据降为一维数据；</p><p>3、将降维后的数组重新恢复成以前的形状；</p><p>4、我们计划引入一种新的葡萄酒品质打分方法，同时保留原来的品质得分，所以需要添加一列新值在原始数组后，初始值全为0；</p><p>5、我们认为葡萄酒数据中的品质得分普遍偏低，打算将所有葡萄酒的品质得分加10；</p><p>6、我们想要选择最大化酒精含量和品质的葡萄酒（我们想喝醉，但我们想喝好酒），需要计算各葡萄酒酒精度数乘以品质得分的值;</p><p>7、计算品质得分数据的标准差;</p><p>8、哪些葡萄酒的酒精度数高于10 ，并统计其个数。</p><hr><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础实训3：葡萄酒品质数据NumPy基础分析</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.导入数据</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># numpy主要用于对多维数组进行计算</span></span><br><span class="line"></span><br><span class="line">wines = np.loadtxt(<span class="string">&quot;./winequality-red.csv&quot;</span>, delimiter = <span class="string">&quot;;&quot;</span>, skiprows = <span class="number">1</span>) <span class="comment"># 原数据集第1行是字符串，读取数据时要跳过1行(skiprows=1)</span></span><br><span class="line">wines <span class="comment"># 输出</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array([[ 7.4  ,  0.7  ,  0.   , ...,  0.56 ,  9.4  ,  5.   ],</span><br><span class="line">       [ 7.8  ,  0.88 ,  0.   , ...,  0.68 ,  9.8  ,  5.   ],</span><br><span class="line">       [ 7.8  ,  0.76 ,  0.04 , ...,  0.65 ,  9.8  ,  5.   ],</span><br><span class="line">       ...,</span><br><span class="line">       [ 6.3  ,  0.51 ,  0.13 , ...,  0.75 , 11.   ,  6.   ],</span><br><span class="line">       [ 5.9  ,  0.645,  0.12 , ...,  0.71 , 10.2  ,  5.   ],</span><br><span class="line">       [ 6.   ,  0.31 ,  0.47 , ...,  0.66 , 11.   ,  6.   ]])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、提取第一种葡萄酒的所有数据；</span></span><br><span class="line"></span><br><span class="line">wines[<span class="number">0</span>] <span class="comment"># 输出第一行</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([ 7.4   ,  0.7   ,  0.    ,  1.9   ,  0.076 , 11.    , 34.    ,</span><br><span class="line">        0.9978,  3.51  ,  0.56  ,  9.4   ,  5.    ])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2、将葡萄酒数据降为一维数据；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">wines.flatten() <span class="comment"># flatten()函数只能适用于numpy对象, 返回一个折叠成一维的数组且原数组不变。</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([ 7.4 ,  0.7 ,  0.  , ...,  0.66, 11.  ,  6.  ])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wines.shape</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1599, 12)</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">wines.reshape(<span class="number">1</span>, <span class="number">1599</span>*<span class="number">12</span>) <span class="comment"># 获取数组的尺寸后，用reshape()重塑为1行n列</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([[ 7.4 ,  0.7 ,  0.  , ...,  0.66, 11.  ,  6.  ]])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3、将降维后的数组重新恢复成以前的形状；</span></span><br><span class="line"></span><br><span class="line">wines.reshape(<span class="number">1599</span>,<span class="number">12</span>) <span class="comment"># 还原数组尺寸</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array([[ 7.4  ,  0.7  ,  0.   , ...,  0.56 ,  9.4  ,  5.   ],</span><br><span class="line">       [ 7.8  ,  0.88 ,  0.   , ...,  0.68 ,  9.8  ,  5.   ],</span><br><span class="line">       [ 7.8  ,  0.76 ,  0.04 , ...,  0.65 ,  9.8  ,  5.   ],</span><br><span class="line">       ...,</span><br><span class="line">       [ 6.3  ,  0.51 ,  0.13 , ...,  0.75 , 11.   ,  6.   ],</span><br><span class="line">       [ 5.9  ,  0.645,  0.12 , ...,  0.71 , 10.2  ,  5.   ],</span><br><span class="line">       [ 6.   ,  0.31 ,  0.47 , ...,  0.66 , 11.   ,  6.   ]])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4、我们计划引入一种新的葡萄酒品质打分方法，同时保留原来的品质得分，所以需要添加一列新值在原始数组后，初始值全为0；</span></span><br><span class="line"></span><br><span class="line">new_col = np.zeros((<span class="number">1599</span>)) <span class="comment"># 相当于初始化一列全0</span></span><br><span class="line">wines = np.insert(wines, <span class="number">12</span>, new_col, axis = <span class="number">1</span>) <span class="comment"># 在最后一列位置引入新列（轴向，0：行，1：列）</span></span><br><span class="line">wines</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array([[ 7.4  ,  0.7  ,  0.   , ...,  9.4  ,  5.   ,  0.   ],</span><br><span class="line">       [ 7.8  ,  0.88 ,  0.   , ...,  9.8  ,  5.   ,  0.   ],</span><br><span class="line">       [ 7.8  ,  0.76 ,  0.04 , ...,  9.8  ,  5.   ,  0.   ],</span><br><span class="line">       ...,</span><br><span class="line">       [ 6.3  ,  0.51 ,  0.13 , ..., 11.   ,  6.   ,  0.   ],</span><br><span class="line">       [ 5.9  ,  0.645,  0.12 , ..., 10.2  ,  5.   ,  0.   ],</span><br><span class="line">       [ 6.   ,  0.31 ,  0.47 , ..., 11.   ,  6.   ,  0.   ]])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5、我们认为葡萄酒数据中的品质得分普遍偏低，打算将所有葡萄酒的品质得分加10；</span></span><br><span class="line"></span><br><span class="line">wines[:, -<span class="number">2</span>] = wines[:, -<span class="number">2</span>] + <span class="number">10</span> <span class="comment"># 将倒2列的值更新为加10后的值</span></span><br><span class="line">wines</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array([[ 7.4  ,  0.7  ,  0.   , ...,  9.4  , 15.   ,  0.   ],</span><br><span class="line">       [ 7.8  ,  0.88 ,  0.   , ...,  9.8  , 15.   ,  0.   ],</span><br><span class="line">       [ 7.8  ,  0.76 ,  0.04 , ...,  9.8  , 15.   ,  0.   ],</span><br><span class="line">       ...,</span><br><span class="line">       [ 6.3  ,  0.51 ,  0.13 , ..., 11.   , 16.   ,  0.   ],</span><br><span class="line">       [ 5.9  ,  0.645,  0.12 , ..., 10.2  , 15.   ,  0.   ],</span><br><span class="line">       [ 6.   ,  0.31 ,  0.47 , ..., 11.   , 16.   ,  0.   ]])</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6、我们想要选择最大化酒精含量和品质的葡萄酒（我们想喝醉，但我们想喝好酒），需要计算各葡萄酒酒精度数乘以品质得分的值。</span></span><br><span class="line"></span><br><span class="line">a = wines[:, -<span class="number">3</span>] * wines[:, -<span class="number">2</span>] <span class="comment"># 倒3列时酒精度数，倒2列是品质得分相乘即可</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">np.<span class="built_in">max</span>(a) <span class="comment">#再利用numpy求最大值即可</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[141. 147. 147. ... 176. 153. 176.]</span><br><span class="line"></span><br><span class="line">252.0</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7、计算品质得分数据的标准差。</span></span><br><span class="line"></span><br><span class="line">np.std(wines[:, -<span class="number">2</span>]) <span class="comment"># 计算品质得分的标准差</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.8073168769639513</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8、哪些葡萄酒的酒精度数高于10 ，并统计其个数。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(wines[:, -<span class="number">3</span>] &gt; <span class="number">10</span>) <span class="comment"># sum会计算为True的数量</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">852</span><br></pre></td></tr></table></figure><hr><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/">实训数据集（DataSet）</a></p><p><a href="https://blog.csdn.net/ACID_lv_ing/article/details/87092714">np.loadtxt()的详细用法</a></p><p><a href="https://blog.csdn.net/Mxeron/article/details/113405004">np.insert的用法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-实践基础练习三-（NumPy）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-实践基础练习三-（NumPy）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 实践基础练习三 （NumPy）&quot;&gt;&lt;/a&gt;数据分析与可视化 实践基础练</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="NumPy" scheme="https://ariesfun.gitee.io/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>AcWing-周赛 第96场题解</title>
    <link href="https://ariesfun.gitee.io/posts/c171.html"/>
    <id>https://ariesfun.gitee.io/posts/c171.html</id>
    <published>2023-03-28T08:54:45.005Z</published>
    <updated>2023-03-28T08:55:43.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AcWing-周赛-第96场题解"><a href="#AcWing-周赛-第96场题解" class="headerlink" title="AcWing-周赛 第96场题解"></a>AcWing-周赛 第96场题解</h2><h3 id="T1-AcWing-4876-完美数"><a href="#T1-AcWing-4876-完美数" class="headerlink" title="T1: AcWing 4876. 完美数"></a>T1: AcWing 4876. 完美数</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>如果一个正整数能够被 2520 整除，则称该数为完美数。<br>给定一个正整数 n，请你计算 [1,n] 范围内有多少个完美数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>一个整数 n。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，表示 [1,n] 范围内完美数的个数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 3个测试点满足 1≤n≤3000。<br>所有测试点满足 1≤n≤1e18。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3000</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><hr><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n; <span class="comment">// 会爆int(2.1 x 10 ^9)</span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">// 完美数的个数k,应要满足 k * 2520 &lt;= n, 即 k &lt;= (n / 2520) 下取整即可</span></span><br><span class="line">    cout &lt;&lt; n / <span class="number">2520</span> &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="T2-AcWing-4877-最大价值"><a href="#T2-AcWing-4877-最大价值" class="headerlink" title="T2: AcWing 4877. 最大价值"></a>T2: AcWing 4877. 最大价值</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>有一个容量为 n 的背包和 m+1 种物品，每种物品都有无限多个。</p><p>物品种类编号为 0∼m。</p><p>第 i种物品的体积为 vi，价值为 wi。</p><p>在使用背包装入物品时，每种物品的限重如下：</p><ul><li>第 0 种物品：重量忽略不计，在装入时没有重量限制。</li><li>第 1∼m 种物品：第 i 种物品的单个重量为 hi，如果该种物品的装入总重量超过 li，则视为超重。</li></ul><p>现在，请你挑选物品装入背包，要求</p><ul><li>所有装入物品的总体积不得超过背包容量。</li><li>所有存在重量限制的物品均不得超重。</li><li>满足以上所有条件的前提下，所有装入物品的总价值尽可能大。</li></ul><p>输出总价值的最大可能值。</p><p>注意审题，不要将 n,m的含义弄混。</p><h4 id="输入格式。"><a href="#输入格式。" class="headerlink" title="输入格式。"></a>输入格式。</h4><p>第一行包含四个整数 n,m,v0,w0。</p><p>接下来 m 行，每行包含四个整数 li,hi,vi,wi。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，表示总价值的最大可能值。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 44 个测试点满足 1≤n≤100，1≤m≤2。<br>所有测试点满足 1≤n≤1000，1≤m≤10，1≤li,hi,vi,wi≤100。</p><h4 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 2 2 1</span><br><span class="line">7 3 2 100</span><br><span class="line">12 3 1 10</span><br></pre></td></tr></table></figure><h4 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">241</span><br></pre></td></tr></table></figure><h4 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100 1 25 50</span><br><span class="line">15 5 20 10</span><br></pre></td></tr></table></figure><h4 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">200</span><br></pre></td></tr></table></figure><hr><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m, v[N], w[N];</span><br><span class="line"><span class="type">int</span> dp[N]; <span class="comment">// dp[j]表示背包容量为j时的最大价值</span></span><br><span class="line"><span class="type">int</span> s[N]; <span class="comment">// 每个物品最多有s[i]个转化为多重背包问题</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 数组范围10^6，完全背包+多重背包优化结合</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; v[<span class="number">0</span>] &gt;&gt; w[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, h;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; h &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">        s[i] = l / h;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第0种物品m0，有无限多个，完全背包问题</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = v[<span class="number">0</span>]; i &lt;= n; i ++) <span class="comment">// 预处理第0件物品的最大价值</span></span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i], dp[i - v[<span class="number">0</span>]] + w[<span class="number">0</span>]); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第1∼m种物品，最多有(l/h)个，多重背包问题(三重for循环)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = n; j &gt;= <span class="number">1</span>; j --)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k ++)</span><br><span class="line">                <span class="comment">// 该状态是从(i-1)层转移过来，需从大到小来枚举体积n</span></span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - k * v[i]] + k *w[i]); </span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; dp[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.acwing.com/video/4674/">y总直播讲解</a><br><a href="https://www.acwing.com/solution/content/179457/">最大价值？披着羊皮的多重背包！！</a><br><a href="https://www.acwing.com/activity/content/code/content/4663006/">AcWing 3. 完全背包问题</a><br><a href="https://www.acwing.com/activity/content/code/content/6062057/">AcWing 4. 多重背包问题I</a><br><a href="https://www.acwing.com/activity/content/code/content/6062906/">AcWing 4877. 最大价值 - 打卡记录</a></p><p><a href="https://www.bilibili.com/video/BV1RU4y1h7BN/?share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">B站-动态规划dp求解01背包问题讲解</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;AcWing-周赛-第96场题解&quot;&gt;&lt;a href=&quot;#AcWing-周赛-第96场题解&quot; class=&quot;headerlink&quot; title=&quot;AcWing-周赛 第96场题解&quot;&gt;&lt;/a&gt;AcWing-周赛 第96场题解&lt;/h2&gt;&lt;h3 id=&quot;T1-AcWing</summary>
      
    
    
    
    <category term="AcWing周赛" scheme="https://ariesfun.gitee.io/categories/AcWing%E5%91%A8%E8%B5%9B/"/>
    
    
    <category term="C/C++" scheme="https://ariesfun.gitee.io/tags/C-C/"/>
    
    <category term="AcWing" scheme="https://ariesfun.gitee.io/tags/AcWing/"/>
    
  </entry>
  
  <entry>
    <title>AcWing-周赛 第95场题解</title>
    <link href="https://ariesfun.gitee.io/posts/ce81.html"/>
    <id>https://ariesfun.gitee.io/posts/ce81.html</id>
    <published>2023-03-20T19:11:25.519Z</published>
    <updated>2023-03-28T08:55:07.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AcWing-周赛-第95场题解"><a href="#AcWing-周赛-第95场题解" class="headerlink" title="AcWing-周赛 第95场题解"></a>AcWing-周赛 第95场题解</h2><h3 id="T1-AcWing-4873-简单计算"><a href="#T1-AcWing-4873-简单计算" class="headerlink" title="T1:AcWing 4873. 简单计算"></a>T1:AcWing 4873. 简单计算</h3><p>给定四个整数 x1,y1,x2,y2，请你计算 max(|x1−x2|,|y1−y2|)。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 x1,y1。</p><p>第二行包含两个整数 x2,y2。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，表示 max(|x1−x2|,|y1−y2|)的值。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 44 个测试点满足 −10≤x1,y1,x2,y2≤10。<br>所有测试点满足 −10e9≤x1,y1,x2,y2≤10e9。</p><h4 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 0</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">6 1</span><br></pre></td></tr></table></figure><h4 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><hr><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x1,x2,y1,y2;</span><br><span class="line">    cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(<span class="built_in">abs</span>(x1 - x2), <span class="built_in">abs</span>(y1 - y2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="T2-AcWing-4874-约数"><a href="#T2-AcWing-4874-约数" class="headerlink" title="T2:AcWing 4874.约数"></a>T2:AcWing 4874.约数</h3><p>如果一个正整数的约数个数恰好为 33，则称该数为美丽数。</p><p>给定 n个正整数 a1,a2,…,an, 请你依次判断每个数是否是美丽数。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>第二行包含 n个整数 a1,a2,…,an。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 n行，其中第 i行输出对 ai的判断，如果 ai是美丽数，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 6个测试点满足 1≤n≤10。<br>所有测试点满足 1≤n≤105，1≤ai≤10121。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4 5 6</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><hr><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>参考y总的讲解，优化处理yyds!!!</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>; <span class="comment">// 优化处理即判断r=sqrt(n)，看平方根r是否是质数</span></span><br><span class="line"><span class="type">int</span> primes[N]; <span class="comment">// 用于存储N个待判断的整数</span></span><br><span class="line"><span class="type">bool</span> st[N]; <span class="comment">// 用于标记该位置上的数是否为质数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span> <span class="comment">// 筛质数(线性筛法)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// !!!需要手动特判一下，1的约数个数为1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) primes[cnt ++] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] * i &lt;= n; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>; <span class="comment">// 即将非质数的状态更新为true</span></span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 即sqrt(x)是质数，等价于约数个数为（1, x, r=sqrt(x)）这三个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">get_primes</span>(N - <span class="number">1</span>); <span class="comment">// 预处理这N个数，标记状态</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n --)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x; <span class="comment">// 用long long存,12位数会爆int</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">        LL r = <span class="built_in">sqrt</span>(x); <span class="comment">// 记得加&lt;cmath&gt;头文件</span></span><br><span class="line">        <span class="keyword">if</span> (r * r == x &amp;&amp; !st[r]) <span class="comment">// 满足x是平方数的且平方根为奇数的，才是美丽数</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps: </p><p>完全平方数定义，若一个数能表示成某个整数的平方的形式，则称这个数为完全平方数。</p><p>eg. 36 = 6 * 6, 称36为完全平方数。</p><p>参考资料：</p><p><a href="https://www.acwing.com/video/4666/">T2视频讲解</a></p><p><a href="https://www.acwing.com/blog/content/32/">数据范围</a></p><p><a href="http://baike.baidu.com/l/COk2KzST">完全平方数</a></p><p><a href="http://t.csdn.cn/nR7Wo">判断一个数是否为素数时，只需开平方根</a></p><p>相关例题：<br><a href="https://www.acwing.com/problem/content/728/">质数(语法题)</a></p><p><a href="https://www.acwing.com/activity/content/code/content/5050226/">枚举约数题</a></p><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://t.csdn.cn/D5VJO">同类题解【蓝桥杯集训·周赛】AcWing 第 95 场周赛</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;AcWing-周赛-第95场题解&quot;&gt;&lt;a href=&quot;#AcWing-周赛-第95场题解&quot; class=&quot;headerlink&quot; title=&quot;AcWing-周赛 第95场题解&quot;&gt;&lt;/a&gt;AcWing-周赛 第95场题解&lt;/h2&gt;&lt;h3 id=&quot;T1-AcWing</summary>
      
    
    
    
    <category term="AcWing周赛" scheme="https://ariesfun.gitee.io/categories/AcWing%E5%91%A8%E8%B5%9B/"/>
    
    
    <category term="C/C++" scheme="https://ariesfun.gitee.io/tags/C-C/"/>
    
    <category term="AcWing" scheme="https://ariesfun.gitee.io/tags/AcWing/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉 上机实践一 图像的基本操作</title>
    <link href="https://ariesfun.gitee.io/posts/85c6.html"/>
    <id>https://ariesfun.gitee.io/posts/85c6.html</id>
    <published>2023-03-18T15:26:13.553Z</published>
    <updated>2023-03-18T15:26:52.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机视觉-上机实践一-图像的基本操作"><a href="#计算机视觉-上机实践一-图像的基本操作" class="headerlink" title="计算机视觉 上机实践一 图像的基本操作"></a>计算机视觉 上机实践一 图像的基本操作</h2><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><p>通过本次实验，掌握图像的读取、显示、保存、绘制等基本操作；</p><p>熟悉图像的灰度直方图原理，并对图像进行灰度变换和颜色空间变换；</p><p>能绘制自定义图像。</p><h3 id="二、实验环境"><a href="#二、实验环境" class="headerlink" title="二、实验环境"></a>二、实验环境</h3><ol><li><p>硬件环境：一台笔电</p></li><li><p>软件环境：Windows10环境、Jupyter Notebook软件;</p></li></ol><h3 id="三、实验内容及代码实现"><a href="#三、实验内容及代码实现" class="headerlink" title="三、实验内容及代码实现"></a>三、实验内容及代码实现</h3><h4 id="1-读取、显示、保存图像"><a href="#1-读取、显示、保存图像" class="headerlink" title="1. 读取、显示、保存图像"></a>1. 读取、显示、保存图像</h4><p>源文件lena.png:</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303081507561.jpg" alt="img-202303081507561" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.读取、显示、保存Lena图像；(使用matplotlib库)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg </span><br><span class="line"></span><br><span class="line"><span class="comment"># mipimg读取图片</span></span><br><span class="line">lena = mpimg.imread(<span class="string">&#x27;lean.png&#x27;</span>) </span><br><span class="line"></span><br><span class="line">plt.imshow(lena) <span class="comment"># plt.imshow()函数负责对图像进行处理，并显示其格式</span></span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>) <span class="comment"># 不显示坐标轴</span></span><br><span class="line">plt.title(<span class="string">&#x27;Lena.png&#x27;</span>) <span class="comment"># 显示标题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="comment">#bbox_inches=&#x27;tight&#x27;表示指定将图表多余的空白区域裁减掉</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;lean-new.png&#x27;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)  <span class="comment"># 注意：保存需要在显示的前面，否则保存的图片会是空白</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示经imshow处理的图片</span></span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303182252441.png" alt="img-202303182252441"></p><hr><h4 id="2-直方图均衡化"><a href="#2-直方图均衡化" class="headerlink" title="2.直方图均衡化"></a>2.直方图均衡化</h4><p>内容：选择一张有明暗对比的图片(网上找一张即可)，读取并绘制图像的直方图；对输入图像进行直方图均衡化并输出结果；</p><p>（1）使用Matplotlib库实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.选择一张有明暗对比的图片，读取并绘制图像的直方图；对输入图像进行直方图均衡化并输出结果；（使用Matplotlib库实现）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="comment"># opencv读取的图片数值为BGR格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取并显示原始图像</span></span><br><span class="line">original = cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>) <span class="comment"># 第2个参数flags表示标记位，读入灰度图片可用0作为实参替代</span></span><br><span class="line"><span class="comment"># 创建1个图形figure</span></span><br><span class="line">plt.figure(figsize=(<span class="number">18</span>, <span class="number">18</span>)) </span><br><span class="line">image1 = plt.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>) <span class="comment"># 为方便观察结果，这里创建了多个子图subplot</span></span><br><span class="line">image1.set_title(<span class="string">&#x27;Original Image&#x27;</span>)</span><br><span class="line">plt.imshow(original)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原图的直方图</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>,<span class="number">0</span>) <span class="comment"># 第2个参数flags表示标记位，读入灰度图片可用0作为实参替代</span></span><br><span class="line"><span class="comment"># 这里使用Matplotlib库自带的计算并绘制直方图功能</span></span><br><span class="line">image2 = plt.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">image2.set_title(<span class="string">&#x27;Original Histogram&#x27;</span>)</span><br><span class="line">plt.hist(img.ravel(),<span class="number">256</span>,[<span class="number">0</span>,<span class="number">255</span>]) <span class="comment"># 绘制原图像的灰度直方图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 均衡化后的直方图</span></span><br><span class="line">img2 = cv2.equalizeHist(img)</span><br><span class="line">image4 = plt.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">image4.set_title(<span class="string">&#x27;Equalized Histogram&#x27;</span>)</span><br><span class="line">plt.hist(img2.ravel(),<span class="number">256</span>,[<span class="number">0</span>,<span class="number">255</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303182257597.png" alt="img-202303182257597"></p><hr><p>（2）使用opencv库实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.更好的阅读体验，使用subplot创建单个子图（使用opencv库实现）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>, <span class="number">0</span>) <span class="comment"># 读取原始图的灰度度</span></span><br><span class="line">img_eq = cv2.equalizeHist(img) <span class="comment"># 用opencv库实现图像直方图均衡化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># opencv库calcHist()来计算直方图</span></span><br><span class="line">hist = cv2.calcHist([img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>,<span class="number">255</span>]) <span class="comment"># 第1个参数表示要计算的原图 </span></span><br><span class="line">hist_eq = cv2.calcHist([img_eq], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>,<span class="number">255</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建1个图形figure</span></span><br><span class="line">plt.figure(figsize=(<span class="number">13</span>, <span class="number">13</span>)) </span><br><span class="line">image1 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">image1.set_title(<span class="string">&#x27;Oringinal Image&#x27;</span>)</span><br><span class="line">plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>) <span class="comment"># cmap:颜色图谱（colormap),这里是绘制灰图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 均衡化后的图片</span></span><br><span class="line">image2 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">image2.set_title(<span class="string">&#x27;Equalized Image&#x27;</span>)</span><br><span class="line">plt.imshow(img_eq,cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原图的直方图</span></span><br><span class="line">image3 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">image3.set_title(<span class="string">&#x27;Oringinal Histogram&#x27;</span>)</span><br><span class="line">plt.plot(hist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均衡化后的直方图</span></span><br><span class="line">image4 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">image4.set_title(<span class="string">&#x27;Equalized Histogram&#x27;</span>)</span><br><span class="line">plt.plot(hist_eq)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303182259322.png" alt="img-202303182259322" style="zoom:67%;" /><hr><h4 id="3-对图像进行灰度变换、颜色空间转换等基本操作"><a href="#3-对图像进行灰度变换、颜色空间转换等基本操作" class="headerlink" title="3. 对图像进行灰度变换、颜色空间转换等基本操作"></a>3. 对图像进行灰度变换、颜色空间转换等基本操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.对读入图像进行灰度变换、颜色空间转换等基本操作；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像,opencv读取图像是BGR顺序</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;lean.png&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确显示图片</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>)) </span><br><span class="line">image1 = plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">image1.set_title(<span class="string">&#x27;Raw Image&#x27;</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(img.astype(np.uint8), cv2.COLOR_BGR2RGB)) <span class="comment"># 保证显示出的图像是RGB顺序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行灰度变换：RGB to GRAY</span></span><br><span class="line"><span class="comment"># 方法1，使用公式：Gray = 0.2989*R+0.5870*G+0.1140*B</span></span><br><span class="line">img1 = <span class="number">0.2989</span> * img[:,:,<span class="number">2</span>] + <span class="number">0.5870</span> * img[:,:,<span class="number">1</span>] + <span class="number">0.1140</span> * img[:,:,<span class="number">0</span>] <span class="comment"># 分别取出img数组中的RGB二维数组计算</span></span><br><span class="line">plt.figure(figsize = (<span class="number">16</span>, <span class="number">16</span>))</span><br><span class="line">image2 = plt.subplot(<span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">image2.set_title(<span class="string">&#x27;Gray Image1&#x27;</span>)</span><br><span class="line">plt.imshow(img1, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2，使用openCV自带函数进行转换</span></span><br><span class="line">image3 = plt.subplot(<span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">image3.set_title(<span class="string">&#x27;Gray Image2&#x27;</span>)</span><br><span class="line">plt.imshow(cv2.cvtColor(img.astype(np.uint8), cv2.COLOR_BGR2GRAY), cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法3，根据Gray公式自定义函数将RGB转为灰度图（类似方法一）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rgb2gray</span>(<span class="params">rgb</span>):</span><br><span class="line">    <span class="keyword">return</span> np.dot(rgb[:, :,:<span class="number">3</span>], [<span class="number">0.299</span>, <span class="number">0.587</span>, <span class="number">0.114</span>]) <span class="comment"># 进行向量点乘</span></span><br><span class="line">gray = rgb2gray(img)</span><br><span class="line">image4 = plt.subplot(<span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">image4.set_title(<span class="string">&#x27;Gray Image3&#x27;</span>)</span><br><span class="line">plt.imshow(gray, cmap=<span class="string">&#x27;Greys_r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 颜色空间转换, RGB to HSV</span></span><br><span class="line">img2 = cv2.cvtColor(img, cv2.COLOR_BGR2HSV) <span class="comment"># HSV常用于分割指定颜色的物体</span></span><br><span class="line">image5 = plt.subplot(<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">image5.set_title(<span class="string">&#x27;RGB to HSV&#x27;</span>)</span><br><span class="line">plt.imshow(img2)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303182306684.jpg" alt="img-202303182306684" style="zoom: 50%;" /><hr><h4 id="4-自定义图像绘制"><a href="#4-自定义图像绘制" class="headerlink" title="4. 自定义图像绘制"></a>4. 自定义图像绘制</h4><p>内容：定义一个像素为512*512的图像平面，黑色背景，在该图像上面生成一个正方形和圆，要求正方形的四个点为A（256，64）、B（256，256）、C（448，256）、D（448，64）；要求圆的半径r=100，圆心为（256，256）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.自定义图像绘制。定义一个像素为512*512的图像平面，黑色背景，在该图像上面生成一个正方形和圆，</span></span><br><span class="line"><span class="comment">#   要求正方形的四个点为A（256，64）、B（256，256）、C（448，256）、D（448，64）；</span></span><br><span class="line"><span class="comment">#   要求圆的半径r=100，圆心为（256，256）。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个像素为512*512的图像平面，黑色背景</span></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义正方形的四个点</span></span><br><span class="line">A = (<span class="number">256</span>, <span class="number">64</span>)</span><br><span class="line">B = (<span class="number">256</span>, <span class="number">256</span>)</span><br><span class="line">C = (<span class="number">448</span>, <span class="number">256</span>)</span><br><span class="line">D = (<span class="number">448</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制正方形</span></span><br><span class="line">cv2.line(img, A, B, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)  <span class="comment"># AB</span></span><br><span class="line">cv2.line(img, B, C, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)  <span class="comment"># BC</span></span><br><span class="line">cv2.line(img, C, D, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)  <span class="comment"># CD</span></span><br><span class="line">cv2.line(img, D, A, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)  <span class="comment"># DA</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义圆心和半径</span></span><br><span class="line">center = (<span class="number">256</span>, <span class="number">256</span>)</span><br><span class="line">r = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制圆</span></span><br><span class="line">cv2.circle(img, center, r, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图像</span></span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.title(<span class="string">&#x27;Custom Drawing&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303182309347.png" alt="img-202303182309347"  /><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://www.bilibili.com/video/BV1EG4y1B7Wz/?share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">OpenCV计算机视觉教程</a></p><p><a href="https://www.cnblogs.com/wojianxin/p/12611909.html">OpenCV绘制图像直方图，实现直方图均衡化，自适应均衡化</a></p><p><a href="https://blog.csdn.net/yukinoai/article/details/87900860">图像直方图的计算、绘制与分析</a></p><p><a href="https://www.cnblogs.com/zizz/p/15964240.html">plt.imshow的cmap参数代表</a></p><p><a href="https://blog.csdn.net/weixin_44015965/article/details/109547129">cv2.imread()函数</a></p><p><a href="https://blog.csdn.net/stefanjoe/article/details/112095856">matplotlib之figure()详解</a></p><p><a href="https://blog.csdn.net/baoziqyp/article/details/111239877">plt.figure()参数使用详解及运行演示</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;计算机视觉-上机实践一-图像的基本操作&quot;&gt;&lt;a href=&quot;#计算机视觉-上机实践一-图像的基本操作&quot; class=&quot;headerlink&quot; title=&quot;计算机视觉 上机实践一 图像的基本操作&quot;&gt;&lt;/a&gt;计算机视觉 上机实践一 图像的基本操作&lt;/h2&gt;&lt;h3 i</summary>
      
    
    
    
    <category term="计算机视觉（CV）" scheme="https://ariesfun.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%EF%BC%88CV%EF%BC%89/"/>
    
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="OpenCV" scheme="https://ariesfun.gitee.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>在Anaconda3中安装OpenCV库报错问题解决（使用命令行安装 Pip Install Opencv-Python -I）</title>
    <link href="https://ariesfun.gitee.io/posts/c0cf.html"/>
    <id>https://ariesfun.gitee.io/posts/c0cf.html</id>
    <published>2023-03-15T18:00:32.726Z</published>
    <updated>2023-03-17T16:02:46.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在Anaconda3中安装OpenCV库问题解决（使用命令行安装-pip-install-opencv-python-i-）"><a href="#在Anaconda3中安装OpenCV库问题解决（使用命令行安装-pip-install-opencv-python-i-）" class="headerlink" title="在Anaconda3中安装OpenCV库问题解决（使用命令行安装 pip install opencv-python -i ）"></a>在Anaconda3中安装OpenCV库问题解决（使用命令行安装 pip install opencv-python -i ）</h2><hr><h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><p>我最近因做计算机视觉课程的上机实验，需要对图像做一些处理，具体实验要求中会用到<code>cv2</code>库，需要我们提前安装，配置好自己的电脑环境。<br>我就按着常规的方式从Anaconda3软件中的环境配置选项里下载对应的库文件。虽说opencv库已经安装好了，但在Jupyter Notebook中执行python程序时，导入 <code>cv2</code> 库时会发生报错现象，这说明我的opencv库并没有正确安装成功。网上冲浪一番，才知道opencv库安装这个问题确实很让人苦恼，我尝试了一些教程但还是以失败告终。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160053507.jpg" alt="img-202303160053507"></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160045386.jpg" alt="img-202303160045386" style="zoom: 150%;" /><p>也上了B站，翻看一些课程教学<a href="https://www.bilibili.com/video/BV1EG4y1B7Wz/?p=2&share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">OpenCV计算机视觉实战</a>的安装步骤，还是不太行。。。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160053800.jpg" alt="img-202303160053800"></p><h3 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h3><p>接着又听了同学建议，让我试试这篇文章的教程，<a href="http://t.csdn.cn/slbBq">Anaconda安装OpenCV</a>，但还是出了一堆问题。</p><p>大致步骤如下，你可能会用上哈。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 打开Anaconda Prompt命令行工具</span><br><span class="line">2. 输入 d: 回车</span><br><span class="line">3. 接着进入到你的Anaconda安装目录下的Scripts文件夹   </span><br><span class="line">   cd D:\Anaconda3\Scripts</span><br><span class="line">4. 输入 pip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">   (这里用清华镜像来下载opencv库，国内网站访问的速度会亿点~)</span><br></pre></td></tr></table></figure><hr><p>这里爆红的错误大致跟上面用命令行安装的出现的问题一致。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160054158.jpg" alt="img-202303160054158"></p><p>然后我就找是否有与我遇到同类型问题的解决方案，<a href="http://t.csdn.cn/xr18Y">pip安装OpenCV报错</a>，哈哈果不其然让我找到了。</p><p>我在试了试评论区这位老哥说的方法，遇到佬了，亲测有效哈。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160055515.jpg" alt="img-202303160055515" style="zoom: 80%;" /><p>这里在Windows 上更新了pip软件包安装程序：<code>python -m pip install -U pip</code></p><p>接着我试了前面步骤里的镜像安装库的方式，就可以成功安装了。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160055717.jpg" alt="img-202303160055717"></p><h3 id="三、测试OpenCV库"><a href="#三、测试OpenCV库" class="headerlink" title="三、测试OpenCV库"></a>三、测试OpenCV库</h3><p>使用 <code>pip list</code> 命令可查看当前Python中已安装的库及版本号，这时候发现opencv库已经安装好了。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160055609.jpg" alt="img-202303160055609"  /><p>最后到Jupyter Notebook中测试发现，已经可以正常导入<code>cv2</code>库了。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303160055448.jpg" alt="img-202303160055448" style="zoom: 67%;" /><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://www.bilibili.com/video/BV1EG4y1B7Wz/?p=2&share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">OpenCV计算机视觉实战</a></p><p><a href="http://t.csdn.cn/PfPbY">谈谈全自动安装常使用的pip install的原理及作用</a></p><p><a href="http://t.csdn.cn/slbBq">Anaconda安装OpenCV</a></p><p><a href="http://t.csdn.cn/xr18Y">pip安装OpenCV报错</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;在Anaconda3中安装OpenCV库问题解决（使用命令行安装-pip-install-opencv-python-i-）&quot;&gt;&lt;a href=&quot;#在Anaconda3中安装OpenCV库问题解决（使用命令行安装-pip-install-opencv-python</summary>
      
    
    
    
    <category term="计算机视觉（CV）" scheme="https://ariesfun.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%EF%BC%88CV%EF%BC%89/"/>
    
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="OpenCV" scheme="https://ariesfun.gitee.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 实践基础练习二（NumPy）</title>
    <link href="https://ariesfun.gitee.io/posts/91d1.html"/>
    <id>https://ariesfun.gitee.io/posts/91d1.html</id>
    <published>2023-03-12T05:22:36.090Z</published>
    <updated>2023-04-30T04:44:29.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习二（NumPy）"><a href="#数据分析与可视化-实践基础练习二（NumPy）" class="headerlink" title="数据分析与可视化    实践基础练习二（NumPy）"></a>数据分析与可视化    实践基础练习二（NumPy）</h2><hr><h3 id="一、Numpy相关函数或属性"><a href="#一、Numpy相关函数或属性" class="headerlink" title="一、Numpy相关函数或属性"></a>一、Numpy相关函数或属性</h3><ul><li><strong>数组的索引和切片</strong></li><li><strong>数组的运算</strong></li></ul><p><strong>1.Numpy的一元函数</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303091942166.png" alt="img-202303091942166" style="zoom: 67%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303091944208.png" alt="img-202303091944208.png" style="zoom:85%;" /><p><strong>2.Numpy的二元函数</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303091944093.png" alt="img-202303091944093" style="zoom: 82%;" /><ul><li><strong>数组的读/写</strong></li></ul><p><strong>1.np.savetxt() 和np.loadtxt()</strong><br>np.savetxt() np.loadtxt()只能有效存取一维和二维数组</p><p><strong>(1).  np.savetxt()</strong> </p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121252720.jpg" alt="img-202303121252720" style="zoom: 33%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121253508.jpg" alt="img-202303121253508" style="zoom:33%;" /><p><strong>(2).  np.loadtxt()</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121255236.jpg" alt="img-202303121255236" style="zoom:33%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121255615.png" alt="img-202303121255615" style="zoom: 67%;" /><p><strong>2.tofile() 和 np.fromfile()</strong><br>任意维度的存取, 该方法需要读取时知道存入文件时数组的维度和元素类型</p><p><strong>(1). tofile()</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121302821.jpg" alt="Snipaste_2023-03-12_12-59-29" style="zoom: 33%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121302563.jpg" alt="Snipaste_2023-03-12_13-01-22" style="zoom:33%;" /><p><strong>(2). np.fromfile()</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121302943.jpg" alt="Snipaste_2023-03-12_12-59-40" style="zoom:33%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121318728.jpg" alt="img-202303121318728" style="zoom: 50%;" /><p><strong>3.np.save()、np.savez() 和np.load()</strong><br>numpy的便捷文件存取</p><p><strong>(1). np.save() 和 np.load()</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121310258.jpg" alt="Snipaste_2023-03-12_13-07-42" style="zoom:33%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202303121311552.jpg" alt="Snipaste_2023-03-12_13-07-57" style="zoom: 40%;" /> <p><strong>(2). np.savez()</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.savez(file, *args, **kwds)</span><br></pre></td></tr></table></figure><p>  以未压缩的<code>.npz</code> 格式将多个数组保存到一个文件中。</p><p>  提供数组作为关键字参数，以将它们存储在输出文件中的相应名称下：<code>savez(fn, x=x, y=y)</code>。</p><hr><h3 id="二、练习题"><a href="#二、练习题" class="headerlink" title="二、练习题"></a>二、练习题</h3><ol><li><p>从数组np.arange(15)中提取5到10之间的所有数字 .</p></li><li><p>交换数组np.arange(9).reshape(3,3)中的第1列和第2列.</p></li><li><p>交换数组np.arange(9).reshape(3,3)中的第1行和第2行.</p></li><li><p>获取数组a = np.array([1,2,3,2,3,4,3,4,5,6])和数组b = np.array([7,2,10,2,7,4,9,4,9,8])之间的共同元素.</p></li><li><p>查找数组np.array([1,2,3,2,3,4,3,4,5,6])中的唯一值的数量.</p></li><li><p>查找二维数组np.arange(9).reshape(3,3)每一行中的最大值.</p></li><li><p>计算数组a = np.array([1,2,3,2,3,4,3,4,5,6])和数组b = np.array([7,2,10,2,7,4,9,4,9,8])之间的欧式距离.</p></li><li><p>查找数组np.array([7,2,10,2,7,4,9,4,9,8])中的第二大值.</p></li></ol><hr><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.从数组np.arange(15)中提取5到10之间的所有数字 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">15</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>,a[<span class="number">5</span>:<span class="number">11</span>])</span><br></pre></td></tr></table></figure><pre><code>a: [ 5  6  7  8  9 10]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.交换数组np.arange(9).reshape(3,3)中的第1列和第2列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">a[ : , [<span class="number">0</span>,<span class="number">1</span>]] = a[ : , [<span class="number">1</span>,<span class="number">0</span>]] <span class="comment"># [ : , [0,1]]表示得到第一列和第二列的所有元素值，交换列数下标即可</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[[1 0 2] [4 3 5] [7 6 8]]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.交换数组np.arange(9).reshape(3,3)中的第1行和第2行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">a[[<span class="number">0</span>,<span class="number">1</span>], : ] = a[[<span class="number">1</span>,<span class="number">0</span>], : ] <span class="comment"># [[0,1], : ]表示得到第一行和第二行的所有元素值，交换行数下标即可</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[[3 4 5] [0 1 2] [6 7 8]]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.获取数组a = np.array([1,2,3,2,3,4,3,4,5,6])和数组b = np.array([7,2,10,2,7,4,9,4,9,8])之间的共同元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">b = np.array([<span class="number">7</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>]) </span><br><span class="line">c = np.intersect1d(a,b) <span class="comment"># np.intersect1d()会返回两个数组中的共同元素，并且排序后输出</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><pre><code>[2 4]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5.查找数组np.array([1,2,3,2,3,4,3,4,5,6])中的唯一值的数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">unique_words, counts = np.unique(a, return_counts=<span class="literal">True</span>) <span class="comment"># 使用np.unique()会返回数组中的唯一值（去重）</span></span><br><span class="line">                                                         <span class="comment"># 加上return_counts参数会返回去重后的数组及相应的出现的频次（数量用counts来接收）</span></span><br><span class="line"><span class="built_in">print</span>(unique_words)</span><br><span class="line"><span class="built_in">print</span>(counts)</span><br></pre></td></tr></table></figure><pre><code>[1 2 3 4 5 6][1 2 3 2 1 1]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6.查找二维数组np.arange(9).reshape(3,3)每一行中的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a[ : , <span class="number">2</span> : ]) <span class="comment"># 数组已经有序，直接进行切片</span></span><br><span class="line"><span class="built_in">max</span> = np.<span class="built_in">max</span>(a, axis = <span class="number">1</span>) <span class="comment"># 或者利用np.max()方法，axsi = 1表示会对每一行做操作，沿着数组的第二维度（列）来取最大值</span></span><br><span class="line">                          <span class="comment">#（同理axis=0，就会取到每一列的最大值）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>) </span><br></pre></td></tr></table></figure><pre><code>[[2] [5] [8]][2 5 8]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7.计算数组a = np.array([1,2,3,2,3,4,3,4,5,6])和数组b = np.array([7,2,10,2,7,4,9,4,9,8])之间的欧式距离</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">b = np.array([<span class="number">7</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">dist1 = np.sqrt(np.<span class="built_in">sum</span>(np.square(a - b))) <span class="comment"># 欧式距离计算方式一,参数是numpy向量</span></span><br><span class="line">dist2 = np.linalg.norm(a - b) <span class="comment"># 方式二</span></span><br><span class="line"><span class="built_in">print</span>(dist1)</span><br><span class="line"><span class="built_in">print</span>(dist2)</span><br></pre></td></tr></table></figure><pre><code>12.52996408614166812.529964086141668</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8.查找数组np.array([7,2,10,2,7,4,9,4,9,8])中的第二大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">7</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>])</span><br><span class="line">b = np.sort(a) <span class="comment"># 对原数组进行升序排序，输出倒数第二个值即可</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(b[-<span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>[ 2  2  4  4  7  7  8  9  9 10]9</code></pre><hr><h3 id="四、参考文章"><a href="#四、参考文章" class="headerlink" title="四、参考文章"></a>四、参考文章</h3><p><a href="https://vimsky.com/examples/usage/python-numpy.savez.html">np.savez用法及代码示例</a></p><p><a href="https://blog.csdn.net/qq_41542989/article/details/109822290?ops_request_misc=&request_id=&biz_id=102&utm_term=python+numpy%E4%BA%A4%E6%8D%A2%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%A4%E8%A1%8C%E6%88%96%E8%80%85%E4%B8%A4%E5%88%97&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-109822290.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">Python+NumPy交换数组的两行或者两列</a></p><p><a href="https://blog.csdn.net/Ma15082777155/article/details/127755059?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84a%E5%92%8Cb%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B1%E5%85%83%E7%B4%A0%20python%20np.inte&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-127755059.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">如何获取数组a和b之间的共元素</a></p><p><a href="https://blog.csdn.net/xo3ylAF9kGs/article/details/117677283?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168282937816800213052127%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168282937816800213052127&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-117677283-null-null.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&utm_term=NumPy%20%E8%8E%B7%E5%8F%96%E5%94%AF%E4%B8%80%E5%85%83%E7%B4%A0%E3%80%81%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E3%80%81%E5%B1%95%E5%B9%B3%E6%95%B0%E7%BB%84&spm=1018.2226.3001.4187">NumPy 获取唯一元素、出现次数、展平数组</a></p><p><a href="https://blog.csdn.net/weixin_39561577/article/details/111788590?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168282966516800225550628%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=168282966516800225550628&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-111788590-null-null.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&utm_term=%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E6%AF%8F%E4%B8%80%E5%88%97%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC%20python%20max&spm=1018.2226.3001.4449">如何找到二维数组每一列中的最大值</a></p><p><a href="https://blog.csdn.net/baidu_41797613/article/details/121473828?ops_request_misc=&request_id=&biz_id=102&utm_term=numpy%E4%B8%AD%E8%AE%A1%E7%AE%97%E6%95%B0%E7%BB%84%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AC%A7%E5%BC%8F%E8%B7%9D%E7%A6%BB&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-121473828.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">numpy中计算数组之间的欧式距离</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-实践基础练习二（NumPy）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-实践基础练习二（NumPy）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化    实践基础练习二（NumPy）&quot;&gt;&lt;/a&gt;数据分析与可视化    实践</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="NumPy" scheme="https://ariesfun.gitee.io/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 实践基础练习一（NumPy）</title>
    <link href="https://ariesfun.gitee.io/posts/c3c6.html"/>
    <id>https://ariesfun.gitee.io/posts/c3c6.html</id>
    <published>2023-03-06T18:12:31.079Z</published>
    <updated>2023-04-30T04:17:17.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习一（NumPy）"><a href="#数据分析与可视化-实践基础练习一（NumPy）" class="headerlink" title="数据分析与可视化 实践基础练习一（NumPy）"></a>数据分析与可视化 实践基础练习一（NumPy）</h2><hr><h3 id="一、Numpy相关函数或属性"><a href="#一、Numpy相关函数或属性" class="headerlink" title="一、Numpy相关函数或属性"></a>一、Numpy相关函数或属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> np.array() <span class="comment"># 可用于创建n维数组      </span></span><br><span class="line"><span class="number">2.</span> np.arange(n) <span class="comment"># 创建递增数组，也可指定起始和终止元素的范围（默认0到n-1）     </span></span><br><span class="line"><span class="number">3.</span> np.ones(shape) <span class="comment"># 创建全1数组，可自定义数组的尺寸（形状）</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> np.zeros(shape) <span class="comment"># 创建全0数组，可自定义尺寸     </span></span><br><span class="line"><span class="number">5.</span> np.full(shape，val) <span class="comment"># 创建多维尺寸数组，val值可指定元素值   </span></span><br><span class="line"><span class="number">6.</span> np.eye(n) <span class="comment"># 创建一个n阶的单位方阵，对角线上全为1，其余为0 </span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> np.diag(n) <span class="comment"># 以一维数组的返回方阵的对角线上元素</span></span><br><span class="line">  <span class="comment"># 对于一维数组会返回方阵（对角线上为一维元素值，其余元素为0）</span></span><br><span class="line">    </span><br><span class="line"><span class="number">8.</span> np.linspace() <span class="comment"># 创建等差一维数组</span></span><br><span class="line">  <span class="comment"># 返回介于某个区间等间距分布的数，最后1个参数表示输出元素的总个数</span></span><br><span class="line">    </span><br><span class="line"><span class="number">9.</span> np.logspace() <span class="comment"># 创建等比一维数组 </span></span><br><span class="line"></span><br><span class="line"><span class="number">10.</span> np.random.randint() <span class="comment"># 创建含起始和终止点的的整型数组，其参数size可自定义尺寸   </span></span><br><span class="line"><span class="number">11.</span> .reshape(shape) <span class="comment"># 重塑数组的尺寸（多维）原数组不变，利用数组元素个数size唯一    </span></span><br><span class="line"><span class="number">12.</span> .resize(shape) <span class="comment"># 重塑数组的尺寸，会修改原数组</span></span><br><span class="line"></span><br><span class="line"><span class="number">13.</span> .swapaxes(ax1,ax2) <span class="comment">#将数组n个维度中的2个维度进行调换   </span></span><br><span class="line"><span class="number">14.</span> .flatten() <span class="comment"># 对数组进行降维，返回折叠后的一维数组，原数组不变       </span></span><br><span class="line"><span class="number">15.</span> .astype() <span class="comment"># 强制数据类型转换，会创建新的数组（是原始数据的一个拷贝）</span></span><br><span class="line"></span><br><span class="line"><span class="number">16.</span> .tolist() <span class="comment"># 数组转列表       </span></span><br><span class="line"><span class="number">17.</span> np.hstack() <span class="comment"># 横向合并      </span></span><br><span class="line"><span class="number">18.</span> np.vstack() <span class="comment"># 纵向合并</span></span><br><span class="line"></span><br><span class="line"><span class="number">19.</span> np.concatenate() <span class="comment"># 参数axis = 0时按行合并 </span></span><br><span class="line">  <span class="comment"># 参数axis = 1时按列合并（等价于横向合并np.hstack()）</span></span><br><span class="line">    </span><br><span class="line"><span class="number">20.</span> np.hsplit() <span class="comment"># 按列分隔，eg. np.hsplit(arr, 2) # 数组总是沿着第二个轴/维度分割（按列），等价于axis = 1     </span></span><br><span class="line"><span class="number">21.</span> np.vsplit() <span class="comment"># 按行分隔</span></span><br><span class="line"></span><br><span class="line"><span class="number">22.</span> np.split() <span class="comment"># 对数组进指定方向的分隔        </span></span><br><span class="line"><span class="number">23.</span> .tanspose() <span class="comment"># 对数组进行转置，参数是轴编号组成的元组（行 —&gt; 列）  </span></span><br><span class="line"><span class="number">24.</span> .T <span class="comment"># 还可利用数组的T属性来转置</span></span><br></pre></td></tr></table></figure><hr><h3 id="二、练习题目"><a href="#二、练习题目" class="headerlink" title="二、练习题目"></a>二、练习题目</h3><p><strong>基础题：</strong></p><p>1、创建一个元素为从10到49的ndarray对象D1；</p><p>2、将D1的所有元素位置反转；</p><p>3、使用np.random.random创建一个10 x 10的ndarray对象，并打印出最大最小元素；</p><p>4、创建一个10 x 10的ndarray对象，且矩阵边界全为1，里面全为0；</p><p>5、创建一个范围在(0,1)之间的长度为12的等差数列；</p><p>6、创建一个长度为10的随机数组并排序；</p><p>7、给定一个4维矩阵，如何得到最后两维的和？</p><p>8、如何将数组a = np.arange(10).reshape(2,-1)和数组b = np.repeat(1, 10).<br>reshape(2,-1)水平堆叠？</p><p><strong>补充题：</strong></p><p>9、有arr = np.arange(12).reshape(3,4)，若定义mask = np.array([1,0,1],dtype = np.bool)，则arr[mask,1] 对应的元素是？</p><p>10、有arr = np.arange(12).reshape(3,4)，则arr[(0,1),(1,3)]对应的值是？</p><p>11、将数组arr中所有的奇数置为-1对应的语句是？</p><p>12、a = np.arange(8).reshape(2,4)，np.hsplit(a,2)返回值是？</p><p>13、找出数组np.array([1,2,1,1,3,4, 3,1,1,2,1,1,2])中第五个1出现的位置的代码；</p><hr><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><h4 id="（1）基础题（1-8）"><a href="#（1）基础题（1-8）" class="headerlink" title="（1）基础题（1 - 8）"></a>（1）基础题（1 - 8）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、创建一个元素为从10到49的ndarray对象D1；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">D1 = np.arange(<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;D1:&#x27;</span>, D1)</span><br></pre></td></tr></table></figure><pre><code>D1: [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2、将D1的所有元素位置反转；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">D1 = np.arange(<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line">a = D1[: : -<span class="number">1</span>] <span class="comment"># 逆序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>, a)</span><br></pre></td></tr></table></figure><pre><code>a: [49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3、使用np.random.random创建一个10*10的ndarray对象，并打印出最大最小元素；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.random( (<span class="number">10</span>, <span class="number">10</span>) )</span><br><span class="line"><span class="comment"># print(&#x27;a:&#x27;, a)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;MaxValue:&#x27;</span>, a.<span class="built_in">max</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;MinValue:&#x27;</span>, a.<span class="built_in">min</span>())</span><br></pre></td></tr></table></figure><pre><code>MaxValue: 0.9627995218664797MinValue: 0.005820752655498862</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4、创建一个10*10的ndarray对象，且矩阵边界全为1，里面全为0；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.zeros( (<span class="number">10</span>,<span class="number">10</span>) )</span><br><span class="line">a[<span class="number">0</span>, : ] = a[<span class="number">9</span>, : ] = a[ : , <span class="number">0</span>] = a[ : , <span class="number">9</span>] = <span class="number">1</span> <span class="comment"># 获取第1行、第9行、第1列、第9列的数组值将其改为1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5、创建一个范围在(0,1)之间的长度为12的等差数列；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12</span>) <span class="comment"># 第3个参数为元素个数，从0到1生成了12个等间隔的数</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[0.         0.09090909 0.18181818 0.27272727 0.36363636 0.45454545 0.54545455 0.63636364 0.72727273 0.81818182 0.90909091 1.        ]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6、创建一个长度为10的随机数组并排序；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.random(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(np.sort(a)) <span class="comment"># 升序输出</span></span><br></pre></td></tr></table></figure><pre><code>a: [0.46602273 0.68013528 0.39960639 0.59603541 0.30224607 0.43446988 0.84969599 0.80521228 0.6243939  0.43140521][0.30224607 0.39960639 0.43140521 0.43446988 0.46602273 0.59603541 0.6243939  0.68013528 0.80521228 0.84969599]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7、给定一个4维矩阵，如何得到最后两维的和？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.ones( (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) ) <span class="comment"># 定义1个三维的含2个（3行4列）的全一数组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Sum:&#x27;</span>, a.<span class="built_in">sum</span>(axis = (<span class="number">2</span>, <span class="number">3</span>)) ) <span class="comment"># axis=(2, 3)) 表示对第3个和第4个维度求和</span></span><br></pre></td></tr></table></figure><pre><code>a: [[[[1. 1. 1. 1.]   [1. 1. 1. 1.]   [1. 1. 1. 1.]]  [[1. 1. 1. 1.]   [1. 1. 1. 1.]   [1. 1. 1. 1.]]]]Sum: [[12. 12.]]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8、如何将数组a = np.arange(10).reshape(2,-1)和数组b = np.repeat(1, 10).reshape(2,-1)水平堆叠？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>, a)</span><br><span class="line">b = np.repeat(<span class="number">1</span>, <span class="number">10</span>).reshape(<span class="number">2</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b:&#x27;</span>, b)</span><br><span class="line"></span><br><span class="line">c= np.hstack( (a, b) ) <span class="comment"># np.hstack是横向合并 或用 np.concatenate((a, b), axis = 1) 按列合并</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c:&#x27;</span>, c)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a: [[0 1 2 3 4]</span><br><span class="line">[5 6 7 8 9]]</span><br><span class="line">b: [[1 1 1 1 1]</span><br><span class="line">[1 1 1 1 1]]</span><br><span class="line">c: [[0 1 2 3 4 1 1 1 1 1]</span><br><span class="line">[5 6 7 8 9 1 1 1 1 1]]</span><br></pre></td></tr></table></figure><h4 id="（2）补充题型（9-13）"><a href="#（2）补充题型（9-13）" class="headerlink" title="（2）补充题型（9 - 13）"></a>（2）补充题型（9 - 13）</h4><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 9、有arr = np.arange(12).reshape(3,4)，若定义mask = np.array([1,0,1],dtype = np.bool)，则arr[mask,1] 对应的元素是</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">mask = np.array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],dtype = np.<span class="built_in">bool</span>) <span class="comment"># mask是布尔数组表示的值为Ture,False,True</span></span><br><span class="line"><span class="built_in">print</span>(a[mask,<span class="number">1</span>]) <span class="comment"># 取出第1行和第3行的第2列元素</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1 9]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10、有arr = np.arange(12).reshape(3,4)，则arr[(0,1),(1,3)]对应的值是</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a[(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">3</span>)]) <span class="comment"># 会得到4个值，对应到a[0,1] = 1, a[1,3] = 7, a[(0, 1),(1, 3)]的值是[1, 7]</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">2</span>,(<span class="number">0</span>, <span class="number">3</span>)]) <span class="comment"># 输出第二行，与第一列和四列相交处元素的值</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1 7]</span><br><span class="line">[[4 7]]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 11、将数组a中所有的奇数置为-1对应的语句是</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.randint(<span class="number">1</span>,<span class="number">12</span>, (<span class="number">3</span>,<span class="number">4</span>) )</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a[a % <span class="number">2</span> != <span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[ 8 10  9  2]</span><br><span class="line">[ 5  6  4  8]</span><br><span class="line">[10  6  7  7]]</span><br><span class="line">[[ 8 10 -1  2]</span><br><span class="line">[-1  6  4  8]</span><br><span class="line">[10  6 -1 -1]]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 12、a = np.arange(8).reshape(2,4)，np.hsplit(a,2)返回值是</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(np.hsplit(a, <span class="number">2</span>)) <span class="comment"># 对数组按列进行分割，将一个数组等分。数组总是沿着第二个轴分割（按列）</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[0 1 2 3]</span><br><span class="line">[4 5 6 7]]</span><br><span class="line">[array([[0, 1],</span><br><span class="line">[4, 5]]), </span><br><span class="line">array([[2, 3],</span><br><span class="line">[6, 7]])]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 13、找出数组np.array([1,2,1,1,3,4,3,1,1,2,1,1,2])中第五个1出现的位置的代码。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">index = np.where(a == <span class="number">1</span>)[<span class="number">0</span>][<span class="number">4</span>] <span class="comment"># np.where函数返回的是一个元组，包含所有符合条件的元素的行索引和列索引</span></span><br><span class="line"><span class="built_in">print</span>(index)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><hr><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p>视频：</p><p><a href="https://www.bilibili.com/video/BV1Wy4y1h7ii/?share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">【一个10分钟的numpy入门教程】</a></p><p><a href="https://www.bilibili.com/video/BV1xK411X7ZQ/?share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">【Python Numpy入门精华】</a></p><p>文章：</p><p><a href="https://numpy.org/doc/">NumPy官方文档</a></p><p><a href="https://blog.csdn.net/weixin_46020624/article/details/104543453?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168282769516800184185266%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168282769516800184185266&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-104543453-null-null.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&utm_term=Numpy%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE%E7%AE%80%E7%AD%94&spm=1018.2226.3001.4187">Numpy经典题目简答</a></p><p><a href="https://blog.csdn.net/qq_18351157/article/details/107049622?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168282777716800213077049%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=168282777716800213077049&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-107049622-null-null.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&utm_term=Numpy%E4%BD%BF%E7%94%A8sort%E5%92%8Cargsort%E5%87%BD%E6%95%B0%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F&spm=1018.2226.3001.4187">Numpy使用sort和argsort函数进行排序</a></p><p><a href="https://blog.csdn.net/u011475210/article/details/77770751?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168282787316800225576993%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168282787316800225576993&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-77770751-null-null.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&utm_term=Python3%EF%BC%9Anumpy%E6%A8%A1%E5%9D%97%E4%B8%AD%E7%9A%84argsort()%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">Python3：numpy模块中的argsort()函数</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-实践基础练习一（NumPy）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-实践基础练习一（NumPy）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 实践基础练习一（NumPy）&quot;&gt;&lt;/a&gt;数据分析与可视化 实践基础练习一（</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="NumPy" scheme="https://ariesfun.gitee.io/tags/NumPy/"/>
    
  </entry>
  
</feed>
