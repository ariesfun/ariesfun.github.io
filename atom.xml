<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AriesfunのBlog</title>
  
  <subtitle>欢迎来到我の小破站!</subtitle>
  <link href="https://ariesfun.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://ariesfun.gitee.io/"/>
  <updated>2023-06-16T19:14:39.179Z</updated>
  <id>https://ariesfun.gitee.io/</id>
  
  <author>
    <name>Ariesfun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux基础 第五讲 Git</title>
    <link href="https://ariesfun.gitee.io/posts/43cd.html"/>
    <id>https://ariesfun.gitee.io/posts/43cd.html</id>
    <published>2023-06-15T17:17:11.987Z</published>
    <updated>2023-06-16T19:14:39.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux基础-第五讲-Git"><a href="#Linux基础-第五讲-Git" class="headerlink" title="Linux基础 第五讲 Git"></a>Linux基础 第五讲 Git</h2><h2 id="1-Git教程"><a href="#1-Git教程" class="headerlink" title="1.Git教程"></a>1.Git教程</h2><p><a href="git.acwing.com">AcWing代码托管平台</a></p><p><a href="https://learngitbranching.js.org/?locale=zh_CN">Git可视化学习网站-游戏</a></p><p><a href="https://gitee.com/all-about-git">Git大全 - 教程综合</a></p><hr><h3 id="1-1-Git基本概念"><a href="#1-1-Git基本概念" class="headerlink" title="1.1 Git基本概念"></a>1.1 Git基本概念</h3><p>Git 是一个版本控制工具，可以记录我们每次提交到 Git 中的版本，便于版本控制；上传到云端可以对本地的Git版本进行存档，以及进行多人协作开发。</p><p><strong>Git是用树的结构来维护所有的版本记录，最开始节点是一个空的根节点。</strong></p><p><strong>HEAD根节点会始终指向最新提交的那个节点</strong>。</p><p>概念</p><p><strong>工作区：仓库的目录</strong>。</p><p><strong>暂存区</strong>：<strong>数据暂时存放的区域</strong>，<strong>类似于工作区写入版本库前的缓存区</strong>。</p><p>工作区、暂存区都是独立于各个分支的。</p><p><strong>版本库：存放所有已经提交到本地仓库的代码版本。</strong></p><p><strong>版本结构：树结构，树中每个节点代表一个代码版本。</strong></p><hr><h3 id="1-2-Git常用命令"><a href="#1-2-Git常用命令" class="headerlink" title="1.2 Git常用命令"></a>1.2 Git常用命令</h3><p><strong>个人开发最最最最常用的4个git命令！！！</strong>只使用<code>master</code>分支即可</p><p><code>git pull</code>        <code>git add .</code>          <code>git commit -m &quot;xxx&quot;</code>        <code>git push</code></p><hr><p><strong>协作开发会用到的命令！！</strong></p><h4 id="Git全局配置"><a href="#Git全局配置" class="headerlink" title="Git全局配置"></a>Git全局配置</h4><p>在使用Git服务之前，你需要进行全局配置</p><p><code>git config --global user.name xxx</code>：设置全局用户名</p><p><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址</p><p>设置的信息记录会存储在<code>~/.gitconfig</code>文件中</p><hr><h4 id="Git常用操作"><a href="#Git常用操作" class="headerlink" title="Git常用操作"></a>Git常用操作</h4><p>你需要新建一个项目目录 eg. <code>project/</code>，</p><p><code>git init</code>：将当前目录配置成git仓库，信息记录在隐藏的<code>.git</code>文件夹中</p><p>目录里的文件被修改后，<strong>需要将文件从工作区添加到暂存区并进行持久化</strong></p><p><code>git add XXX</code>：单独将XXX文件添加到暂存区,可添加多个文件或目录，用空格隔开</p><p>这两个命令，通常一起使用</p><p><code>git add .</code>：<strong>将所有待加入暂存区的文件加入暂存区</strong></p><p><code>git commit -m &quot;这次提交的备注信息&quot;</code>：<strong>将暂存区的内容提交到当前分支,进行持久化</strong></p><p><code>git status</code>：<strong>查看当前仓库状态</strong></p><p><code>git diff XXX</code>：查看XXX文件的工作区相对于暂存区对应的文件的差异</p><p><code>git diff HEAD</code>:  显示工作区与当前分支最新commit提交之间的差异</p><p><code>git log</code>：<strong>查看当前分支的所有版本</strong>，按<code>q</code>退出查看状态</p><p><code>git log --oneline</code> 或 <code>git log --pretty=oneline</code>：让日志格式化显示在一行</p><p>HEAD会指向最后一次持久化操作的节点，<strong>即HEAD指向最新的版本</strong></p><p><code>git log --stat</code>：显示 commit 历史，以及每次 commit 发生变更的文件</p><hr><h4 id="删除-撤销命令"><a href="#删除-撤销命令" class="headerlink" title="删除/撤销命令"></a>删除/撤销命令</h4><p><code>git rm --cached XXX</code>：<strong>将文件从仓库索引目录中删掉</strong>，不希望管理这个文件</p><p><code>git restore --staged XXX</code>：<strong>将XXX从暂存区里移除，文件内容不会被修改</strong></p><p><code>git restore XXX</code>：<strong>可将暂存区的文件回滚</strong></p><p><code>git checkout — XXX</code> 或 <code>git restore XXX</code>：将XXX文件<strong>尚未加入暂存区的修改全部撤销，类似ctrl+z</strong></p><hr><h4 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a>代码回滚</h4><p><code>git reflog</code>：查看HEAD指针的移动历史（包括被回滚的版本）</p><p><code>git reset --hard HEAD^ </code> 或 <code>git reset --hard HEAD~</code>：将代码库回滚到上一个版本</p><ul><li><p><code>git reset --hard HEAD^^</code>：往上回滚两次”^^”，以此类推</p></li><li><p><code>git reset --hard HEAD~100</code>：往上回滚100个版本</p></li><li><p><code>git reset --hard 版本号</code>：回滚到某一特定版本(版本号是用<code>git log</code> 看到的commit前7位字符)</p></li></ul><hr><h4 id="创建-合并分支"><a href="#创建-合并分支" class="headerlink" title="创建/合并分支"></a>创建/合并分支</h4><p><code>git checkout -b branch_name</code>：<strong>创建并切换到<code>branch_name</code>这个分支</strong></p><p><code>git branch branch_name</code>：<strong>创建新分支<code>branch_name</code></strong></p><p><code>git checkout branch_name</code>：<strong>切换到<code>branch_name</code>这个分支</strong></p><p><code>git branch</code>：查看所有分支和当前所处分支</p><p><code>git branch -r </code>： -r，remote 查看所有远程分支</p><p><code>git branch -a</code>： -a，all 查看所有分支，包括本地分支和远程分支</p><p><code>git merge branch_name</code>：<strong>将分支<code>branch_name</code>合并到当前分支上</strong></p><p><strong>(若分支合并后有冲突，需要自己手动解决)</strong></p><p><code>git branch -d branch_name</code>：<strong>删除本地仓库的<code>branch_name</code>分支</strong></p><p><code>git pull</code>：<strong>将远程仓库的当前分支与本地仓库的当前分支合并，从云端拉回本地</strong></p><ul><li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li></ul><p>ps: 多人协作开发同一个分支时，<br>第一个人push提交后，第二个人也push提交了会有冲突，需要第二人先pull新版本后，合并本地修改冲突后，再push自己的代码。</p><hr><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>你需要再远程仓库创建一个仓库，并配置SSH将主机的公钥填写至远程仓库中。</p><p><code>git remote add origin SSH克隆的地址 </code>：将本地仓库关联到远程仓库</p><p>连接gitlab时，进行<code>git clone</code>时，出现<u>fatal: remote origin already exists.</u></p><p>需要先<code>git remote remove origin</code>，然后再关联远程仓库</p><p><code>git push -u </code>：(第一次需要-u，upstream上传流，以后不需要)，<code>git push</code><strong>将当前分支推送到远程仓库</strong></p><ul><li><code>git push origin branch_name</code>：<strong>将本地的某个分支推送到远程仓库</strong></li></ul><p><code>git clone git@git.acwing.com:xxx/XXX.git</code>：<strong>将远程仓库XXX下载到本地，比如用另一台电脑开发</strong></p><p><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</p><p><code>git push -d origin branch_name</code>：<strong>删除远程仓库的<code>branch_name</code>分支</strong></p><p>(<code>git branch -d branch_name</code>：<strong>删除本地仓库的<code>branch_name</code>分支</strong>)</p><p>​    </p><p><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：</p><p>将远程的<code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应，<strong>两分支名最好相同</strong></p><p><code>git checkout -t origin/branch_name </code>将远程的<code>branch_name</code>分支拉取到本地</p><hr><h4 id="Stash栈操作"><a href="#Stash栈操作" class="headerlink" title="Stash栈操作"></a>Stash栈操作</h4><p>使用 <code>Stash</code> 将我们目前工作区和暂存区中未提交的修改添加进去。等处理完一些线上的问题再把刚才的工作的文件从 <code>Stash</code> 中弹出来继续开发，</p><p><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</p><p><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</p><p><code>git stash drop</code>：删除栈顶存储的修改</p><p><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</p><p><code>git stash list</code>：查看栈中所有元素</p><hr><h2 id="2-作业"><a href="#2-作业" class="headerlink" title="2.作业"></a>2.作业</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">homework 5 create  # 可以重新创建所有lesson_5的作业</span><br><span class="line">homework 5 test  # 可以评测lesson_5的所有作业</span><br></pre></td></tr></table></figure><p>注意： 本次作业的10个题目不是独立的，每个题目会依赖于前一个题目，因此评测时如果当前题目错误，则不再评测后续题目。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">创建好作业后，先进入文件夹/home/acs/homework/lesson_5/，然后：</span><br><span class="line"></span><br><span class="line">(0) 在当前目录下创建文件夹homework，并将homework目录配置成git仓库。后续作业均在homework目录下操作；</span><br><span class="line"></span><br><span class="line">(1) 创建文件readme.txt，内容包含一行：111；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line"></span><br><span class="line">(2) 在readme.txt文件末尾新增一行：222；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line"></span><br><span class="line">(3) 创建文件夹：problem1和problem2；</span><br><span class="line">创建文件problem1/main.cpp。文件内容为下述链接中的代码：https://www.acwing.com/problem/content/submission/code_detail/7834813/；</span><br><span class="line">创建文件problem2/main.cpp。文件内容为下述链接中的代码：https://www.acwing.com/problem/content/submission/code_detail/7834819/；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line"></span><br><span class="line">(4) 删除文件夹problem2；</span><br><span class="line">创建文件夹problem3；</span><br><span class="line">创建文件problem3/main.cpp。文件内容为下述链接中的代码：https://www.acwing.com/problem/content/submission/code_detail/7834841/；</span><br><span class="line">将readme.txt中最后一行222删掉，然后添加一行333；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line"></span><br><span class="line">(5) 在https://git.acwing.com/上注册账号并创建仓库，仓库名称为homework；</span><br><span class="line">将本地git仓库上传到AC Git云端仓库；</span><br><span class="line"></span><br><span class="line">(6) 创建并切换至新分支dev；</span><br><span class="line">在readme.txt文件中添加一行444；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line">将dev分支推送至AC Git远程仓库；</span><br><span class="line"></span><br><span class="line">(7) 切换回master分支；</span><br><span class="line">在readme.txt文件中添加一行555；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line"></span><br><span class="line">(8) 将dev分支合并到master分支；</span><br><span class="line">手动处理冲突，使readme文件最终内容包含4行：111、333、555、444；</span><br><span class="line">将修改提交一个commit；</span><br><span class="line"></span><br><span class="line">(9) 将master分支的版本库push到AC Git云端仓库；</span><br><span class="line">登录myserver服务器（4. ssh作业中配置的服务器）；</span><br><span class="line">创建并清空文件夹：~/homework/lesson_5/；</span><br><span class="line">将AC Git云端仓库clone到~/homework/lesson_5/中；</span><br></pre></td></tr></table></figure><hr><h4 id="作业打卡地址"><a href="#作业打卡地址" class="headerlink" title="作业打卡地址"></a>作业打卡地址</h4><p><a href="https://www.acwing.com/activity/content/code/content/6575407/">homework_0</a>        <a href="https://www.acwing.com/activity/content/code/content/6575408/">homework_1</a>        <a href="https://www.acwing.com/activity/content/code/content/6575410/">homework_2</a>        <a href="https://www.acwing.com/activity/content/code/content/6575412/">homework_3</a>        <a href="https://www.acwing.com/activity/content/code/content/6575413/">homework_4</a></p><p><a href="https://www.acwing.com/activity/content/code/content/6575414/">homework_5</a>        <a href="https://www.acwing.com/activity/content/code/content/6575418/">homework_6</a>        <a href="https://www.acwing.com/activity/content/code/content/6575420/">homework_7</a>        <a href="https://www.acwing.com/activity/content/code/content/6575421/">homework_8</a>        <a href="https://www.acwing.com/activity/content/code/content/6575422/">homework_9</a></p><hr><h2 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3.参考资料"></a>3.参考资料</h2><p><a href="https://www.acwing.com/activity/content/57/">Linux基础课及讲义 - AcWing</a></p><p><a href="https://tonngw.com/2022/04/03/AcWing/%E7%AC%AC%205%20%E8%AE%B2%20Git/#10-Stash-%E6%93%8D%E4%BD%9C">Linux基础课 - 第 5 讲 Git - by Toggle</a></p><p><a href="https://www.acwing.com/blog/content/33309/">Linux笔记 5 - Git - by 溯光</a></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux基础-第五讲-Git&quot;&gt;&lt;a href=&quot;#Linux基础-第五讲-Git&quot; class=&quot;headerlink&quot; title=&quot;Linux基础 第五讲 Git&quot;&gt;&lt;/a&gt;Linux基础 第五讲 Git&lt;/h2&gt;&lt;h2 id=&quot;1-Git教程&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="Linux基础知识" scheme="https://ariesfun.gitee.io/categories/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Linux" scheme="https://ariesfun.gitee.io/tags/Linux/"/>
    
    <category term="Git" scheme="https://ariesfun.gitee.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>机器学习与数据挖掘 刷题练习(复习版)</title>
    <link href="https://ariesfun.gitee.io/posts/b9aa.html"/>
    <id>https://ariesfun.gitee.io/posts/b9aa.html</id>
    <published>2023-06-03T18:17:05.594Z</published>
    <updated>2023-06-04T03:20:07.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="机器学习与数据挖掘-刷题练习-复习版"><a href="#机器学习与数据挖掘-刷题练习-复习版" class="headerlink" title="机器学习与数据挖掘 刷题练习(复习版)"></a>机器学习与数据挖掘 刷题练习(复习版)</h2><p>闲言碎语：</p><p>本文是自己在准备数据挖掘结课考试时，自己整理的学习笔记，放在这存个档。</p><p>这门课我只是较为浅显的知道了一些理论概念，不过这门课的知识实践需要花费较多的时间和精力，是我本专业必</p><p>学的一门核心课，以后我可能还能用上哈~~</p><h2 id="一、单选题及判断"><a href="#一、单选题及判断" class="headerlink" title="一、单选题及判断"></a>一、单选题及判断</h2><hr><h3 id="1-数据"><a href="#1-数据" class="headerlink" title="1.数据"></a><strong>1.数据</strong></h3><p>1.不属于<u>数据的属性类型</u>的是，<strong>相异</strong></p><p>数据的属性类型包括<u>标称、序数、区间和比率等四种</u></p><p>2.原始数据<u>存在的几个问题</u>不包括，<strong>不重复</strong></p><p><strong>数据挖掘(Data Mining)就是从大量的、不完全的、有噪声的、模糊的</strong>、随机的实际应用数据中,提取隐含在其中的、人们事先不知道的、但又是潜在有用的信息和知识的过程</p><p><strong>对于数据挖掘中的原始数据，存在的问题有</strong>？ABCD</p><p><strong>A. 不一致    B. 重复    C. 不完整    D. 含噪声</strong></p><p>3.数据挖掘中使用的数据的原则不包括，<strong>保留唯一性</strong></p><p>4.<strong>数据预处理的效果</strong>直接决定了机器学习的结果质量</p><p>5.噪声数据的产生原因主要有？ABC</p><ul><li><strong>A. 数据采集设备有问题</strong></li><li><strong>B. 在数据录入过程中发生了人为或计算机错误</strong></li><li><strong>C. 数据传输过程中发生错误</strong></li></ul><p>6.数据挖掘的任务包含（ ABCDE）</p><ul><li><strong>A. 关联分析</strong></li><li><strong>B. 时序模式分析</strong></li><li><strong>C. 聚类</strong></li><li><strong>D. 分类</strong></li><li><strong>E. 偏差检测</strong> </li></ul><p>7.在数据集成时，来自多个数据源的现实世界实体的表达形式是不一样的，不一定是匹配的，<u>要考虑实体识别问题和属性冗余问题，从而把源数据在最低层上加以转换、提炼和集成。</u> <strong>A. 对</strong></p><p>8.给定 n 个数据点，如果其中一半用于训练，另一半用于测试，则训练误差和测试误差之间的差别会<strong>随着 n的增加而减小</strong>。 <strong>A. 对</strong></p><p>9.知识发现（KDD）包含<u>数据准备、数据挖掘、结果评价</u>三个阶段。 <strong>对的</strong></p><p>10.<u>通过数据规约</u>，可以达到（  ABC ） </p><ul><li><strong>A. 降低无效、错误数据对建模的影响，提高建模的准确性</strong></li><li><strong>B. 少量且具代表性的数据将大幅缩减数据挖掘所需的时间</strong></li><li><strong>C. 降低储存数据的成本</strong></li></ul><p>11.<strong>数据预处理方法</strong>主要有？ABCD</p><ul><li><strong>A. 数据清洗</strong></li><li><strong>B. 数据集成</strong></li><li><strong>C. 数据变换</strong></li><li><strong>D. 数据归约</strong></li></ul><p>11.1数据挖掘的<u>数据准备阶段</u>的主要工作包含（ ABCDE）。</p><ul><li><strong>A. 消除噪声</strong></li><li><strong>B. 推导计算缺值数据</strong></li><li><strong>C. 消除重复记录</strong></li><li><strong>D. 数据转换</strong></li><li><strong>E. 消减数据维数或降维</strong></li></ul><p>13.<strong>特征选择可以？****ABC</strong></p><ul><li><strong>A. 选择区分能力强的数据</strong></li><li><strong>B. 降低模型分析的时间复杂度</strong></li><li><strong>C. 减少无效特征</strong></li></ul><p>14.<strong>信息增益度量</strong>偏向具有许多输出的测试，也就是说它<strong>倾向于选择具有大量值的属性</strong>。 <strong>A. 对</strong></p><hr><h3 id="2-数据仓库"><a href="#2-数据仓库" class="headerlink" title="2.数据仓库"></a><strong>2.数据仓库</strong></h3><p>1.以下各项均是针对数据仓库的不同说法,你<strong>认为正确的有</strong>，ABCD</p><ul><li><u>B. 数据仓库是一切商业智能系统的基础</u></li><li><u>C. 数据仓库是面向业务的,支持联机事务处理(OLTP)</u></li><li><u>D. 数据仓库支持决策而非事务处理</u></li><li><u>E. 数据仓库的主要目标就是帮助分析,做长期性的战略制定</u></li></ul><p>2.关于OLAP和OLTP的说法,<strong>下列不正确的是</strong>(   A   ) </p><ul><li><strong>A.  OLAP事务量大,但事务内容比较简单且重复率高.</strong></li><li>B. OLAP的最终数据来源与OLTP不一样.</li><li>C. OLTP面对的是决策人员和高层管理人员.</li><li>D. OLTP以应用为核心,是应用驱动的.</li></ul><p>3.<strong>OLAP技术的核心是，多维分析</strong></p><p>4<u>.数据仓库是随着时间变化的,下面的描述不正确的是</u>(  C   ) </p><ul><li><p>A. 数据仓库随时间的变化不断增加新的数据内容;</p></li><li><p>B. 捕捉到的新数据会覆盖原来的快照;</p></li><li><p><strong>C. 数据仓库随事件变化不断删去旧的数据内容;</strong></p></li><li><p>D. 数据仓库中包含大量的综合数据,这些综合数据会随着时间的变化不断地进行重新综合</p></li></ul><hr><h3 id="3-机器学习方法"><a href="#3-机器学习方法" class="headerlink" title="3.机器学习方法"></a><strong>3.机器学习方法</strong></h3><p>1.<strong>移动运营商对客户的流失进行预测</strong>,可以使用下面哪种机器学习方法比较合适 ,   <strong>多层前馈网络</strong></p><p>2.下列哪些模型可以用来判断特征的重要性？（ <strong>ABDE</strong>   ） </p><ul><li><strong>A. 随机森林（Random Forest）</strong></li><li><strong>B. 线性回归（Linear Regression）</strong></li><li>C. 支持向量机（SVM）</li><li><strong>D. 方差分析（ANOVA）</strong></li><li><strong>E. 逻辑回归（LogisticRegression）</strong></li></ul><p>​                                            </p><p>3.<strong>机器学习</strong>是<u>人工智能里面一个非常重要的<strong>技术</strong></u>，<strong>深度学习</strong>是<u>机器学习里面的一种方法</u>。 <strong>A. 对</strong></p><p>4.下列哪些<strong>机器学习算法不需要做归一化处理</strong>(  CE    )</p><ul><li><strong>C. DecisionTree 决策树</strong></li><li><strong>E. Naive Bayes classifier 贝叶斯</strong></li></ul><p>5.<u>泛化能力是机器学习中衡量学习机性能好坏的一个重要指标</u>，主要是指学习机对预测样本<strong>进行正确预测的能力</strong>。<strong>A. 对</strong></p><hr><h3 id="4-装袋"><a href="#4-装袋" class="headerlink" title="4.装袋"></a><strong>4.装袋</strong></h3><p>1.<strong>Bagging</strong>的主要特点有，   ABD</p><p> <strong>A. 各基础分类器并行生成   B. 各基础分类器权重相同  D. 基于Bootstrap采样生成训练集</strong></p><p>2.对<strong>Boosting模型</strong>的描述正确的是，</p><p><strong>A.  采用串行训练模式    C.  通过改变训练集进行有针对性的学习</strong></p><p>3.<u>装袋法中每个样本被选中概率相同</u>,所以噪声数据的影响下降,<u>容易受过拟合的影响</u>( ) <strong>错误</strong></p><hr><h3 id="5-决策树"><a href="#5-决策树" class="headerlink" title="5.决策树"></a><strong>5.决策树</strong></h3><p>1.决策树中属性选择的方法有？BCD</p><p><strong>B. 信息增益 C. 信息增益率 D. GINI系数</strong></p><p>2.下面的决策树中，不能解决回归问题的是？ABC</p><p><strong>A. ID3 B. C4.5 C. C5.0</strong></p><p>3.0决策树模型<strong>不适合</strong>训练集数据量较大的情况。<strong>错的</strong></p><p>3.1<u>决策树不擅长处理非数值型数据</u>。<strong>错的</strong></p><p>3.2<u>逻辑回归分析需要对离散值做预处理</u>，决策树则不需要。( ）<strong>A. 对</strong></p><p>3.3决策树算法<strong>只能处理二分类</strong>，不能处理多分类。 <strong>错的</strong></p><p>4.DecisionTreeClassifier实现了决策树的构建，下列说法正确的有（ <strong>ABCD</strong> ） </p><ul><li><strong>A. 参数criterion的取值有gini，entropy两种。</strong></li><li><strong>B. 参数max_depth限定了决策树的最大深度，对于防止过拟合非常有用。</strong></li><li><strong>C. 参数min_samples_leaf 限定了叶子结点包含的最小样本数。</strong></li><li><strong>D. gini越小，表示纯度越高。</strong></li></ul><p>5.<u>有关决策树的分类方法</u>正确的是( B )。</p><p><strong>B.决策树可以用于发现多种样本的特征</strong></p><p>6.逻辑回归分析需要<strong>对离散值做预处理</strong>，决策树则不需要。( ）    <strong>A. 对</strong></p><hr><h3 id="6-随机森林"><a href="#6-随机森林" class="headerlink" title="6.随机森林"></a><strong>6.随机森林</strong></h3><p>1.下面哪些<u>超参数的增加可能会造成随机森林数据过拟合</u>？<strong>A. 树的数量  B. 树的深度</strong></p><p>2.下列关于**<u>随机森林的描述正确</u>**的是(ABCD)。</p><ul><li><strong>A.  与袋装法采用相同样本抽取方式</strong></li><li><strong>B.  每次从所有属性中随机抽取t个属性来训练分类器</strong></li><li><strong>C.  每次从所有样本中选取一定比例的样本来训练分类器</strong></li><li><strong>D.  可以使用不同的决策树的组合来构建分类模型</strong></li></ul><hr><h3 id="7-分类"><a href="#7-分类" class="headerlink" title="7.分类"></a><strong>7.分类</strong></h3><p>1.<strong>分类算法有C4.5</strong></p><p><strong>常用的分类算法包括</strong>（  ABCD），</p><p><strong>A. 决策树 B. 支持向量机 C. 贝叶斯网络 D. 神经网络</strong></p><p><u>解决分类问题的方法</u>包括？ <strong>ABCD</strong></p><p><strong>A. 决策树    B. 贝叶斯    C. 人工神经网络    D. 支持向量机</strong></p><p>2.以下属于<u>分类器评价或比较尺度</u>的有:     </p><p>​    <strong>A.预测准确度</strong><br>​    <strong>C.模型描述的简洁度</strong><br>​    <strong>D.计算复杂度</strong></p><p>3.哪些<u>不是最近邻分类器的特点</u>，</p><p><strong>C.  最近邻分类器基于全局信息进行预测</strong></p><p>4.通过<strong>聚集多个分类器的预测</strong>来提高分类准确率的技术称为， <strong>组合(ensemble)</strong></p><p>5.**<u>评估分类器预测能力的度量包括</u>**（      ） </p><ul><li><strong>A. 准确率</strong></li><li><strong>B. 灵敏度(又称为召回率)</strong></li><li><strong>C. 特效性</strong></li><li><strong>D. 精度</strong></li><li><strong>E. F1和Fβ</strong></li></ul><p>6.在评价<strong>不平衡类问题分类的度量方法</strong>有如下几种,( )</p><p><strong>A. F1度量</strong><br><strong>B. 召回率(recall)</strong><br><strong>C. 精度(precision)</strong><br><strong>D. 真正率(ture positive rate,TPR)</strong></p><p>7.一般来说，回归不用在分类问题上，但是也有特殊情况，<u>比如logistic 回归可以用来解决0/1分类问题。（  ）</u> <strong>A. 对</strong></p><p>8.<strong>分类是有监督的学习，聚类是无监督的学习</strong></p><p>9.<strong>受试者操作特征曲线</strong>(Receiver Operating Characteristic Curve，<strong>ROC</strong>)是一种反映分类模型敏感性和特异性连续变量的综合，<u>ROC的横坐标，纵坐标分别表示（        ）</u></p><p><strong>A. 假正例率（FPR），真正例率（TPR）</strong></p><p><strong>E. 假阳率（特异度），真阳率（灵敏度）</strong></p><p>10.<strong>组合方法</strong>可以通过学习和组合一系列个体（基）<strong>分类器模型</strong>来提高总体准确率，主要的组合方法有（   ABC  ）。 </p><p><strong>A. 装袋    B. 提升    C. 随机森林</strong></p><p>11.在谈到分类时，<u>数据元组</u>也称为？ABCD</p><ul><li><p><strong>A. 样本</strong></p></li><li><p><strong>B. 实例</strong></p></li><li><p><strong>C. 数据点</strong></p></li><li><p><strong>D. 对象</strong></p></li></ul><p>12.<u>数据分类是一个两阶段过程</u>，包括（ ）和分类阶段。<strong>学习阶段</strong></p><p>13.<u>分类器的构造与评估需要把标记的数据集划分成训练集和检验集</u>，典型方法包含（   ABCD  ）。 </p><ul><li><strong>A. 保持</strong></li><li><strong>B. 随机抽样</strong></li><li><strong>C. 交叉验证</strong></li><li><strong>D. 自助法</strong></li></ul><p>14.对回归问题和分类问题的评价 <strong>最常用的指标都是准确率和召回率</strong>。<strong>错误</strong></p><p>15.<strong>输出变量为有限个离散变量的预测问题</strong>是回归问题；输出变量<strong>为连续变量的预测问题是</strong>分类问题。<strong>B.错误</strong></p><p>15.1分类和回归都可用于预测，<strong>分类的输出是离散的类别值</strong>，而回归的输出是是连续值。 <strong>A. 对</strong></p><p>16.<strong>朴素贝叶斯算法</strong>是基于贝叶斯定理与特征条件独立假设的<strong>分类方法</strong>。<strong>A.对的</strong></p><p>17.<u>模型选择方法</u>主要有(     <strong>AB</strong>       )。</p><ul><li><strong>A. 正则化（Regularization）</strong></li><li><strong>B. 交叉验证（Cross Validation）</strong></li></ul><p>18.<strong>分类</strong>是预测数据对象的<u>离散类别</u>，<strong>预测</strong>是用于数据对象的<u>连续取值</u>。<strong>A. 对</strong></p><p>19.在分类型机器学习过程中,下面有关分类算法的选择<strong>说法错误的</strong>是( AD)。</p><ul><li><strong>A. 算法参数是默认调好的,分析过程不需要修改</strong></li><li>B. 分类算法的优劣需要通过实验比较才能确定</li><li>C. 分类算法对数据有一定的要求,一种算法不能解决所有的分类问题</li><li><strong>D. 分类算法的结果只要训练样本准确度高就可以使用了</strong></li></ul><hr><h3 id="8-聚类"><a href="#8-聚类" class="headerlink" title="8.聚类"></a><strong>8.聚类</strong></h3><p>1.当不知道数据所带标签时，可以使用哪种技术<strong>促使带同类标签的数据与带其他标签的数据相分离</strong>？<strong>（聚类）</strong></p><p>2.如何衡量聚类质量，<strong>需要考虑数据点间的连通性</strong></p><p>3.哪种聚类方法可以提供聚类树形图，<strong>层次聚类</strong></p><p>4.通过以下哪些指标我们可以<u>在层次聚类中寻找两个集群之间的差异</u>？ABC</p><p><strong>A. 单链 B. 完全链接 C. 平均链接</strong></p><p>5.聚类分析中，<strong>簇间距离可以定义为</strong>（ ABCD）</p><ul><li><u>A. 最短距离法（最大相似度）</u></li><li><u>B. 最长距离法（最小相似度）</u></li><li><u>C. 类平均法</u></li><li><u>D. 中心法（两类的两个中心点的距离为簇间距离）</u></li></ul><p><u>6.聚类系数的外部指标是指将聚类结果</u>和某个“参考模型”进行比较。<strong>A. 对</strong></p><p>7.<em><strong>DBSCAN</strong></em>(Density-Based Spatial Clustering of Applications with Noise)</p><p><strong>DBSCAN是一个比较有代表性的基于密度的聚类算法。</strong></p><p>DBSCAN在最坏情况下的<u>时间复杂度是，**$O(m^2)$**</u></p><p><u>DBSCAN是相对抗噪声的，并且能够处理任意形状和大小的簇</u>。<strong>对的</strong></p><p>7.1 使用Python的sklearn.cluster库中的<strong>DBSCAN算法进行聚类的时候</strong>，<u>参数eps和min_samples的描述正确的是（ ）。</u></p><ul><li><p><strong>B. eps越小，聚出来的类越多</strong></p></li><li><p><strong>C. min_samples越小，一个簇中包含的样本点越少</strong></p></li></ul><p>8.<strong>基于密度的聚类算法代表算法</strong>有（  ABC  ） </p><p><strong>A. DBSCAN算法    B. OPTICS算法    C. DENCLUE算法</strong></p><p>9.Python中<strong>层次聚类的函数</strong>是AgglomerativeClustering，<u>重要的参数包含</u>（  ABC ）。 </p><p><strong>A. n_clusters    B. affinity    C. linkage</strong></p><p>9.1层次聚类的函数AgglomerativeClustering中，<strong>linkage是类间距离的定义</strong>，其取值包含（ ABC） </p><ul><li><strong>A. ward</strong></li><li><strong>B. average</strong></li><li><strong>C. complete</strong></li></ul><p>10.哪些数据特性都是对聚类分析具有很强影响的。(   ABCD   )</p><ul><li><strong>A. 高维性</strong></li><li><strong>B. 规模</strong></li><li><strong>C. 稀疏性</strong></li><li><strong>D. 噪声和离群点</strong></li></ul><p>11.<strong>聚类分析</strong>是一种有监督的学习方法。<strong>B.错的</strong></p><p>12.<strong>影响聚类结果的主要因素有哪些</strong>（ ABCD ） </p><ul><li><strong>A. 分类准则</strong></li><li><strong>B. 相似性测度（度量）</strong></li><li><strong>C. 特征量选择</strong></li><li><strong>D. 量纲</strong></li></ul><p>13.<strong>层次聚类可分为“自顶向下”和“自底向上”</strong>两种策略；<strong>A.对的</strong></p><p>14.下列哪项<strong>不属于聚类分析的算法</strong>(D)</p><ul><li>A. K-Means</li><li>B. K-中心点</li><li>C. 系统聚类</li><li><strong>D. Apriori算法</strong></li></ul><p>15.某电商分析人员希望通过聚类方法定位代商家刷信用级别的违规者，以下哪些操作不应该进行？  BD</p><ul><li><strong>B. 对变量进行百分位秩转换</strong> </li><li><strong>D. 对变量进行分箱处理</strong> </li></ul><hr><h3 id="9-回归模型"><a href="#9-回归模型" class="headerlink" title="9.回归模型"></a><strong>9.回归模型</strong></h3><p>1.有关回归模型的系数,以下<strong>说法错误的是</strong>哪个(  B )。</p><p>A. 一元线性回归模型的系数可以使用最小二乘法求得<br><strong>B. 多元回归模型的系数可以使用梯度下降法求得</strong><br>C. 一元线性回归模型的系数大小和正负说明自变量对因变量的相对影响大小<br>D. 回归分析的目的是计算回归方程的系数,使得样本的输入和输出变量之间的关系能够合理拟合</p><p>2.回归分析中按照自变量和因变量的关系类型可以分为？（ <strong>AB</strong> ） </p><ul><li><strong>A. 线性回归分析</strong></li><li><strong>B. 非线性回归分析</strong></li></ul><p>3.线性模型的优点包括？（  <strong>ABCD</strong> ） </p><ul><li><strong>A. 形式简单、易于建模</strong></li><li><strong>B. 可解释性</strong></li><li><strong>C. 引入层级结构或高维映射</strong></li><li><strong>D. 线性模型中系数直观表达了各属性在预测中的重要性</strong></li></ul><p>4.(单选题)<strong>线性判别分析</strong>是一种（ A）的方法。<strong>A.降维</strong></p><p>5.对于非线性回归问题,以下说法<strong>错误的</strong>是哪个(A )。</p><ul><li><strong>A. 可以分别求单个自变量与因变量的回归方程,然后简单求这些方程的加权和</strong></li><li>B. 非线性回归方程的系数需要把其转化为线性回归方程才方便求解</li><li>C. 非线性回归模型的检验也可以使用R2</li><li>D. Logistic回归是一种典型的广义线性回归模型</li></ul><hr><h3 id="10-支持向量机SVM"><a href="#10-支持向量机SVM" class="headerlink" title="10.支持向量机SVM"></a><strong>10.支持向量机SVM</strong></h3><p>1.<u>线性SVM和一般线性分类器的区别</u>主要是，<strong>是否确保间隔最大化</strong></p><p>2.在SVM领域中，margin的含义是，<strong>间隔</strong></p><p>3.为什么通常要选择margin最大的分类器， <strong>望获得较低的测试误差</strong></p><p><u>4.SVM本身是应用于二分类的</u>，若处理多分类必须进行改进。</p><p>若采用**”one vs all”<strong>解决5分类问题，</strong>需要设计（5）个分类器**。 </p><p>若采用**”one vs one”<strong>解决5分类问题</strong>，需要设计（10）个分类器。**</p><p>4.1<strong>选择Logistic回归</strong>中的<strong>One-Vs-All</strong>方法中的哪个选项是真实的。（n&gt;2）</p><ul><li><strong>A. 需要在n类分类问题中适合n个模型</strong></li></ul><p>5.假设超平面为w<em>x+b=0，其margin的大小为（ ）。*<em>2/|w|</em></em></p><p>6.<u>支持向量</u>（support vectors）指的是（ ）,<strong>决定分类面可以平移的范围的数据点</strong></p><p>7.<u>支持向量机SVM</u>是一种（    ）算法  <strong>小样本下的统计机器学习</strong></p><p>8.在SVM当中，主要的运算形式是（ ）。<strong>向量内积</strong></p><p>9.（  ）是定义在特征空间上的、间隔最大、<u>支持核技巧的分类器</u>。 <strong>SVM支持向量机</strong></p><p>10.对于SVM，<u>在映射后的高维空间直接进行计算的主要问题是</u>，<strong>计算复杂度高</strong></p><p>11.以下关于<u>SVM支持向量机</u>的说法正确的是 （  )。</p><ul><li><strong>C. SVM方法简单，鲁棒性较好</strong></li><li><strong>D. SVM分类面取决于支持向量</strong></li></ul><p>12.<u>支持向量机是一个分类器</u>，超平面上的数据是支持向量，超平面以外的数据可以辅助分类。<strong>错的</strong></p><hr><h3 id="11-K-Means-K均值算法"><a href="#11-K-Means-K均值算法" class="headerlink" title="11.K-Means(K均值算法)"></a><strong>11.K-Means(K均值算法)</strong></h3><p>1.为了在K均值算法中找到簇的最优值，可以使用 <strong>Elbow法</strong>，关注的就是方差百分比</p><p>2.K均值聚类时，<u>初始化不良会导致收敛速度差</u> <strong>A. 对</strong></p><p>3.<u>可以试着运行不同的质心初始化算法</u>，可以获得和全局最小值有关的K均值算法的良好结果。<strong>A. 对</strong></p><p>4.在对数据集执行K均值聚类分析以后，你得到了下面的树形图。从树形图中不能得出那些结论呢？（    ） </p><p><img src="https://p.ananas.chaoxing.com/star3/origin/688fdc316ba97d6a0ca155d7da81a06e.png" alt="img"> </p><ul><li>A. 在聚类分析中有28个数据点</li><li>B. 被分析的数据点里最佳聚类数是4</li><li>C. 使用的接近函数是平均链路聚类</li><li><strong>D. 对于上面树形图的解释不能用于K均值聚类分析</strong></li></ul><p>5.K-means算法的缺点有（  ABCD  ）</p><ul><li><strong>A. 只有当簇均值有定义的情况下，k均值方法才能使用。</strong></li><li><strong>B. 用户必须首先给定簇数目。</strong></li><li><strong>C. 不适合发现非凸形状的簇，或者大小差别很大的簇。</strong></li><li><strong>D. 对噪声和离群点数据敏感。</strong></li></ul><p>6.K-Means聚类算法可大致分为以下几个步骤，步骤中说法错误的是（ C）</p><ul><li>A. 任意选取两个点作为两个簇的初始中心；</li><li>B. 对剩余的每个对象，根据其与各个簇中心的距离，将它赋给最近的簇对；</li><li><strong>C. 继续使用上步获得的簇中心；</strong></li><li>D. 重新计算数据集中每个点到两个簇中心的距离，根据其值进行重新分配。</li></ul><p>7.<u>应用K均值算法之前，特征缩放是一个很重要的步骤</u>。这是为什么呢（  A   ） </p><ul><li><strong>A. 在距离计算中，它为所有特征赋予相同的权重。</strong></li></ul><hr><h2 id="二、填空计算题"><a href="#二、填空计算题" class="headerlink" title="二、填空计算题"></a>二、填空计算题</h2><h3 id="1-相似性计算"><a href="#1-相似性计算" class="headerlink" title="1.相似性计算"></a>1.相似性计算</h3><h4 id="1-二值离散型属性的相似性计算方法（计算样本间的距离）"><a href="#1-二值离散型属性的相似性计算方法（计算样本间的距离）" class="headerlink" title="(1) 二值离散型属性的相似性计算方法（计算样本间的距离）"></a>(1) 二值离散型属性的相似性计算方法（计算样本间的距离）</h4><ol><li><p>10维特征的二值离散型属性样本A,B分别为A=[1 0 0 0 0 0 0 0 0 0],B=[1 0 0 0 0 0 1 0 0 1],A,B 的相似性SMC = （     ）。JC=（       ）</p><p><strong>0.2，2/3</strong></p></li><li><p>10维特征的二值离散型属性样本A,B分别为A=[1 0 0 1 0 0 0 0 0 0],B=[1 0 0 0 0 0 1 0 0 1],A,B 的相似性SMC = （     ）。JC=（       ）</p><p><strong>0.3，0.75</strong></p></li></ol><p>总结，自己画矩阵图计算即可</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230530205142358.png" alt="image-20230530205142358" style="zoom:50%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230530204529248.png" alt="image-20230530204529248" style="zoom:40%;" /><p><strong>SMC</strong>，简单匹配系数，用于对<strong>对称的</strong>二值离散型属性的样本间距离的计算</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230530204828716.png" alt="image-20230530204828716" style="zoom: 45%;" /><p><strong>Jaccard</strong>系数，<strong>不对称的</strong>二值离散型属性的样本间的距离计算</p><hr><h4 id="2-多值离散型属性的相似性计算"><a href="#2-多值离散型属性的相似性计算" class="headerlink" title="(2) 多值离散型属性的相似性计算"></a>(2) 多值离散型属性的相似性计算</h4><p>已知样本如下。<strong>简单匹配法计算x1,x4的相似性</strong>。d(x1,x4)= (             )</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/25250ad2a5a46d2d9b7957333f0cf52c.png" alt="img"></p><p>正确答案：<br>    (1) 1/3   看x1,x4这行，三个字段相同的值占(2/3) , 相似性为1-2/3==1/3</p><hr><h3 id="2-熵的计算"><a href="#2-熵的计算" class="headerlink" title="2.熵的计算"></a>2.熵的计算</h3><p>1.以下是目标变量在训练集上的 8 个实际值 [0,0,0,1,1,1,1,1]，<strong>目标变量的熵是？</strong>（   ） </p><p>A. -(5/8 log(5/8) + 3/8 log(3/8))</p><hr><h3 id="3-混淆矩阵的计算"><a href="#3-混淆矩阵的计算" class="headerlink" title="3.混淆矩阵的计算"></a>3.混淆矩阵的计算</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/bf1d46e5200ef467641431a7666f8aea.png" alt="img"></p><p>1.某分类器的混淆矩阵如上表，该分类器的<strong>误分率</strong>为 <strong>（FP+FN）主对角线</strong>,<strong>9%</strong></p><p>2.该分类器的<strong>查准率（Precision）</strong>为 ，<strong>P=TP/(TP+FP)<strong>，</strong>竖着看  30%</strong></p><p>3.该分类器的<strong>查全率</strong>（Recall）为，<strong>TP/(TP+FN) 查全率</strong>（召回率），<strong>横着看 60%</strong></p><hr><h3 id="4-K均值聚类方法"><a href="#4-K均值聚类方法" class="headerlink" title="4.K均值聚类方法"></a>4.K均值聚类方法</h3><p>1.假设你想用K均值聚类方法将7个观测值聚类到3个簇中，在第一次迭代簇之后，C1、C2、C3具有以下观测值： C1: {(2,2), (4,4), (6,6)} C2: {(0,4), (4,0)} C3: {(5,5), (9,9)} 在第二次迭代中，</p><p>01<strong>观测点（9，9）到集群质心C1的 Manhattan 距离是？A</strong></p><p><strong>C1:((2+4+6)/3, (2+4+6)/3)（4,4）和（9,9）的 Manhattan 距离是：（9-4）+（9-4）= 10。</strong></p><p>02如果继续进行第二次迭代，哪一个将成为集群的质心？A</p><ul><li><strong>A. C1: (4,4), C2: (2,2), C3: (7,7)</strong></li></ul><p>找到集群中数据点的质心 C1 = ((2+4+6)/3,(2+4+6)/3) = (4, 4)</p><p>找到集群中数据点的质心 C2 = ((0+4)/2, (4+0)/2) =(2, 2)</p><p>找到集群中数据点的质心 C3 = ((5+9)/2, (5+9)/2) =(7, 7)</p><p><strong>因此, C1: (4,4), C2: (2,2), C3: (7,7)</strong></p><hr><h3 id="5-分类器的正确率"><a href="#5-分类器的正确率" class="headerlink" title="5.分类器的正确率"></a>5.分类器的正确率</h3><p>1.设测试样本中，A类样本90个，B类样本10个。分类器C1将所有的测试样本都分成了A类。分类器C2将A类的90个样本分对了70个，将B类的样本分对了5个。C1的分类正确率为（　　），C2的分类正确率（    ）。（填写百分数形式，如：１０％）</p><p><strong>(1) ９０％    (2) ７５％</strong></p><p>C1的分类正确率为（　），正确的样本数/总样本数 —&gt;  90/100 == 90%</p><p>C2的分类正确率（    ）,  —&gt; (70+5)/100 == 75%</p><hr><h3 id="6-查准率、查全率计算"><a href="#6-查准率、查全率计算" class="headerlink" title="6.查准率、查全率计算"></a>6.查准率、查全率计算</h3><p>某局域网中有 A 类信息１４００条，B 类信息３００条，C 类信息３００条。科 技人员甲设计了搜索引擎，以搜索 A 类信息为目的，结果返回了 A 类信息７００条，B 类信 息２００条，C 类信息１００条。问该引擎的查准率为（ ），查全率为（ ）。 （填写百分数形式，如：１０％）</p><p><strong>70%，50%</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528175516024.png" alt="image-20230528175516024" style="zoom:50%;" /><p>该搜索引擎的**查准率 (竖着看)**为：70%（计算公式：查准率 = 检索到的相关信息数 / 检索到的全部信息数 × 100% = 700 / (700 + 200 + 100) × 100% = 70%）</p><p>该搜索引擎的**查全率 (横着看)**为：50%（计算公式：查全率 = 检索到的相关信息数 / 相关信息的总数 × 100% = 700 / 1400 × 100% = 50%）</p><hr><h2 id="三、重点大题"><a href="#三、重点大题" class="headerlink" title="三、重点大题"></a>三、重点大题</h2><h3 id="1-混淆矩阵"><a href="#1-混淆矩阵" class="headerlink" title="1.混淆矩阵"></a>1.混淆矩阵</h3><p><strong>题目</strong>：有20个样本，<strong>其中真实正例有10个，用p表示，负例有10个，用n表示</strong>。</p><p>Inst# 代表样本编号，Class代表样本真实的类别，Score表示利用模型得出每个测试样本<u>属于真实样</u></p><p><u>本的概率</u>。依次将Score概率从大到小排序，得到下表：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528174013113.png" alt="image-20230528174013113"></p><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p><u>1.画出Score阈值为0.5时的混淆矩阵，计算此时的F1度量值。</u></p><p><strong>分析：</strong></p><p>（1）Score阈值为0.5时的混淆矩阵</p><p><strong>在左侧：分类器预测为正的情况， 相反右侧是分类器预测为负的情况</strong>，具体值在图中数即可</p><p>要知道混淆矩阵如何写，各个值对应的含义</p><p>TP: 分类器预测为正，真实为正</p><p>FP: 分类器预测为正，真实为负</p><p>FN:分类器预测为负，真实为正</p><p>TN:分类器预测为负，真实为负</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528174335722.png" alt="image-20230528174335722" style="zoom: 80%;" /><hr><p>（2）<strong>F1度量值</strong>，F1是准确率和召回率的调和平均。</p><p>具体推导，</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528175516024.png" alt="image-20230528175516024" style="zoom:50%;" /><p>计算F1记住公式即可，</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528180320715.png" alt="image-20230528180320715" style="zoom: 25%;" /><p>  计算， </p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528180217478.png" alt="image-20230528180217478" style="zoom:60%;" /><p><strong>拓展：</strong></p><p>1的另一种出题方式，<u>不给出具体概率的情况。</u></p><p>现有20个样本，包括10个正例（横着看，真实正例：TP+FN），10个负例。<strong>当阈值为0.5时，分类器预测正例为10只，其中将4个反例预测为正例。</strong></p><p>试求出该分类结果的混淆矩阵和F1值。</p><p>分析：</p><p><u>其中将4个反例预测为正例</u>：（由一个值推出其他三个值）</p><p>预测器为正，真实为负，及FP=4 —-&gt; 其他值</p><p>共有20个样本：TP+FP+TN+FN=20;</p><p>10个正例：TP+FN=10； 10个反例：FP+TN=10；</p><p>预测正例为10：TP+FP=10；预测反例为10：FN+TN=10；</p><p>4个反例预测为正例：FP=4</p><hr><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><p><u>2.画出ROC 曲线。</u></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528181537402.png" alt="image-20230528181537402" style="zoom:80%;" /><p>补充：</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528181828459.png" alt="image-20230528181828459" style="zoom: 67%;" /><p><strong>FP:预测为正，真实为负的数量，  TP:预测为正，真实为正的数量</strong></p><p>ROC 曲线的横坐标为FPR，纵坐标为TPR。</p><p>FPR是错误预测为正确的概率**(假正率)<strong>，TPR是正确预测为正确的概率</strong>(真正率)**。 每个点坐标（FPR, TPR）</p><hr><p>0.9&lt;阈值&lt;=1时，没有样本被预测为正例，所有样本被预测为反例。所以FP=0，TP=0，得ROC坐标**(0,0)**。</p><p>0.8&lt;阈值&lt;=9时，样本1预测为正例，其他样本被预测为反例。其中，样本1为真实正例，所以FP=0，TP=1，得ROC坐标(0,0),**(0,0.1)**。</p><p>0.7&lt;阈值&lt;=8时，样本1-2预测为正例。其中，样本1,2为真实正例，所以FP=0，TP=2，得ROC坐标(0,0),(0,0.1),(0,0.2)。</p><p>0.6&lt;阈值&lt;=7时，样本1-3预测为正例。其中，样本1,2为真实正例，样本3为真实反例，所以FP=1，TP=2，得ROC坐标(0,0),(0,0.1),(0,0.2),**(0.1,0.2)**。</p><p>0.55&lt;阈值&lt;=0.6时，样本1-4预测为正例。其中，样本1,2,4为真实正例，样本3为真实反例，所以FP=1，TP=3，得ROC坐标(0,0),(0,0.1),(0,0.2),(0.1,0.2),**(0.1,0.3)**。</p><p>……</p><p>具体计算图如下：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528182846063.png" alt="image-20230528182846063"></p><p>结果：</p><p>ROC 曲线的<strong>横坐标为FPR，纵坐标为TPR</strong>。FPR是错误预测为正确的概率，TPR是正确预测为正确的概率。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528183035478.png" alt="image-20230528183035478"></p><hr><h3 id="2-决策树"><a href="#2-决策树" class="headerlink" title="2.决策树"></a>2.决策树</h3><p>（使用信息增益的方法）</p><p><strong>题目：</strong></p><p>使用信息增益方法，计算下表中的决策树</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528183238910.png" alt="image-20230528183238910"></p><p>根据类别（是否）这一列来计算，</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528183445889.png" alt="image-20230528183445889"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528183533928.png" alt="image-20230528183533928"></p><p><strong>考试推荐写法</strong></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528183635323.png" alt="image-20230528183635323"></p><p>其他特征信息增益，</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528183811110.png" alt="image-20230528183811110" style="zoom: 80%;" /><p>利用上述结果，由于特征A3（<strong>房子特征</strong>）的信息增益最大，<strong>所以选择特征A3作为根节点的特征</strong>。它将训练数据集D划分为<strong>两个子集D1（A3取值为“是”）</strong>和<strong>D2（A3取值为“否”）</strong>。</p><p><u>“房子特征=是”的样本都对应“类别=是”，达到终止条件</u>，只用计算D2这个分支即可</p><p>然后对D2从特征A1（年龄），特征A2（工作），特征A4（信贷情况）中选择新的特征，计算各个特征信息增益。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528184644145.png" alt="image-20230528184644145"></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528184913760.png" alt="image-20230528184913760"></p><p>利用上述结果，<strong>由于特征A2（工作特征）的信息增益最大</strong>，所以选择特征A2作为否分支的根节点。它将训练数据集D2划分为<strong>两个子集D21（A2取值为“是”）和D22（A2取值为“否”）</strong>。<u>且每个分支都只有一种结果，所以决策树划分完毕。</u></p><p> 可以画出决策树，</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528185023821.png" alt="image-20230528185023821"></p><hr><h3 id="3-核函数"><a href="#3-核函数" class="headerlink" title="3.核函数"></a>3.核函数</h3><p><strong>题目：</strong></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528185158910.png" alt="image-20230528185158910"></p><p>带公式计算即可，</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528185223704.png"></p><hr><h3 id="4-SVM"><a href="#4-SVM" class="headerlink" title="4.SVM"></a>4.SVM</h3><p>支持向量机（SVM）的主要思想是<u>建立一个超平面作为决策曲面，使得正例和反例之间的隔离边缘被最大化。更精确说，支持向量机是结构风险最小化方法的近似实现。</u></p><p>题目：</p><p>带公式计算,</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230528185526468.png" alt="image-20230528185526468"></p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>练习题整理自学习通的练习题，及桂电的&lt;&lt;机器学习&gt;&gt;课程答疑资料。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;机器学习与数据挖掘-刷题练习-复习版&quot;&gt;&lt;a href=&quot;#机器学习与数据挖掘-刷题练习-复习版&quot; class=&quot;headerlink&quot; title=&quot;机器学习与数据挖掘 刷题练习(复习版)&quot;&gt;&lt;/a&gt;机器学习与数据挖掘 刷题练习(复习版)&lt;/h2&gt;&lt;p&gt;闲言碎语</summary>
      
    
    
    
    <category term="数据挖掘与机器学习" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="机器学习与数据挖掘" scheme="https://ariesfun.gitee.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>23生产实习 大数据开发实训笔记合集 更新中...</title>
    <link href="https://ariesfun.gitee.io/posts/5544.html"/>
    <id>https://ariesfun.gitee.io/posts/5544.html</id>
    <published>2023-06-03T17:11:50.065Z</published>
    <updated>2023-06-04T03:20:07.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="23生产实习-大数据开发实训笔记合集-更新中…"><a href="#23生产实习-大数据开发实训笔记合集-更新中…" class="headerlink" title="23生产实习 大数据开发实训笔记合集 更新中…"></a>23生产实习 大数据开发实训笔记合集 更新中…</h2><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>感谢学校为本专业开展了线下的实训机会，千锋教育的倪讲师也是保姆级别的哈哈，且行且珍惜。</p><p>老师会从环境搭建，到上手完成一个简单的基于亚马逊平台的推荐系统。</p><p>用到的开发框架涉及，Hadoop、Zookeeper、Flume、Kafka、Scala、HBase、Spark、Hive等。</p><p><a href="http://10.200.21.35:8100/s/WJhg">用到的软件资源</a>，注意本实训用到的软件资源文件只对校友开放，如有需要可以联系作者。</p><p><strong>特别鸣谢：</strong>提供上课笔记的<strong>小李同学(LHW)，小王同学(WQK)</strong> 。Respect！！</p><p><strong>笔记正在更新中，如有内容遗漏或错误欢迎随时指正，可在评论区互动交流~</strong></p><hr><h3 id="笔记合集"><a href="#笔记合集" class="headerlink" title="笔记合集"></a>笔记合集</h3><p>点击链接，即可跳转到对应文章</p><p><a href="https://ariesfun.gitee.io/posts/a63b.html">Day01(0529) Hadoop运行环境搭建及配置</a></p><p><a href="https://ariesfun.gitee.io/posts/3d5e.html">Day02(0530) Hadoop核心技术</a></p><p><a href="https://ariesfun.gitee.io/posts/dd24.html">Day03(0531) Zookeeper的安装方式</a></p><p><a href="https://ariesfun.gitee.io/posts/34c8.html">Day04(0601) HDFS的API及字符统计案例 (CharCount)</a></p><p>未完待续。。。</p><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>笔记整理于千锋教育课堂讲义和代码，部分同学笔记及自己的小总结。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;23生产实习-大数据开发实训笔记合集-更新中…&quot;&gt;&lt;a href=&quot;#23生产实习-大数据开发实训笔记合集-更新中…&quot; class=&quot;headerlink&quot; title=&quot;23生产实习 大数据开发实训笔记合集 更新中…&quot;&gt;&lt;/a&gt;23生产实习 大数据开发实训笔记合</summary>
      
    
    
    
    <category term="大数据开发" scheme="https://ariesfun.gitee.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="大数据框架" scheme="https://ariesfun.gitee.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Linux" scheme="https://ariesfun.gitee.io/tags/Linux/"/>
    
    <category term="Java" scheme="https://ariesfun.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>23生产实习 Day04(06/01) HDFS的API及字符统计案例 (CharCount)</title>
    <link href="https://ariesfun.gitee.io/posts/34c8.html"/>
    <id>https://ariesfun.gitee.io/posts/34c8.html</id>
    <published>2023-06-03T17:11:46.692Z</published>
    <updated>2023-06-03T17:34:39.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day04-06-01-HDFS的API及字符统计案例-CharCount"><a href="#Day04-06-01-HDFS的API及字符统计案例-CharCount" class="headerlink" title="Day04(06/01) HDFS的API及字符统计案例 (CharCount)"></a>Day04(06/01) HDFS的API及字符统计案例 (CharCount)</h2><p><strong><a href="https://ariesfun.gitee.io/posts/5544.html">查看笔记合集</a></strong></p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="1-先开启Zookeeper服务"><a href="#1-先开启Zookeeper服务" class="headerlink" title="1.先开启Zookeeper服务"></a>1.先开启Zookeeper服务</h4><p>需要先开启3台虚拟机上的Zookeeper服务和Hadoop服务,你也可使用自动化脚本来执行此操作。</p><p>使用远程连接工具，连接到三台虚拟主机，<strong>先开启Zookeeper服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下命令需要在三台主机上同时执行</span></span><br><span class="line"></span><br><span class="line">cd /home/software/zookeeper-3.4.7/bin/ # 进入bin目录，运行里面的脚本文件</span><br><span class="line">sh zkServer.sh start # 开启zookeeper</span><br><span class="line">sh zkServer.sh status # 查看运行状态</span><br></pre></td></tr></table></figure><p><strong>若出现的Mode里，共有两个<code>follower</code>，一个<code>leader</code>，则说明服务是正常启动的。</strong></p><hr><h4 id="2-在第一个节点上，启动Hadoop服务"><a href="#2-在第一个节点上，启动Hadoop服务" class="headerlink" title="2.在第一个节点上，启动Hadoop服务"></a>2.在第一个节点上，启动Hadoop服务</h4><p><code>start-all.sh </code></p><p><strong>启动成功后，在三台主机上输入<code>jps</code>命令查看运行进行（BigData01，02，03对应的正确进程数应是8，7，6）。</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306022146489.png" alt="image-20230602214656983" style="zoom: 50%;" /><p>若进程数不够需要单独在该结点上进行相应配置，参照下图来启动相应的结点。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306022145996.png" alt="image-20230602214548554"></p><hr><h4 id="3-编写Zookeeper启动脚本"><a href="#3-编写Zookeeper启动脚本" class="headerlink" title="3.编写Zookeeper启动脚本"></a>3.编写Zookeeper启动脚本</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306040117010.png" alt="image-20230603212105722" style="zoom:50%;" /><p>在Linux本地创建 <code>zkServer</code> 文件夹，并编写脚本内容,</p><p>(便于同时启动三个节点上的Zookeeper服务，或者查看状态、关闭)</p><p><code>vim zk_start.sh</code>，完成后保存并退出</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032125134.png" alt="image-20230603212549972"></p><hr><p>复制出来，编写一个查看Zookeeper运行状态的脚本文件，</p><p><code>vim zk_start.sh</code> ，完成后保存并退出</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032128780.png" alt="img-202306032128780"></p><hr><p>进行脚本测试，下次启动Zookeeper就可以在只在一个节点执行脚本文件了，比较方便。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032131492.png" alt="img-202306032131492" style="zoom: 80%;" /><h4 id="4-该案例会用到IDE工具-IDEA"><a href="#4-该案例会用到IDE工具-IDEA" class="headerlink" title="4.该案例会用到IDE工具:IDEA"></a>4.该案例会用到IDE工具:<code>IDEA</code></h4><p>确保你的IDEA可以正常的创建JAVA项目，并且可以运行成功（已经配置好jdk1.8环境）</p><h3 id="一、HDFS的API编写"><a href="#一、HDFS的API编写" class="headerlink" title="一、HDFS的API编写"></a>一、HDFS的API编写</h3><p>打开IDEA，之前需要启动Zookeeper服务和Hadoop服务。</p><p>用IDEA新建一个<strong>Maven</strong>项目,</p><p><strong>用于在本地Windows环境上与HDFS文件系统进行交互。</strong></p><hr><h4 id="0-配置Maven环境依赖"><a href="#0-配置Maven环境依赖" class="headerlink" title="(0)配置Maven环境依赖"></a>(0)配置Maven环境依赖</h4><p>新建一个<code>HDFS-Demo</code>，保证是<strong>Maven项目</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032135410.png" alt="img-202306032135410" style="zoom: 67%;" /><p>右键选择<code>quickstart</code>骨架，进行下一步创建。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032138523.png" alt="img-202306032138523" style="zoom:80%;" /><hr><p>打开IDEA的设置界面，配置Maven的本地路径，(将<code>maven3.6.zip</code>压缩包解压到指定的文件路径下)</p><p>更改Maven的本地安装包路径，</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032142076.png" alt="img-202306032142076" style="zoom:80%;" /><p>编辑，<code>pom.xml</code>文件，添加以下依赖包文件，</p><p>然后点击刷新按钮，等待下载这些依赖文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032148563.png" alt="image-20230603214833970"></p><p>依赖下载完成后，我们就可以正式进入代码编写的环节了。</p><p>新建一个<code>HDFSDemo.java</code>文件，分别编写以下测试集代码，</p><h4 id="1-上传功能"><a href="#1-上传功能" class="headerlink" title="(1)上传功能"></a>(1)上传功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// Configuration代表的是环境配置</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码中的配置要优先于配置文件中的内容</span></span><br><span class="line">    conf.set(<span class="string">&quot;dfs.replication&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接HDFS</span></span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span>FileSystem.get(URI.create(<span class="string">&quot;hdfs://这里填写自己结点状态的为Active的IP:9000&quot;</span>),conf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出流是写，指定HDFS上的存储路径</span></span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> fs.create(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/demo.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定要上传的文件</span></span><br><span class="line">    FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\demo.txt&quot;</span>); <span class="comment">// 确保本地有这个文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件然后利用输出流往HDFS上写数据</span></span><br><span class="line">    IOUtils.copyBytes(in,out,conf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关流用于释放资源</span></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-下载功能"><a href="#2-下载功能" class="headerlink" title="(2)下载功能"></a>(2)下载功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下载</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// Configuration代表的是环境配置</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码中的配置要优先于配置文件中的内容</span></span><br><span class="line">    conf.set(<span class="string">&quot;dfs.replication&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接HDFS</span></span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(<span class="string">&quot;hdfs://XX.XX.XX.XX:9000&quot;</span>), conf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定输入流去读取HDFS上的数据</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> fs.open(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/demo.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建文件出书流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line">    IOUtils.copyBytes(in,out,conf);</span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-删除功能"><a href="#3-删除功能" class="headerlink" title="(3)删除功能"></a>(3)删除功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// Configuration代表的是环境配置</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码中的配置要优先于配置文件中的内容</span></span><br><span class="line">    conf.set(<span class="string">&quot;dfs.replication&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接HDFS</span></span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(<span class="string">&quot;hdfs:XX.XX.XX.XX:9000&quot;</span>), conf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定输入流去读取HDFS上的数据</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> fs.open(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/demo.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    fs.delete(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/demo.txt&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单独运行某个测试类，退出码为<code>exit code 0</code>说明运行成功，</p><p>然后打开浏览器来查看相应操作是否执行成功</p><hr><h3 id="二、MapReduce技术细节"><a href="#二、MapReduce技术细节" class="headerlink" title="二、MapReduce技术细节"></a>二、MapReduce技术细节</h3><p>1.MapReduce是Hadoop提供的一套用于进行<strong>分布式计算的框架</strong> </p><p>2.MapReduce是将整个计算过程拆分为两个阶段</p><p><strong>Map(映射)阶段 和 Reduce(规约)阶段</strong></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306040002563.png" alt="image-20230604000205861"></p><p>3.因为Hadoop对windows系统的兼容性极差,需要进行环境配置</p><hr><h3 id="三、编写字符统计案例"><a href="#三、编写字符统计案例" class="headerlink" title="三、编写字符统计案例"></a>三、编写字符统计案例</h3><p>新建一个MapReduceDemo的<strong>Maven项目</strong>(使用quickstart骨架)，并将前一个项目的<code>pom.xml</code>的依赖配置</p><p>复制过来，刷新Maven配置。</p><h4 id="1-代码编写"><a href="#1-代码编写" class="headerlink" title="1.代码编写"></a>1.代码编写</h4><p>在<code>charcount</code>包下，编写以下三个类</p><p><strong>(1).编写MapReduce程序的驱动类，<code>CharcountDriver.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编写MapReduce程序的驱动类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharcountDriver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 环境参数</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向Yarn申请JOB任务</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置入口类</span></span><br><span class="line">        job.setJarByClass(CharcountDriver.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Mapper类</span></span><br><span class="line">        job.setMapperClass(CharcountMapper.class);</span><br><span class="line">        <span class="comment">// 设置Rudecer类</span></span><br><span class="line">        job.setReducerClass(CharcountReducer.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设定Mapper的输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设定Reducer的输出类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置输入路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;hdfs://这里填写自己结点状态的为Active的IP:9000/words.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置输出路径</span></span><br><span class="line">        <span class="comment">// 注意需要保证，下面的输出目录必须是不存在的，这步会创建一个指定的输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;hdfs://xx.xx.xx.xx:9000/result/wordcount&quot;</span>));</span><br><span class="line">        <span class="comment">// 提交Job任务</span></span><br><span class="line">        job.waitForCompletion(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>(2).编写Mapper类，<code>CharcountMapper.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在MapReduce程序中要求所有的数据都能够被序列化：</span></span><br><span class="line"><span class="comment">// KEYIN, --- 输入的键的类型，如果不指定则默认是行的字节偏移量</span></span><br><span class="line"><span class="comment">// VALUEIN, --- 输入的值的类型，如果不指定则默认就是读取回来的一行数据</span></span><br><span class="line"><span class="comment">// KEYOUT, --- 输出的键的类型，当前案例中输出的字符</span></span><br><span class="line"><span class="comment">// VALUEOUT, --- 输出的值的类型，当前案例中输出的次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharcountMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span> &lt;LongWritable, Text,Text, IntWritable&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// key:键，实际上就是一行的偏移量</span></span><br><span class="line">    <span class="comment">// value:值，实际上就是读取的一行的数据</span></span><br><span class="line">    <span class="comment">// context: 利用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 统计字符</span></span><br><span class="line">        <span class="comment">// 首先将这一行中的数据读取出来进行拆分</span></span><br><span class="line">        <span class="type">char</span>[] cs=value.toString().toCharArray();</span><br><span class="line">        <span class="comment">// hello:&#123;h,e,l,l,o&#125;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : cs)&#123;</span><br><span class="line">            context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(c+<span class="string">&quot;&quot;</span>),<span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>));   <span class="comment">// Map端的代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>(3).编写Reducer类，<code>CharcountReducer.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KEYIN, VALUEIN,--- 输入的键值类型，Reducer的数据来自于Map</span></span><br><span class="line"><span class="comment">// 那么也就意味着Map的输出就是Reduce阶段的输入</span></span><br><span class="line"><span class="comment">// KEYOUT, ALUEOUT --- 输出的键值类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// key，输入的键</span></span><br><span class="line"><span class="comment">// values: 输入的值，这个值已经经过分组，</span></span><br><span class="line"><span class="comment">// context:利用这个参数将数据传递给HDFS上</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharcountReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span> &lt;Text, IntWritable, Text, IntWritable&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符统计</span></span><br><span class="line">        <span class="comment">//        // key:&#x27;a&#x27;</span></span><br><span class="line">        <span class="comment">// values:&#123;1,1,1,1,1,1,1....&#125;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        context.write(key, <span class="keyword">new</span> <span class="title class_">IntWritable</span>(sum));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-Windows上的Hadoop环境配置"><a href="#2-Windows上的Hadoop环境配置" class="headerlink" title="2.Windows上的Hadoop环境配置"></a>2.Windows上的Hadoop环境配置</h4><p>进行系统环境变量配置：</p><p>需要在Windows平台上，解压Hadoop安装包文件</p><p>在系统变量中需要添加以下信息，</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032345308.png" alt="img-202306032345308" style="zoom:50%;" /><p>在Path里添加一个bin目录，</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032345272.png" alt="img-202306032345272" style="zoom:50%;" /><p>下载hadoopbin压缩包，放到hadoop-2.7.6的bin目录下，并解压到此文件夹下。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032345452.png" alt="img-202306032345452"></p><p>双击exe文件：打开是一闪而过的，说明环境配置是正常的。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032346691.png" alt="img-202306032346691" style="zoom:67%;" /><hr><h4 id="3-查看字符统计结果"><a href="#3-查看字符统计结果" class="headerlink" title="3.查看字符统计结果"></a>3.查看字符统计结果</h4><p>运行<code>CharcountDriver.java</code>程序，运行成功返回的退出码应为<code>exit code 0</code>。</p><p>若出现报错查看报错信息，下面的意思是说，该节点是<code>stanby</code>节点，需要将代码里的IP改为活跃节点的IP。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306031123494.png" alt="image-20230603112347720"></p><hr><p>接着打开浏览器，查看字符统计结果。</p><p>进入节点状态的为<code>Active</code>的文件系统的网页，查看<code>/result/charcount</code>目录下是否有以下两个文件。</p><p>可以看到下面的两个文件，说明我们的CharCount程序运行成功，并返回了结果文件<code> part-r-00000</code>。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306022111234.jpg" alt="img-202306022111234"></p><p>在对应的结点的终端里，使用HDFS命令将统计的结果文件下载到Linux环境本地，来查看字符统计结果，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@qianfeng02 ~]# hadoop fs -get /result/charcount/part-r-00000</span><br><span class="line">[root@qianfeng02 ~]# cat part-r-00000</span><br><span class="line">        1430</span><br><span class="line">!       3</span><br><span class="line">&quot;       6</span><br><span class="line">&#x27;       7</span><br><span class="line">,       59</span><br><span class="line">-       2</span><br><span class="line">.       66</span><br><span class="line">:       1</span><br><span class="line">;       1</span><br><span class="line">?       1</span><br><span class="line">A       20</span><br><span class="line">B       3</span><br><span class="line">C       3</span><br><span class="line">D       1</span><br><span class="line">E       1</span><br><span class="line">F       1</span><br><span class="line">G       5</span><br><span class="line">I       23</span><br><span class="line">L       5</span><br><span class="line">M       4</span><br><span class="line">N       21</span><br><span class="line">O       3</span><br><span class="line">P       2</span><br><span class="line">S       4</span><br><span class="line">T       11</span><br><span class="line">W       15</span><br><span class="line">Y       2</span><br><span class="line">a       480</span><br><span class="line">b       99</span><br><span class="line">c       164</span><br><span class="line">d       226</span><br><span class="line">e       760</span><br><span class="line">f       180</span><br><span class="line">g       137</span><br><span class="line">h       348</span><br><span class="line">i       476</span><br><span class="line">j       19</span><br><span class="line">k       46</span><br><span class="line">l       282</span><br><span class="line">m       148</span><br><span class="line">n       388</span><br><span class="line">o       520</span><br><span class="line">p       77</span><br><span class="line">q       6</span><br><span class="line">r       343</span><br><span class="line">s       370</span><br><span class="line">t       588</span><br><span class="line">u       163</span><br><span class="line">v       71</span><br><span class="line">w       132</span><br><span class="line">x       5</span><br><span class="line">y       109</span><br><span class="line">z       6</span><br><span class="line">[root@qianfeng02 ~]#</span><br></pre></td></tr></table></figure><p>到这一步说明你的程序和环境都没毛病，哈哈继续加油！</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day04-06-01-HDFS的API及字符统计案例-CharCount&quot;&gt;&lt;a href=&quot;#Day04-06-01-HDFS的API及字符统计案例-CharCount&quot; class=&quot;headerlink&quot; title=&quot;Day04(06/01) HDFS的</summary>
      
    
    
    
    <category term="大数据开发" scheme="https://ariesfun.gitee.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="大数据框架" scheme="https://ariesfun.gitee.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Linux" scheme="https://ariesfun.gitee.io/tags/Linux/"/>
    
    <category term="Java" scheme="https://ariesfun.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>23生产实习 Day03(05/31) Zookeeper的安装方式</title>
    <link href="https://ariesfun.gitee.io/posts/dd24.html"/>
    <id>https://ariesfun.gitee.io/posts/dd24.html</id>
    <published>2023-06-03T17:11:42.895Z</published>
    <updated>2023-06-03T17:31:25.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day03-05-31-Zookeeper的安装方式"><a href="#Day03-05-31-Zookeeper的安装方式" class="headerlink" title="Day03(05/31) Zookeeper的安装方式"></a>Day03(05/31) Zookeeper的安装方式</h2><p><strong><a href="https://ariesfun.gitee.io/posts/5544.html">查看笔记合集</a></strong></p><h3 id="一、单机模式"><a href="#一、单机模式" class="headerlink" title="一、单机模式"></a>一、单机模式</h3><p>以下操作在第一个节点上进行。</p><h4 id="1-关闭防火墙"><a href="#1-关闭防火墙" class="headerlink" title="1.关闭防火墙"></a>1.关闭防火墙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld # 临时关闭</span><br><span class="line">sudo systemctl disable firewalld # 永久关闭</span><br></pre></td></tr></table></figure><hr><h4 id="2-解压Zookeeper的安装包并进入conf目录"><a href="#2-解压Zookeeper的安装包并进入conf目录" class="headerlink" title="2.解压Zookeeper的安装包并进入conf目录"></a>2.解压Zookeeper的安装包并进入conf目录</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032018191.png" alt="img-202306032018191" style="zoom:80%;" /><p>需要将Zookeeper安装包上传至第一个节点Linux本地，并进行解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf zookeeoer-3.4.7.tar.gz -C /home/software/</span><br><span class="line">cd /home/software/zookeeper-3.4.7/conf/</span><br></pre></td></tr></table></figure><hr><h4 id="3-将模板文件复制并重命名"><a href="#3-将模板文件复制并重命名" class="headerlink" title="3.将模板文件复制并重命名"></a>3.将模板文件复制并重命名</h4><p><code>cp zoo_sample.cfg zoo.cfg</code></p><hr><h4 id="4-编辑文件将dataDir属性进行配置"><a href="#4-编辑文件将dataDir属性进行配置" class="headerlink" title="4.编辑文件将dataDir属性进行配置"></a>4.编辑文件将dataDir属性进行配置</h4><p><code>vim zoo.cfg</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/home/software/zookeeper-3.4.7/tmp</span><br></pre></td></tr></table></figure><hr><h4 id="5-进入bin目录并启动Zookeeper"><a href="#5-进入bin目录并启动Zookeeper" class="headerlink" title="5.进入bin目录并启动Zookeeper"></a>5.进入bin目录并启动Zookeeper</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/zookeeper-3.4.7/bin</span><br><span class="line">sh zkServer.sh start</span><br></pre></td></tr></table></figure><hr><h4 id="6-成功启动后，查看运行状态"><a href="#6-成功启动后，查看运行状态" class="headerlink" title="6.成功启动后，查看运行状态"></a>6.成功启动后，查看运行状态</h4><p><code>sh zkServer.sh status</code></p><p>单机模式的状态:<strong>standalone</strong></p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032022362.png" alt="img-202306032022362" style="zoom:80%;" /><p><strong>到这说明，Zookeeper单机模式安装成功。</strong></p><p><strong>！！！切记下一步需要关闭单机模式</strong></p><p><code>sh zkServer.sh stop</code></p><hr><h4 id="7-远程拷贝Zookeeper文件给其他节点"><a href="#7-远程拷贝Zookeeper文件给其他节点" class="headerlink" title="7.远程拷贝Zookeeper文件给其他节点"></a>7.远程拷贝Zookeeper文件给其他节点</h4><p>进入<code>/home/software/</code>目录，</p><p>将当前节点Zookeeper文件夹拷贝给其他节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../../ </span><br><span class="line">scp -r zookeeper-3.4.7/ root@qianfeng02:/home/software/ </span><br><span class="line">scp -r zookeeper-3.4.7/ root@qianfeng02:/home/software/</span><br></pre></td></tr></table></figure><p>方便为下面的完全分布式安装做准备。</p><hr><h3 id="二、完全分布式"><a href="#二、完全分布式" class="headerlink" title="二、完全分布式"></a>二、完全分布式</h3><p><strong>三节点需要联动</strong>进行下面的操作，使用MobaXterm工具。</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032032644.png" alt="img-202306032032644.png" style="zoom:80%;" /><h4 id="1-关闭防火墙-1"><a href="#1-关闭防火墙-1" class="headerlink" title="1.关闭防火墙"></a>1.关闭防火墙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld # 临时关闭</span><br><span class="line">sudo systemctl disable firewalld # 永久关闭</span><br></pre></td></tr></table></figure><hr><h4 id="2-解压Zookeeper的安装包进入conf目录"><a href="#2-解压Zookeeper的安装包进入conf目录" class="headerlink" title="2.解压Zookeeper的安装包进入conf目录"></a>2.解压Zookeeper的安装包进入conf目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/zookeeper-3.4.7/conf/</span><br></pre></td></tr></table></figure><hr><h4 id="3-将模板文件复制一份并且重命名"><a href="#3-将模板文件复制一份并且重命名" class="headerlink" title="3.将模板文件复制一份并且重命名"></a>3.将模板文件复制一份并且重命名</h4><p><code>cp zoo_sample.cfg zoo.cfg</code></p><hr><h4 id="4-编辑文件将dataDir属性进行配置-1"><a href="#4-编辑文件将dataDir属性进行配置-1" class="headerlink" title="4.编辑文件将dataDir属性进行配置"></a>4.编辑文件将dataDir属性进行配置</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032035607.png" alt="img-202306032035607" style="zoom: 50%;" /><p><code>vim zoo.cfg</code></p><p>添加以下配置信息后，保存并退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/home/software/zookeeper-3.4.7/tmp</span><br><span class="line">server.1=xx.xx.xx.xx:2888:3888</span><br><span class="line">server.2=xx.xx.xx.xx:2888:3888</span><br><span class="line">server.3=xx.xx.xx.xx:2888:3888</span><br></pre></td></tr></table></figure><hr><h4 id="5-进入tmp目录编辑myid文件"><a href="#5-进入tmp目录编辑myid文件" class="headerlink" title="5.进入tmp目录编辑myid文件"></a>5.进入tmp目录编辑myid文件</h4><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032039453.png" alt="image-20230603203951597"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software/zookeeper-3.4.7/tmp/</span><br><span class="line">rm -rf vesion-2/ # 删除version-2文件，保证tmp文件夹为空</span><br></pre></td></tr></table></figure><p><code>vim myid</code> 然后编辑myid文件</p><p>在文件中添加当前节点的编号，三个节点需要同时操作</p><p>编号对应的就是server后面的数字,三个节点分别改为1，2，3（与各自节点IP要对应）</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032043460.png" alt="img-202306032043460" style="zoom: 50%;" /><hr><h4 id="6-三个节点都需要进入bin目录，启动Zookeeper"><a href="#6-三个节点都需要进入bin目录，启动Zookeeper" class="headerlink" title="6.三个节点都需要进入bin目录，启动Zookeeper"></a>6.三个节点都需要进入bin目录，启动Zookeeper</h4><p><code>sh zkServer.sh start</code></p><hr><h4 id="7-三个节点都需要查询状态"><a href="#7-三个节点都需要查询状态" class="headerlink" title="7.三个节点都需要查询状态"></a>7.三个节点都需要查询状态</h4><p><code>sh zkServer.sh status</code></p><p><strong>若出现2个follower和1个leader说明完全分布式启动成功</strong>。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306031302630.png" alt="image-20230603130214328"></p><hr><h4 id="8-Zookeeper集群启动及格式化"><a href="#8-Zookeeper集群启动及格式化" class="headerlink" title="8.Zookeeper集群启动及格式化"></a>8.Zookeeper集群启动及格式化</h4><p><code>cd /home/software/zookeeper-3.4.7/bin</code></p><p><strong>(1).在第一个节点上，格式化Zookeeper</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure><p>执行后出现成功创建，说明格式化成功。</p><p><strong>如果没有，噩梦开始。</strong></p><p>你需要检查你的Hadoop和Zookeeper配置信息是否有误。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306031310187.png" alt="image-20230603131003772"></p><hr><p><strong>(2).接着在三个节点上启动JournalNode</strong></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032047071.png" alt="image-20230603204715878"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemen.sh start journalnode</span><br></pre></td></tr></table></figure><hr><p><strong>(3).第一个节点上，格式化NameNode</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><p>若出现以下提示，说明NameNode格式化成功。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032052361.png" alt="image-20230603205221035"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23/06/01 11:22:00 INFO common.Storage: Storage directory /home/software/hadoop-2.7.6/tmp/hdfs/name has been successfully formatted.</span><br></pre></td></tr></table></figure><p>如果不能格式化成功，可以参考<a href="https://www.cnblogs.com/c-w20140301/p/10469315.html">解决namenode格式化时报错</a>。</p><hr><p><strong>(4).在第一个节点上启动NameNode</strong></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032055407.png" alt="img-202306032055407"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemen.sh start namenode</span><br></pre></td></tr></table></figure><hr><p><strong>(5).第二个节点上进行格式化</strong></p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306032055926.png" alt="img-202306032055926"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -bootstrapStandby</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否出现下面的提示信息</span></span><br><span class="line">23/06/01 11:34:37 INFO common.Storage: Storage directory /home/software/hadoop-2.7.6/tmp/hdfs/name has been successfully formatted.</span><br></pre></td></tr></table></figure><hr><p><strong>(6).在三个节点上同时执行以下命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop-deamen.sh start namenode # 启动NameNode</span><br><span class="line">hadoop-deamen.sh start datanode # 启动DataNode</span><br></pre></td></tr></table></figure><hr><p><strong>(7).在第一、三节点上分别执行以下命令</strong></p><p>在第三个节点，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-yearn.sh</span><br></pre></td></tr></table></figure><p>在第一个节点，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn-dameon.sh start resourcemanager</span><br></pre></td></tr></table></figure><hr><p><strong>(8).检查三个节点的进程数量</strong></p><p>在三个节点都输入<code>jps</code></p><p><strong>查看进程数量，正确应该是8，7，6</strong></p><p>到此，完全分布式的Zookeeper安装完毕~~</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day03-05-31-Zookeeper的安装方式&quot;&gt;&lt;a href=&quot;#Day03-05-31-Zookeeper的安装方式&quot; class=&quot;headerlink&quot; title=&quot;Day03(05/31) Zookeeper的安装方式&quot;&gt;&lt;/a&gt;Day03(0</summary>
      
    
    
    
    <category term="大数据开发" scheme="https://ariesfun.gitee.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="大数据框架" scheme="https://ariesfun.gitee.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Linux" scheme="https://ariesfun.gitee.io/tags/Linux/"/>
    
    <category term="Java" scheme="https://ariesfun.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>23生产实习 Day02(05/30) Hadoop核心技术</title>
    <link href="https://ariesfun.gitee.io/posts/3d5e.html"/>
    <id>https://ariesfun.gitee.io/posts/3d5e.html</id>
    <published>2023-06-03T17:11:39.424Z</published>
    <updated>2023-06-03T17:27:17.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day02-05-30-Hadoop核心技术"><a href="#Day02-05-30-Hadoop核心技术" class="headerlink" title="Day02(05/30) Hadoop核心技术"></a>Day02(05/30) Hadoop核心技术</h2><p><strong><a href="https://ariesfun.gitee.io/posts/5544.html">查看笔记合集</a></strong></p><h2 id="一、Hadoop伪分布式集群配置及功能测试"><a href="#一、Hadoop伪分布式集群配置及功能测试" class="headerlink" title="一、Hadoop伪分布式集群配置及功能测试"></a>一、Hadoop伪分布式集群配置及功能测试</h2><h3 id="0-Hadoop运行环境配置"><a href="#0-Hadoop运行环境配置" class="headerlink" title="0.Hadoop运行环境配置"></a>0.Hadoop运行环境配置</h3><p>先进入hadoop文件夹进行配置 <code>cd /home/software/hadoop-2.7.6/etc/hadoop/</code></p><p><strong>(1).<code>vim mapred-site.xml</code></strong><br>ps: 前一步要复制一份<code>.xml</code>文件 <code>cp mapred-site.xml.template mapred-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定Mapreduce程序在Yarn上运行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>(2).<code>vim yarn-site.xml</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定Yarn的主节点 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- NodeManager数据获取方式 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>(3).<code>vim slaves</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qianfeng01 # 添加从节点信息</span><br></pre></td></tr></table></figure><hr><p><strong>(4).<code>vim /etc/profile</code> 配置Hadoop环境变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/software/jdk1.8</span><br><span class="line">export HADOOP_HOME=/home/software/hadoop-2.7.6</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br><span class="line">export JAVA_HOME PATH</span><br></pre></td></tr></table></figure><p><strong>(5).<code>source /etc/profile</code> # 刷新环境变量</strong></p><p><code>hadoop version</code> # 查看Hadoop版本号</p><p>可以正确看到Hadoop版本说明，环境变量配置正确。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306040010090.png" alt="img-202306040010090"></p><hr><p><strong>(5).<code>hadoop namenode -format </code> 格式化namenode</strong></p><p>运行内容中出现以下这行，说明格式化成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23/05/30 09:15:33 INFO common.Storage: Storage directory /tmp/hadoop-root/dfs/name has been successfully formatted.</span><br></pre></td></tr></table></figure><hr><p><strong>(6).<code>start-all.sh</code>  启动Hadoop服务</strong></p><hr><p><strong>(7).输入<code>jps</code> 查看运行的进程（应有如下6个）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@qianfeng01 hadoop]# jps</span><br><span class="line">6433 NameNode</span><br><span class="line">7043 NodeManager</span><br><span class="line">6933 ResourceManager</span><br><span class="line">6550 DataNode</span><br><span class="line">6780 SecondaryNameNode</span><br><span class="line">7375 Jps</span><br></pre></td></tr></table></figure><hr><p><strong>(8).打开浏览器，输入<code>自己的ip:50070</code> 查看HadoopWeb文件系统页面</strong></p><p> 网页可以正常打开，说明Hadoop伪分布式环境搭建完成~~</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202305301032378.png" alt="image-20230530095757160"></p><hr><h3 id="1-HDFS常用命令"><a href="#1-HDFS常用命令" class="headerlink" title="1.HDFS常用命令"></a>1.HDFS常用命令</h3><table><thead><tr><th align="left">常用命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">hadoop fs <strong>-put</strong> xxx.txt  /</td><td align="left">上传xxx文件到hdfs的根目录下</td></tr><tr><td align="left">hadoop fs <strong>-get</strong> /xxx.txt /xxx.txt</td><td align="left">下载xxx文件到Linux本地并重命名</td></tr><tr><td align="left">hadoop fs <strong>-rm</strong> /xxx.txt</td><td align="left">删除hdfs根目录下的文件</td></tr><tr><td align="left">hadoop fs <strong>-rmdir</strong> /xxx</td><td align="left">删除<strong>空文件夹</strong></td></tr><tr><td align="left">hadoop fs <strong>-rmr</strong> /xxx</td><td align="left"><strong>递归删除</strong>文件夹</td></tr><tr><td align="left">hadoop fs <strong>-ls</strong> /</td><td align="left">查看hdfs根目录下的所有文件</td></tr><tr><td align="left">hadoop fs <strong>-cp</strong> /xxx.txt /xxx.txt</td><td align="left">将hdfs根目录下的xxx文件复制并重命名为xxx</td></tr><tr><td align="left">hadoop fs <strong>-mv</strong> /xxx.txt /xxx.txt</td><td align="left">将hdfs根目录下的xxx文件重命名为xxx</td></tr><tr><td align="left">hadoop fs -mv /xxx.txt /xxx/</td><td align="left">将hdfs根目录下的xxx文件移动到指定文件夹xxx下</td></tr><tr><td align="left">hadoop fs <strong>-mkdir</strong> /xxx</td><td align="left">在hdfs根目录下创建文件夹xxx</td></tr></tbody></table><hr><p>eg.在Linux本地环境创建<code>hello.txt</code>，与HDFS进行文件交互</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/data/ </span><br><span class="line">vim hello.txt # 创建hello.txt并编辑</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -put hello.txt  / # 上传文件到hdfs的根目录下</span><br><span class="line">mv hello.txt world.txt # 重命名文件夹</span><br><span class="line"></span><br><span class="line">hadoop fs -put /home/data/world.txt /a.txt # 上传本地文件到hdfs,并重命名</span><br><span class="line">hadoop fs -mkdir /log # 创建文件夹</span><br><span class="line">hadoop fs -get /a.txt /home/data/ # 从hdfs下载文件到本地</span><br><span class="line">hadoop fs -mv /hello.txt /world.txt # 重命名</span><br><span class="line">hadoop fs -cp /world.txt /hello.txt # 复制文件并重命名</span><br><span class="line">hadoop fs -ls / # 查看hdfs的所有文件</span><br><span class="line">hadoop fs -mv /a.txt /log/ # 移动文件到指定目录下</span><br><span class="line">hadoop fs -rmdir /log # 删除的文件夹必须为空(会报错)</span><br><span class="line">hadoop fs -rm /log/a.txt # 删除文件</span><br><span class="line">hadoop fs -rmdir /log # 删除空文件夹</span><br><span class="line">hadoop fs -mkdir /demo</span><br><span class="line">hadoop fs -mv /hello.txt /demo # 移动(剪切)文件</span><br><span class="line">hadoop fs -mv /world.txt /demo</span><br><span class="line">hadoop fs -rmr /demo # 递归删除文件夹</span><br></pre></td></tr></table></figure><hr><h3 id="2-HDFS的概述"><a href="#2-HDFS的概述" class="headerlink" title="2.HDFS的概述"></a>2.HDFS的概述</h3><p>(1) HDFS：<strong>Hadoop Distribute File System</strong> (Hadoop分布式文件系统)</p><p>(2) HDFS是为了方便使用，仿照Linux系统设计的存储系统</p><p>(3) HDFS是典型的主存结构：</p><p><strong>NameNode(主节点) 和 DataNode(从节点)</strong></p><p><strong>DataNode: 存储实际的数据块</strong></p><p>(4) HDFS在存储文件时，会将文件进行物理(Block)切块</p><p>(5) HDFS在存储的时候切块之后<strong>每个Block默认是128MB</strong></p><p>(6) HDFS会自动对数据进行备份，这个备份称之为副本，<strong>在完全分布式的场景中的副本数量默认为3</strong></p><p>ps:</p><p>现代大数据的8大特点（8V）</p><p>1.数据量大(Volume)     2.速度(Velocity)     3.种类(Variety)     4.准确性(Veracity)</p><p>5.可变性(Variability)     6.波动性(Volatility)     7.可视化(visualization)     8.价值(Value)</p><hr><h3 id="3-Block（块存储）"><a href="#3-Block（块存储）" class="headerlink" title="3.Block（块存储）"></a>3.Block（块存储）</h3><p>(1).Block是HDFS中数据存储的基本单位，即一个文件在HDFS存储时由一个或多个Block组成</p><p>(2).Block的大小默认(<u>Hadoop1.0版本默认是64MB，Hadoop2.0是128MB</u>), 可通过<code>dfs.blocksize</code>属性来设置</p><p>(3).若一个文件本身不到128MB，则这个文件是多大则对应的Block就是多大</p><p>(4).HDFS会对Block进行编号，即BlockID</p><p>(5) 切块的意义</p><p>a.能够存储超大文件        b.能够进行快速的备份</p><hr><h3 id="4-NameNode"><a href="#4-NameNode" class="headerlink" title="4.NameNode"></a>4.NameNode</h3><p>(1).<strong>NameNode是HDFS的核心节点(主节点)</strong></p><p>(2).NameNode的职责，<strong>管理DataNode和记录元数据</strong></p><p>(3).元数据包含:</p><p>a. 文件的存储路径     b. 文件的大小     c. Block的大小     d. BlockID v. 副本数量</p><p>(4). 元数据时存储在内存及磁盘当中的目的</p><p><strong>在内存中的目的是查找快，在磁盘中的目的是崩溃恢复</strong></p><p>(5).默认情况下DataNode每隔3s发送心跳，给NameNode</p><hr><h3 id="5-DataNode"><a href="#5-DataNode" class="headerlink" title="5.DataNode"></a>5.DataNode</h3><p>作用：存储Block</p><p>DataNode将Block存储在磁盘上,在磁盘上的存储路径是由<code>hadoop.tmp.dir</code>属性来决定的</p><p>DataNode会定时向NameNode发送心跳，<strong>即RPC远程过程调用</strong></p><hr><h3 id="6-SecondaryNameNode"><a href="#6-SecondaryNameNode" class="headerlink" title="6.SecondaryNameNode"></a>6.SecondaryNameNode</h3><p>到目前为止HDFS集群只能是<strong>NameNode+SecondaryNameNode结构</strong>或者是<strong>双NameNode结构</strong>,</p><p><strong>而在实际生存场景中，采用的都是双NameNode结构</strong>而舍弃掉SecondaryNameNode</p><hr><h3 id="7-垃圾回收机制"><a href="#7-垃圾回收机制" class="headerlink" title="7.垃圾回收机制"></a>7.垃圾回收机制</h3><p>HDFS回收站策略默认是不打开的，意味着删除文件这个操作会立即生效并且不能撤销</p><p>若要开启回收站功能，需在<code>core-site.xml</code>文件中配置 </p><p><code>vim core-site.xml</code>   </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>                                                             </span><br><span class="line">    <span class="comment">&lt;!--                                                               </span></span><br><span class="line"><span class="comment">    配置回收站垃圾清理的时间间隔，单位是min                               </span></span><br><span class="line"><span class="comment">    如果一天内没被还原那么原则上就会被清理掉                            </span></span><br><span class="line"><span class="comment">    1440m ==  24h                                                     </span></span><br><span class="line"><span class="comment">    --&gt;</span>                                                                 </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.trash.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span>                                    </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1440<span class="tag">&lt;/<span class="name">value</span>&gt;</span>                                                 </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br></pre></td></tr></table></figure><hr><p>从回收站还原的命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mv hdfs://qianfeng01:9000/user/root/.Trash/Current/a.txt /b.txt</span><br></pre></td></tr></table></figure><p>功能测试</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306040012133.png" alt="img-202306040012133" style="zoom:80%;" /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@qianfeng01 hadoop]#</span><br><span class="line">[root@qianfeng01 hadoop]# hadoop fs -rm /a.txt</span><br><span class="line">23/05/30 13:56:50 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 1440 minutes, Emptier interval = 0 minutes.</span><br><span class="line">23/05/30 13:56:50 INFO fs.TrashPolicyDefault: Moved: &#x27;hdfs://qianfeng01:9000/a.txt&#x27; to trash at: hdfs://qianfeng01:9000/user/root/.Trash/Current/a.txt</span><br><span class="line">Moved: &#x27;hdfs://qianfeng01:9000/a.txt&#x27; to trash at: hdfs://qianfeng01:9000/user/root/.Trash/Current</span><br><span class="line">[root@qianfeng01 hadoop]#</span><br><span class="line">[root@qianfeng01 hadoop]#</span><br><span class="line">[root@qianfeng01 hadoop]#</span><br><span class="line">[root@qianfeng01 hadoop]# hadoop fs -mv hdfs://qianfeng01:9000/user/root/.Trash/Current/a.txt /b.txt # 从垃圾站回收并移动并重命名到根目录下</span><br><span class="line">[root@qianfeng01 hadoop]#</span><br></pre></td></tr></table></figure><p>测试完成，关闭Hadoop使用命令<code>stop-all.sh</code></p><hr><h2 id="二、搭建完全分布式运行模式"><a href="#二、搭建完全分布式运行模式" class="headerlink" title="二、搭建完全分布式运行模式"></a>二、搭建完全分布式运行模式</h2><hr><h3 id="1-虚拟机克隆"><a href="#1-虚拟机克隆" class="headerlink" title="1.虚拟机克隆"></a>1.虚拟机克隆</h3><p>从BigData01克隆到BigData02,BigData03</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202305301422550.png" alt="image-20230530142200018" style="zoom: 50%;" /><p>克隆完成后，依次启动三个虚拟机，查看各虚拟机ip是否是依次往后顺延的</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202305301422009.png" alt="image-20230530142249994"></p><p>没有依次顺延，需要将重复的ip地址更改（BigData02、BigData03的ip地址改为顺延后的）</p><p>依次输入<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>来更改网卡配置的ip信息</p><p><code>systemctl restart network</code>  更改好后，重启一下网络</p><hr><h3 id="2-Hadoop完全分布式环境配置（类似Day01伪分布式的配置操作）"><a href="#2-Hadoop完全分布式环境配置（类似Day01伪分布式的配置操作）" class="headerlink" title="2.Hadoop完全分布式环境配置（类似Day01伪分布式的配置操作）"></a>2.Hadoop完全分布式环境配置（类似Day01伪分布式的配置操作）</h3><p><a href="">Day01伪分布式的配置操作</a></p><h4 id="1-在三个节点上关闭防火墙"><a href="#1-在三个节点上关闭防火墙" class="headerlink" title="(1).在三个节点上关闭防火墙"></a>(1).在三个节点上关闭防火墙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld # 临时关闭</span><br><span class="line">sudo systemctl disable firewalld # 永久关闭</span><br></pre></td></tr></table></figure><hr><h4 id="2-在三个节点上配置主机名称"><a href="#2-在三个节点上配置主机名称" class="headerlink" title="(2).在三个节点上配置主机名称"></a>(2).在三个节点上配置主机名称</h4><p><code>vim /etc/hostname</code></p><p>将主机名依次指定为qianfeng01,qianfeng02,qianfeng03</p><hr><h4 id="3-配置三个节点的hosts文件"><a href="#3-配置三个节点的hosts文件" class="headerlink" title="(3).配置三个节点的hosts文件"></a>(3).配置三个节点的hosts文件</h4><p>将主机名称和IP地址进行映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">xx.xx.xx.xx qianfeng01</span><br><span class="line">xx.xx.xx.xx qianfeng02</span><br><span class="line">xx.xx.xx.xx qianfeng03</span><br></pre></td></tr></table></figure><p>注意，三个节点映射完成后那么三个节点的hostname文件内容将是一样的</p><hr><h4 id="4-对三个节点配置SSH免密互通"><a href="#4-对三个节点配置SSH免密互通" class="headerlink" title="(4).对三个节点配置SSH免密互通"></a>(4).对三个节点配置SSH免密互通</h4><p>三个节点上都需要将生成的公钥拷贝给远程服务器，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen # 生成自己的公钥和秘钥 （依次敲回车即可）</span><br><span class="line">ssh-copy-id root@qianfeng01 # 将生成的公钥拷贝给远程服务器</span><br><span class="line">ssh-copy-id root@qianfeng02</span><br><span class="line">ssh-copy-id root@qianfeng03</span><br></pre></td></tr></table></figure><p>测试ssh功能，</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202306040015797.png" alt="img-202306040015797"></p><hr><h4 id="5-三个节点重新启动虚拟机让所有的配置生效"><a href="#5-三个节点重新启动虚拟机让所有的配置生效" class="headerlink" title="(5).三个节点重新启动虚拟机让所有的配置生效"></a>(5).三个节点重新启动虚拟机让所有的配置生效</h4><p>三个节点都输入命令，<code>reboot</code></p><hr><h4 id="6-进入Hadoop安装目录的子目录"><a href="#6-进入Hadoop安装目录的子目录" class="headerlink" title="(6).进入Hadoop安装目录的子目录"></a>(6).进入Hadoop安装目录的子目录</h4><p><code>cd /home/software/hadoop-2.7.6/etc/hadoop/</code></p><p><strong>a. 编辑<code>hadoop-env.sh</code>文件</strong></p><p><code>vim hadoop-env.sh</code>        一般命令模式下(ESC)<code>:set nu</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1) 修改第25行JAVA_HOME的路径:</span><br><span class="line">export JAVA_HOME=/home/software/jdk1.8</span><br><span class="line"></span><br><span class="line">2) 修改第33行HADOOP_CONF_DIR的路径:</span><br><span class="line">export HADOOP_CONF_DIR=/home/software/hadoop-2.7.6/etc/hadoop</span><br><span class="line"></span><br><span class="line">3) 保存退出之后需要让该文件重新生效:</span><br><span class="line">source hadoop-env.sh</span><br></pre></td></tr></table></figure><hr><p><strong>b. 编辑<code>core-site.xml</code>文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定在Zookeeper上注册结点的名称 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">porperty</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定Hadoop数据存储目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/software/hadoop-2.7.6/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定Zookeeper的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.orum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng01:2181,qianfeng02:2181,qianfeng03:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>c.编辑<code>hdfs-site.xml</code>文件</strong></p><p>hadoop01/hadoop02 改为自己的主机名称，同时注意版本号要与自己安装的一致：<code>hadoop-2.7.6</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定在Zookeeper上注册的节点名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ns集群下有两个namenode，分别为nn1, nn2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.ns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nn1的RPC通信--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.ns.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng01:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nn1的http通信--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.ns.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng01:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- nn2的RPC通信地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.ns.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng02:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- nn2的http通信地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.ns.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng02:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定namenode的元数据在JournalNode上存放的位置，这样，namenode2可以从journalnode集群里的指定位置上获取信息，达到热备效果--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://qianfeng01:8485;qianfeng02:8485;qianfeng03:8485/ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/software/hadoop-2.7.6/tmp/journal<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启NameNode故障时自动切换 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置失败自动切换实现方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.ns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置隔离机制 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用隔离机制时需要ssh免登陆 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置namenode存放元数据的目录，可以不配置，如果不配置则默认放到hadoop.tmp.dir下--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///home/software/hadoop-2.7.6/tmp/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置datanode存放元数据的目录，可以不配置，如果不配置则默认放到hadoop.tmp.dir下--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///home/software/hadoop-2.7.6/tmp/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置副本数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置用户的操作权限，false表示关闭权限验证，任何用户都可以操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>d.编辑<code>yarn-site.xml</code>文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置yarn的高可用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定两个resourcemaneger的名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置rm1的主机--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置rm2的主机--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启yarn恢复机制--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.recovery.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行rm恢复机制实现类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.store.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置zookeeper的地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng01:2181,qianfeng02:2181,qianfeng03:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行yarn集群的别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ns-yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定nodemanager启动时加载server的方式为shuffle server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定resourcemanager地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qianfeng03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>e.编辑<code>map-site.xml</code>文件</strong></p><p>先将模板问价复制一份并重命名，<code>cp mapred-site.xml.template mapred-site.xml</code></p><p>再配置<code>map-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定Mapreduce程序在Yarn上运行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>f.编辑<code>slaves</code>文件</strong>（当前的<code>/home/software/hadoop-2.7.6/etc/hadoop/</code>目录下）</p><p><code>vim slaves</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qianfeng01</span><br><span class="line">qianfeng02</span><br><span class="line">qianfeng03</span><br></pre></td></tr></table></figure><hr><h4 id="7-将第一个节点上的Hadoop配置好的整个文件夹拷贝给另外两个节点"><a href="#7-将第一个节点上的Hadoop配置好的整个文件夹拷贝给另外两个节点" class="headerlink" title="(7)将第一个节点上的Hadoop配置好的整个文件夹拷贝给另外两个节点"></a>(7)将第一个节点上的Hadoop配置好的整个文件夹拷贝给另外两个节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r hadoop-2.7.6 root@qianfeng02:/home/software/</span><br><span class="line">scp -r hadoop-2.7.6 root@qianfeng03:/home/software/</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day02-05-30-Hadoop核心技术&quot;&gt;&lt;a href=&quot;#Day02-05-30-Hadoop核心技术&quot; class=&quot;headerlink&quot; title=&quot;Day02(05/30) Hadoop核心技术&quot;&gt;&lt;/a&gt;Day02(05/30) Hadoop</summary>
      
    
    
    
    <category term="大数据开发" scheme="https://ariesfun.gitee.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="大数据框架" scheme="https://ariesfun.gitee.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Linux" scheme="https://ariesfun.gitee.io/tags/Linux/"/>
    
    <category term="Java" scheme="https://ariesfun.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>23生产实习 Day01(05/29) Hadoop运行环境搭建及配置</title>
    <link href="https://ariesfun.gitee.io/posts/a63b.html"/>
    <id>https://ariesfun.gitee.io/posts/a63b.html</id>
    <published>2023-06-03T17:11:35.942Z</published>
    <updated>2023-06-03T17:27:08.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day01-05-29-Hadoop运行环境搭建及配置"><a href="#Day01-05-29-Hadoop运行环境搭建及配置" class="headerlink" title="Day01(05/29) Hadoop运行环境搭建及配置"></a>Day01(05/29) Hadoop运行环境搭建及配置</h2><hr><p><strong><a href="https://ariesfun.gitee.io/posts/5544.html">查看笔记合集</a></strong></p><h3 id="0-软件环境准备"><a href="#0-软件环境准备" class="headerlink" title="0.软件环境准备"></a><strong>0.软件环境准备</strong></h3><p>虚拟化平台，VMware Workstation 16 Pro</p><p>虚拟机镜像，CentOS7, ISO:<code>CentOS-7-x86_64-DVD-2207-02.iso</code></p><p>远程连接工具, MobaXterm</p><p>一台笔电，操作系统为Win10Pro</p><p>相关资源文件，放在<a href="http://10.200.21.35:8100/s/WJhg">共享网盘资源</a>里了（博客首页左侧的公告）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop-2.7.6.tar.gz # hadoop安装包</span><br><span class="line">jdk-8u131-linux-x64.tar.gz # jdk1.8-linux安装包</span><br></pre></td></tr></table></figure><hr><h3 id="1-关闭防火墙"><a href="#1-关闭防火墙" class="headerlink" title="1.关闭防火墙"></a><strong>1.关闭防火墙</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld # 临时关闭</span><br><span class="line">sudo systemctl disable firewalld # 永久关闭</span><br></pre></td></tr></table></figure><hr><h3 id="2-配置主机名称"><a href="#2-配置主机名称" class="headerlink" title="2.配置主机名称"></a><strong>2.配置主机名称</strong></h3><p>a. 注意:在Hadoop集群中的主机名称不能存在<code>_</code>和<code>-</code>,如果存在则会导致Hadoop在集群中无法找到该节点<br>b. 编辑文件:<code>vim /etc/hostname</code><br>c. 将主机名称进行指定然后保存退出</p><hr><h3 id="3-配置hosts文件-将主机名称和ip地址进行映射"><a href="#3-配置hosts文件-将主机名称和ip地址进行映射" class="headerlink" title="3.配置hosts文件,将主机名称和ip地址进行映射"></a><strong>3.配置hosts文件,将主机名称和ip地址进行映射</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts # 编辑hosts文件</span><br><span class="line">xx.xx.xx.xx qianfeng01 # 将主机名称与ip地址进行映射</span><br></pre></td></tr></table></figure><hr><h3 id="4-重新启动虚拟机让所有的配置进行生效"><a href="#4-重新启动虚拟机让所有的配置进行生效" class="headerlink" title="4.重新启动虚拟机让所有的配置进行生效"></a><strong>4.重新启动虚拟机让所有的配置进行生效</strong></h3><p>在当前节点输入：<code>reboot</code></p><hr><h3 id="5-配置SSH免密互通"><a href="#5-配置SSH免密互通" class="headerlink" title="5.配置SSH免密互通"></a><strong>5.配置SSH免密互通</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen # 生成自己的公钥和秘钥 </span><br><span class="line">ssh-copy-id root@qianfeng01 # 将生成的公钥拷贝给远程服务器</span><br></pre></td></tr></table></figure><hr><h3 id="6-进入Hadoop安装目录的子目录"><a href="#6-进入Hadoop安装目录的子目录" class="headerlink" title="6.进入Hadoop安装目录的子目录"></a><strong>6.进入Hadoop安装目录的子目录</strong></h3><p><code>cd /home/software/hadoop-2.7.6/etc/hadoop/</code></p><p><strong>a. 编辑<code>hadoop-env.sh</code>文件</strong></p><p>vim打开显示行号功能，进入一般命令模式(ESC),输入<code>:set nu</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1) 修改第25行JAVA_HOME的路径:</span><br><span class="line">export JAVA_HOME=/home/software/jdk1.8</span><br><span class="line"></span><br><span class="line">2) 修改第33行HADOOP_CONF_DIR的路径:</span><br><span class="line">export HADOOP_CONF_DIR=/home/software/hadoop-2.7.6/etc/hadoop</span><br><span class="line"></span><br><span class="line">3) 保存退出之后需要让该文件重新生效:</span><br><span class="line">source hadoop-env.sh</span><br></pre></td></tr></table></figure><hr><p><strong>b. 编辑<code>core-site.xml</code>文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 指定HDFS中的主节点 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://qianfeng01:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 运行Hadoop数据存储目录 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/software/hadoop-2.7.6/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>c.编辑<code>hdfs-site.xml</code>文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置HDFS的副本数量,在伪分布式的场景中副本数量只能为1 --&gt;</span> # 伪分布式只有1个结点</span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>d.编辑<code>mapred-site.xml</code>文件</strong><br>将<code>mapred-site.xml.template</code>模板文件复制一份并且重命名为<code>mapred-site.xml</code></p><p><code>cp mapred-site.xml.template mapred-site.xml</code></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day01-05-29-Hadoop运行环境搭建及配置&quot;&gt;&lt;a href=&quot;#Day01-05-29-Hadoop运行环境搭建及配置&quot; class=&quot;headerlink&quot; title=&quot;Day01(05/29) Hadoop运行环境搭建及配置&quot;&gt;&lt;/a&gt;Day0</summary>
      
    
    
    
    <category term="大数据开发" scheme="https://ariesfun.gitee.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="大数据框架" scheme="https://ariesfun.gitee.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Linux" scheme="https://ariesfun.gitee.io/tags/Linux/"/>
    
    <category term="Java" scheme="https://ariesfun.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>AcWing周赛 题解及知识点汇总 更新中...</title>
    <link href="https://ariesfun.gitee.io/posts/6086.html"/>
    <id>https://ariesfun.gitee.io/posts/6086.html</id>
    <published>2023-05-07T06:07:39.419Z</published>
    <updated>2023-05-21T17:21:03.192Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="AcWing-周赛-第104场题解"><a href="#AcWing-周赛-第104场题解" class="headerlink" title="AcWing-周赛 第104场题解"></a>AcWing-周赛 第104场题解</h2><h4 id="T1-4981-第几项"><a href="#T1-4981-第几项" class="headerlink" title="T1: 4981. 第几项"></a>T1: <a href="https://www.acwing.com/problem/content/4984/">4981. 第几项</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6475895/">AcWing 4981. 第几项</a></p><hr><h4 id="T2-4982-进制"><a href="#T2-4982-进制" class="headerlink" title="T2: 4982. 进制"></a>T2: <a href="https://www.acwing.com/problem/content/4985/">4982. 进制</a></h4><p><strong>考察知识点</strong>：<u>进位制，位运算，枚举</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6482361/">AcWing 4982. 进制</a></p><hr><h4 id="T2-4983-最大的数"><a href="#T2-4983-最大的数" class="headerlink" title="T2: 4983. 最大的数"></a>T2: <a href="https://www.acwing.com/problem/content/4986/">4983. 最大的数</a></h4><p><strong>考察知识点</strong>：<u>枚举，思维题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6482409/">AcWing 4983. 最大的数</a></p><hr><h2 id="AcWing-周赛-第103场题解"><a href="#AcWing-周赛-第103场题解" class="headerlink" title="AcWing-周赛 第103场题解"></a>AcWing-周赛 第103场题解</h2><h4 id="T1-4978-解方程"><a href="#T1-4978-解方程" class="headerlink" title="T1: 4978. 解方程"></a>T1: <a href="https://www.acwing.com/problem/content/4981/">4978. 解方程</a></h4><p><strong>考察知识点</strong>：<u>解方程，枚举</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6441920/">AcWing 4978. 解方程</a></p><hr><h4 id="T2-4979-合适的环"><a href="#T2-4979-合适的环" class="headerlink" title="T2: 4979. 合适的环"></a>T2: <a href="https://www.acwing.com/problem/content/4982/">4979. 合适的环</a></h4><p><strong>考察知识点</strong>：<u>无向图存储，枚举</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6445870/">AcWing 4979. 合适的环</a></p><hr><h4 id="T3-4980-猜数字"><a href="#T3-4980-猜数字" class="headerlink" title="T3: 4980. 猜数字"></a>T3: <a href="https://www.acwing.com/problem/content/4983/">4980. 猜数字</a></h4><p><strong>考察知识点</strong>：<u>思维题，(试除法)分解质因数，枚举，STL</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6446382/">AcWing 4980. 猜数字</a></p><hr><h2 id="AcWing-周赛-第102场题解"><a href="#AcWing-周赛-第102场题解" class="headerlink" title="AcWing-周赛 第102场题解"></a>AcWing-周赛 第102场题解</h2><h4 id="T1-4975-或运算"><a href="#T1-4975-或运算" class="headerlink" title="T1: 4975. 或运算"></a>T1: <a href="https://www.acwing.com/problem/content/4978/">4975. 或运算</a></h4><p><strong>考察知识点</strong>：<u>位运算</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6408375/">AcWing 4975. 或运算</a></p><hr><h4 id="T2-4976-倍增"><a href="#T2-4976-倍增" class="headerlink" title="T2: 4976. 倍增 "></a>T2: <a href="https://www.acwing.com/problem/content/4979/">4976. 倍增 </a></h4><p><strong>考察知识点</strong>：<u>分解质因数，思维题，理清题意</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6408515/">AcWing 4976. 倍增</a></p><hr><h4 id="T3-4977-三元组"><a href="#T3-4977-三元组" class="headerlink" title="T3: 4977. 三元组"></a>T3: <a href="https://www.acwing.com/problem/content/4980/">4977. 三元组</a></h4><p><strong>考察知识点</strong>：<u>枚举，乘法原理，哈希表，类前后缀分解</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6410962/">AcWing 4977. 三元组</a></p><hr><h2 id="AcWing-周赛-第101场题解"><a href="#AcWing-周赛-第101场题解" class="headerlink" title="AcWing-周赛 第101场题解"></a>AcWing-周赛 第101场题解</h2><h4 id="T1-4972-解方程"><a href="#T1-4972-解方程" class="headerlink" title="T1: 4972. 解方程 "></a>T1: <a href="https://www.acwing.com/problem/content/4975/">4972. 解方程 </a></h4><p><strong>考察知识点</strong>：<u>解方程，语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6369265/">AcWing 4972. 解方程</a></p><hr><h2 id="AcWing-周赛-第100场题解"><a href="#AcWing-周赛-第100场题解" class="headerlink" title="AcWing-周赛 第100场题解"></a>AcWing-周赛 第100场题解</h2><h4 id="T1-4953-比赛"><a href="#T1-4953-比赛" class="headerlink" title="T1: 4953. 比赛"></a>T1: <a href="https://www.acwing.com/problem/content/4956/">4953. 比赛</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6323965/">AcWing 4953. 比赛</a></p><hr><h4 id="T2-4954-挑选"><a href="#T2-4954-挑选" class="headerlink" title="T2: 4954. 挑选"></a>T2: <a href="https://www.acwing.com/problem/content/4957/">4954. 挑选</a></h4><p><strong>考察知识点</strong>：<u>二进制枚举法</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6331136/">AcWing 4954. 挑选</a></p><hr><h2 id="AcWing-周赛-第99场题解"><a href="#AcWing-周赛-第99场题解" class="headerlink" title="AcWing-周赛 第99场题解"></a>AcWing-周赛 第99场题解</h2><h4 id="T1-4950-四则运算"><a href="#T1-4950-四则运算" class="headerlink" title="T1: 4950. 四则运算"></a>T1: <a href="https://www.acwing.com/problem/content/4953/">4950. 四则运算</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6279695/">AcWing 4950. 四则运算</a></p><hr><h4 id="T2-4951-整理账本"><a href="#T2-4951-整理账本" class="headerlink" title="T2: 4951. 整理账本"></a>T2: <a href="https://www.acwing.com/problem/content/4954/">4951. 整理账本</a></h4><p><strong>考察知识点</strong>：<u>STL的使用，unordered_map、map、vector、pair、sort，</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6282996/">AcWing 4951. 整理账本</a></p><hr><h2 id="AcWing-周赛-第98场题解"><a href="#AcWing-周赛-第98场题解" class="headerlink" title="AcWing-周赛 第98场题解"></a>AcWing-周赛 第98场题解</h2><h4 id="T1-4947-大整数"><a href="#T1-4947-大整数" class="headerlink" title="T1: 4947. 大整数"></a>T1: <a href="https://www.acwing.com/problem/content/4950/">4947. 大整数</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6228724/">AcWing 4947. 大整数</a></p><hr><h4 id="T2-4948-大乘积"><a href="#T2-4948-大乘积" class="headerlink" title="T2: 4948. 大乘积"></a>T2: <a href="https://www.acwing.com/problem/content/4951/">4948. 大乘积</a></h4><p><strong>考察知识点</strong>：<u>语法题，字符串处理</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6238467/">AcWing 4948. 大乘积</a></p><hr><h2 id="AcWing-周赛-第97场题解"><a href="#AcWing-周赛-第97场题解" class="headerlink" title="AcWing-周赛 第97场题解"></a>AcWing-周赛 第97场题解</h2><h4 id="T1-4944-热身计算"><a href="#T1-4944-热身计算" class="headerlink" title="T1: 4944. 热身计算"></a>T1: <a href="https://www.acwing.com/problem/content/4947/">4944. 热身计算</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6125128/">AcWing 4944. 热身计算</a></p><hr><h4 id="T2-4945-比大小"><a href="#T2-4945-比大小" class="headerlink" title="T2: 4945. 比大小"></a>T2: <a href="https://www.acwing.com/problem/content/4948/">4945. 比大小</a></h4><p><strong>考察知识点</strong>：<u>直接模拟，快速幂计算，秦九韶算法</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6125715/">AcWing 4945. 比大小</a></p><hr><h4 id="T3-4946-叶子节点"><a href="#T3-4946-叶子节点" class="headerlink" title="T3: 4946. 叶子节点"></a>T3: <a href="https://www.acwing.com/problem/content/4949/">4946. 叶子节点</a></h4><p><strong>考察知识点</strong>：<u>树的深度优先遍历</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6156437/">AcWing 4946. 叶子节点</a></p><hr><h2 id="第二届ACC-AcWing-Cup-全国联赛"><a href="#第二届ACC-AcWing-Cup-全国联赛" class="headerlink" title="第二届ACC(AcWing Cup)全国联赛"></a>第二届ACC(AcWing Cup)全国联赛</h2><h4 id="T1-4941-凑数"><a href="#T1-4941-凑数" class="headerlink" title="T1: 4941. 凑数"></a>T1: <a href="https://www.acwing.com/problem/content/4944/">4941. 凑数</a></h4><p><strong>考察知识点</strong>：<u>位运算，二进制</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6175836/">AcWing 4941. 凑数</a></p><hr><h4 id="T2-4942-砝码称重"><a href="#T2-4942-砝码称重" class="headerlink" title="T2: 4942. 砝码称重"></a>T2: <a href="https://www.acwing.com/problem/content/4945/">4942. 砝码称重</a></h4><p><strong>考察知识点</strong>：<u>同余性质，n进制</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6177606/">AcWing 4942. 砝码称重</a></p><hr><h2 id="AcWing-周赛-第96场题解"><a href="#AcWing-周赛-第96场题解" class="headerlink" title="AcWing-周赛 第96场题解"></a>AcWing-周赛 第96场题解</h2><h4 id="T1-4876-完美数"><a href="#T1-4876-完美数" class="headerlink" title="T1: 4876. 完美数"></a>T1: <a href="https://www.acwing.com/problem/content/4879/">4876. 完美数</a></h4><p><strong>考察知识点</strong>：<u>完美数，整除性质</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6037798/">AcWing 4876. 完美数</a></p><hr><h4 id="T2-4877-最大价值"><a href="#T2-4877-最大价值" class="headerlink" title="T2: 4877. 最大价值"></a>T2: <a href="https://www.acwing.com/problem/content/4880/">4877. 最大价值</a></h4><p><strong>考察知识点</strong>：<u>DP裸题，完全背包+多重背包组合</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/6062906/">AcWing 4877. 最大价值</a></p><hr><h2 id="AcWing-周赛-第95场题解"><a href="#AcWing-周赛-第95场题解" class="headerlink" title="AcWing-周赛 第95场题解"></a>AcWing-周赛 第95场题解</h2><h4 id="T1-4873-简单计算"><a href="#T1-4873-简单计算" class="headerlink" title="T1:4873. 简单计算"></a>T1:<a href="https://www.acwing.com/problem/content/4876/">4873. 简单计算</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5957060/">AcWing 4873. 简单计算</a></p><hr><h4 id="T2-4874-约数"><a href="#T2-4874-约数" class="headerlink" title="T2: 4874. 约数"></a>T2: <a href="https://www.acwing.com/problem/content/4877/">4874. 约数</a></h4><p><strong>考察知识点</strong>：<u>筛质数，线性筛法</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5959789/">AcWing 4874. 约数</a></p><hr><h2 id="AcWing-周赛-第94场题解"><a href="#AcWing-周赛-第94场题解" class="headerlink" title="AcWing-周赛 第94场题解"></a>AcWing-周赛 第94场题解</h2><h4 id="T1-4870-装物品"><a href="#T1-4870-装物品" class="headerlink" title="T1: 4870. 装物品"></a>T1: <a href="https://www.acwing.com/problem/content/4873/">4870. 装物品</a></h4><p><strong>考察知识点</strong>：<u>判断余数，向上取整</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5852668/">AcWing 4870. 装物品</a></p><hr><h2 id="AcWing-周赛-第93场题解"><a href="#AcWing-周赛-第93场题解" class="headerlink" title="AcWing-周赛 第93场题解"></a>AcWing-周赛 第93场题解</h2><h4 id="T1-4867-整除数"><a href="#T1-4867-整除数" class="headerlink" title="T1: 4867. 整除数"></a>T1: <a href="https://www.acwing.com/problem/content/4870/">4867. 整除数</a></h4><p><strong>考察知识点</strong>：<u>除法性质，整除</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5738492/">AcWing 4867. 整除数</a></p><hr><h2 id="AcWing-周赛-第92场题解"><a href="#AcWing-周赛-第92场题解" class="headerlink" title="AcWing-周赛 第92场题解"></a>AcWing-周赛 第92场题解</h2><h4 id="T1-4864-多边形"><a href="#T1-4864-多边形" class="headerlink" title="T1: 4864. 多边形"></a>T1: <a href="https://www.acwing.com/problem/content/4867/">4864. 多边形</a></h4><p><strong>考察知识点</strong>：<u>语法题</u></p><p><strong>题解及分析</strong>：<a href="https://www.acwing.com/activity/content/code/content/5628101/">AcWing 4864. 多边形</a></p><hr><h2 id="AcWing-周赛-第xx场题解"><a href="#AcWing-周赛-第xx场题解" class="headerlink" title="AcWing-周赛 第xx场题解"></a>AcWing-周赛 第xx场题解</h2><h4 id="T1"><a href="#T1" class="headerlink" title="T1:"></a>T1:</h4><p><strong>考察知识点</strong>：</p><p><strong>题解及分析</strong>：</p><p>ps:还有之前的一些周赛，待整理… (抽空更)</p><hr><h2 id="活动地址"><a href="#活动地址" class="headerlink" title="活动地址"></a>活动地址</h2><p><a href="https://www.acwing.com/activity/1/competition/">竞赛 - AcWing周赛</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;AcWing-周赛-第104场题解&quot;&gt;&lt;a href=&quot;#AcWing-周赛-第104场题解&quot; class=&quot;headerlink&quot; title=&quot;AcWing-周赛 第104场题解&quot;&gt;&lt;/a&gt;AcWing-周赛 第104场题解&lt;/h2&gt;&lt;h4 id=&quot;</summary>
      
    
    
    
    <category term="AcWing周赛" scheme="https://ariesfun.gitee.io/categories/AcWing%E5%91%A8%E8%B5%9B/"/>
    
    
    <category term="C/C++" scheme="https://ariesfun.gitee.io/tags/C-C/"/>
    
    <category term="AcWing" scheme="https://ariesfun.gitee.io/tags/AcWing/"/>
    
    <category term="刷题记录" scheme="https://ariesfun.gitee.io/tags/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础 第四讲 SSH和SCP</title>
    <link href="https://ariesfun.gitee.io/posts/58be.html"/>
    <id>https://ariesfun.gitee.io/posts/58be.html</id>
    <published>2023-04-30T19:40:46.040Z</published>
    <updated>2023-05-01T08:20:52.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux基础-第四讲-SSH和SCP"><a href="#Linux基础-第四讲-SSH和SCP" class="headerlink" title="Linux基础 第四讲 SSH和SCP"></a>Linux基础 第四讲 SSH和SCP</h1><h2 id="1-教程"><a href="#1-教程" class="headerlink" title="1. 教程"></a>1. 教程</h2><h3 id="（1）ssh登录"><a href="#（1）ssh登录" class="headerlink" title="（1）ssh登录"></a>（1）ssh登录</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p><strong>远程登录服务器：ssh user@hostname</strong></p><ul><li>user: 用户名</li><li>hostname: IP地址或域名</li></ul><p><strong>第一次登录</strong>时会提示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;123.57.47.211 (123.57.47.211)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:iy237yysfCe013/l+kpDGfEG9xxHxm0dnxnAbJTPpG8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span><br></pre></td></tr></table></figure><p>输入yes，然后回车即可。</p><p>这样会将该服务器的信息记录在<code>~/.ssh/known_hosts</code>文件中。</p><p>然后输入密码即可登录到远程服务器中。</p><hr><p>默认登录端口号为22。如果想<strong>登录某一特定端口</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname -p 22</span><br></pre></td></tr></table></figure><hr><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>创建文件 <code>~/.ssh/config</code>。</p><p>然后在文件中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host myserver1</span><br><span class="line">    HostName IP地址或域名</span><br><span class="line">    User 用户名</span><br><span class="line"></span><br><span class="line">Host myserver2</span><br><span class="line">    HostName IP地址或域名</span><br><span class="line">    User 用户名</span><br></pre></td></tr></table></figure><p>之后再使用服务器时，可以直接使用别名myserver1、myserver2。</p><p><strong>ssh + myserver1</strong> <strong>使用别名登录</strong></p><hr><h4 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h4><p>创建密钥：<code>ssh-keygen</code><br>然后一直回车即可。</p><p>执行结束后，<code>~/.ssh/</code>目录下会多两个文件：</p><ul><li><p><strong>id_rsa：私钥</strong></p></li><li><p><strong>id_rsa.pub：公钥(可以公开)</strong></p></li></ul><p><strong>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</strong></p><p>例如，想免密登录myserver服务器。则将公钥中的内容，复制到myserver中的**~/.ssh/authorized_keys**文件里即可。</p><p>也可以使用如下命令<strong>一键添加公钥</strong>：</p><p><code>ssh-copy-id myserver</code></p><hr><h4 id="执行命令-自动化运维会用到"><a href="#执行命令-自动化运维会用到" class="headerlink" title="执行命令(自动化运维会用到)"></a>执行命令(自动化运维会用到)</h4><p>命令格式：<code>ssh user@hostname command</code></p><p><strong>命令会在服务端运行</strong></p><p>例如    <code>ssh user@hostname ls -a</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单引号中的<span class="variable">$i</span>可以求值</span></span><br><span class="line"></span><br><span class="line">ssh myserver &#x27;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&#x27;  # 将服务器端的结果返回到当前终端里输出</span><br><span class="line">或者</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">双引号中的<span class="variable">$i</span>不可以求值</span></span><br><span class="line"></span><br><span class="line">ssh myserver &quot;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="（2）scp传文件"><a href="#（2）scp传文件" class="headerlink" title="（2）scp传文件"></a>（2）scp传文件</h3><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>命令格式：    <code>scp source destination</code><br>将source路径下的文件复制到destination中</p><p><strong>一次复制多个文件：</strong></p><p><code>scp source1 source2 destination</code></p><p><strong>复制文件夹：</strong></p><p><code>scp -r ~/tmp myserver:/home/acs/</code>  <strong># -r要放在路径前面</strong><br>将本地家目录中的tmp文件夹复制到myserver服务器中的<code>/home/acs/</code>目录下。(家目录)</p><p><code>scp -r ~/tmp myserver:homework/</code><br>将本地家目录中的tmp文件夹复制到myserver服务器中的<code>~/homework/</code>目录下。</p><p><code>scp -r myserver:homework .</code><br>将myserver服务器中的~/homework/文件夹复制到本地的当前路径下。</p><p>ps:</p><p>对于传文件，文件传过去，对于<strong>文件名不冲突的文件，是以追加的方式</strong>。(类似cp命令)</p><p>而所传的文件在另一边已经有了<strong>同名时，是以覆盖的形式</strong>, 文件夹不覆盖。</p><p>指定服务器的端口号：</p><p><code>scp -P 22 source1 source2 destination</code><br>注意： <strong>scp的-r -P等参数尽量加在source和destination之前</strong>。</p><p><strong>使用scp配置其他服务器的vim和tmux</strong> (y总的传家配置hh)<br><strong>scp ~/.vimrc ~/.tmux.conf myserver:</strong></p><hr><h2 id="2-获取ssh教程配套的远程服务器账号的信息"><a href="#2-获取ssh教程配套的远程服务器账号的信息" class="headerlink" title="2.获取ssh教程配套的远程服务器账号的信息"></a>2.获取ssh教程配套的远程服务器账号的信息</h2><p><code>homework 4 getinfo</code></p><hr><h2 id="3-创建作业-amp-测试作业的正确性"><a href="#3-创建作业-amp-测试作业的正确性" class="headerlink" title="3. 创建作业 &amp; 测试作业的正确性"></a>3. 创建作业 &amp; 测试作业的正确性</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">homework 4 create 可以重新创建所有lesson_4的作业</span><br><span class="line">homework 4 create id 可以单独创建lesson_4的第id个作业. e.g.</span><br><span class="line">    homework 4 create 0 可以只重新创建lesson_4的第0个作业</span><br><span class="line">homework 4 test 可以评测lesson_4的所有作业</span><br></pre></td></tr></table></figure><hr><h2 id="4-作业"><a href="#4-作业" class="headerlink" title="4. 作业"></a>4. 作业</h2><p>创建好作业后，先进入文件夹/home/acs/homework/lesson_4/，然后：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(0) 进入homework_0文件夹，要求：</span><br><span class="line">    [1] 该文件夹内容为空</span><br><span class="line">    [2] 配置服务器账号的密钥登陆方式。服务器信息可以通过如下命令获得：</span><br><span class="line">        homework 4 getinfo</span><br><span class="line">        将服务器账号的名称（Host）配置成：myserver</span><br><span class="line">        </span><br><span class="line">(1) 进入homework_1文件夹，下列描述中的“本地”均表示当前文件夹。要求：</span><br><span class="line">    [1] 在myserver服务器上创建并清空文件夹：~/homework/lesson_4/homework_1/</span><br><span class="line">    [2] 将本地的main.cpp文件上传到myserver中的~/homework/lesson_4/homework_1/目录中。</span><br><span class="line">    [3] 在本地创建文件夹dir。</span><br><span class="line">    [4] 将myserver中的/etc/lsb-release文件复制到dir中。</span><br><span class="line">    </span><br><span class="line">(2) 进入homework_2文件夹，下列描述中的“本地”均表示当前文件夹，要求：</span><br><span class="line">    [1] 在myserver服务器上创建并清空文件夹：~/homework/lesson_4/homework_2/</span><br><span class="line">    [2] 将本地的dir文件夹上传到myserver中的~/homework/lesson_4/homework_2/目录中。</span><br><span class="line">    </span><br><span class="line">(3) 进入homework_3文件夹，下列描述中的“本地”均表示当前文件夹，要求：</span><br><span class="line">    [1] 在本地创建文件夹dir。</span><br><span class="line">    [2] 将myserver中的/var/lib/locales/supported.d文件夹下载到本地dir文件夹中。</span><br><span class="line">    </span><br><span class="line">(4) 进入homework_4文件夹，编写脚本remote_mkdir.sh和remote_rmdir.sh，要求：</span><br><span class="line">    [1] 在myserver服务器上创建并清空文件夹：~/homework/lesson_4/homework_4/</span><br><span class="line">    [2] 本地目录下仅包含remote_mkdir.sh和remote_rmdir.sh</span><br><span class="line">    [3] remote_mkdir.sh和remote_rmdir.sh具有可执行权限</span><br><span class="line">    [4] remote_mkdir.sh接收一个传入参数。格式为 ./remote_mkdir.sh directory_name</span><br><span class="line">        该操作可以在myserver服务器上的~/homework/lesson_4/homework_4/目录下，创建一个名为directory_name的文件夹</span><br><span class="line">    [5] remote_rmdir.sh接收一个传入传输。格式为 ./remote_rmdir.sh directory_name</span><br><span class="line">        该操作可以将myserver服务器上的~/homework/lesson_4/homework_4/目录下的名为directory_name的文件夹删掉。</span><br><span class="line">    [6] 注意：传入的文件参数可能包含空格。两个脚本均不需要判断传入参数的合法性。</span><br></pre></td></tr></table></figure><hr><p><strong>章节作业打卡笔记：</strong><br><a href="https://www.acwing.com/activity/content/code/content/6375445/">homework_0</a>    <a href="https://www.acwing.com/activity/content/code/content/6375538/">homework_1</a>    <a href="https://www.acwing.com/activity/content/code/content/6375639/">homework_2</a><br><a href="https://www.acwing.com/activity/content/code/content/6375675/">homework_3</a>    <a href="https://www.acwing.com/activity/content/code/content/6375762/">homework_4</a></p><hr><h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5.参考资料"></a>5.参考资料</h2><p>讲义整理自Linux基础课讲义，及评论区的问答整理</p><p><a href="https://www.acwing.com/activity/content/57/">Linux基础课程-AcWing</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux基础-第四讲-SSH和SCP&quot;&gt;&lt;a href=&quot;#Linux基础-第四讲-SSH和SCP&quot; class=&quot;headerlink&quot; title=&quot;Linux基础 第四讲 SSH和SCP&quot;&gt;&lt;/a&gt;Linux基础 第四讲 SSH和SCP&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="Linux基础知识" scheme="https://ariesfun.gitee.io/categories/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Linux" scheme="https://ariesfun.gitee.io/tags/Linux/"/>
    
    <category term="ssh" scheme="https://ariesfun.gitee.io/tags/ssh/"/>
    
    <category term="scp" scheme="https://ariesfun.gitee.io/tags/scp/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘与机器学习 线性回归设计 实训1</title>
    <link href="https://ariesfun.gitee.io/posts/4f1a.html"/>
    <id>https://ariesfun.gitee.io/posts/4f1a.html</id>
    <published>2023-04-30T07:52:52.221Z</published>
    <updated>2023-04-30T07:52:52.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据挖掘与机器学习-线性回归设计-实训1"><a href="#数据挖掘与机器学习-线性回归设计-实训1" class="headerlink" title="数据挖掘与机器学习 线性回归设计 实训1"></a>数据挖掘与机器学习 线性回归设计 实训1</h2><h3 id="（1）实训目的"><a href="#（1）实训目的" class="headerlink" title="（1）实训目的"></a>（1）实训目的</h3><p><strong>1.掌握回归的基本思想；</strong></p><p><strong>2.掌握梯度法的基本原理 。</strong></p><hr><h3 id="（2）主要内容"><a href="#（2）主要内容" class="headerlink" title="（2）主要内容"></a>（2）主要内容</h3><p>1.实现一元线性回归；</p><p>2.画出散点图、回归参数与迭代次数的变化曲线；</p><p>3.分析不同数据变化对回归结果的影响。</p><hr><h3 id="（3）具体处理步骤"><a href="#（3）具体处理步骤" class="headerlink" title="（3）具体处理步骤"></a>（3）具体处理步骤</h3><h4 id="1-导入数据集，绘制数据的散点图"><a href="#1-导入数据集，绘制数据的散点图" class="headerlink" title="1. 导入数据集，绘制数据的散点图"></a>1. 导入数据集，绘制数据的散点图</h4><p><a href="https://pan.baidu.com/s/1jO2p0CSBQedb7QE7PkbJ3A?pwd=2023">data1.txt 数据集下载</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data=np.loadtxt(<span class="string">&quot;data1.txt&quot;</span>, delimiter=<span class="string">&quot;,&quot;</span>) <span class="comment"># 读取数据集，列索引分别是x和y</span></span><br><span class="line"></span><br><span class="line">x=data[:,<span class="number">0</span>:<span class="number">1</span>] <span class="comment"># 取x这列所有值,训练数据</span></span><br><span class="line">y=data[:,<span class="number">1</span>:]</span><br><span class="line">plt.scatter(x,y) <span class="comment"># 绘制散点图</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291223504.png" alt="img-202304291223504"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.shape <span class="comment"># 原数据集形状，n行m列</span></span><br></pre></td></tr></table></figure><pre><code>(97, 2)</code></pre><hr><h4 id="2-对特征进行归一化处理"><a href="#2-对特征进行归一化处理" class="headerlink" title="2. 对特征进行归一化处理"></a>2. 对特征进行归一化处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">featureNormalize</span>(<span class="params">x</span>): <span class="comment"># （特征值x的取值差别较大）需消除特征值的量纲</span></span><br><span class="line">    avg = x.mean()</span><br><span class="line">    sstd = np.std(x, axis=<span class="number">0</span>, ddof=<span class="number">1</span>) <span class="comment"># 进行标准差标准化处理（ddof是分母为n-1,无偏估计）</span></span><br><span class="line">    x = (x-avg)/sstd</span><br><span class="line">    <span class="keyword">return</span> x, avg, sstd</span><br></pre></td></tr></table></figure><hr><h4 id="3-1-定义损失函数-h-theta是预测函数（假设函数），j-theta是损失函数"><a href="#3-1-定义损失函数-h-theta是预测函数（假设函数），j-theta是损失函数" class="headerlink" title="3.1 定义损失函数   h_theta是预测函数（假设函数），j_theta是损失函数"></a>3.1 定义损失函数   h_theta是预测函数（假设函数），j_theta是损失函数</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291221890.png" alt="img-202304291221890" style="zoom:67%;" /><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291221178.png" alt="img-202304291221178" style="zoom: 80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">computeCost</span>(<span class="params">x, y, theta</span>): <span class="comment"># 损失函数j_theta</span></span><br><span class="line">    m = x.shape[<span class="number">0</span>] <span class="comment"># 获取第一维度的长度（行数），即X特征项对应的个数</span></span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>((np.dot(x,theta) - y)**<span class="number">2</span>)/(<span class="number">2</span>*m)</span><br></pre></td></tr></table></figure><hr><h4 id="3-2-梯度下降算法"><a href="#3-2-梯度下降算法" class="headerlink" title="3.2 梯度下降算法"></a>3.2 梯度下降算法</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291222715.png" alt="img-202304291222715" style="zoom:67%;" /><h6 id="利用公式-theta-是预测函数每项的系数，times：梯度下降次数，alpha：梯度下降参数变化率"><a href="#利用公式-theta-是预测函数每项的系数，times：梯度下降次数，alpha：梯度下降参数变化率" class="headerlink" title="利用公式 theta : 是预测函数每项的系数，times：梯度下降次数，alpha：梯度下降参数变化率"></a>利用公式 theta : 是预测函数每项的系数，times：梯度下降次数，alpha：梯度下降参数变化率</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gradientDescent</span>(<span class="params">x, y, theta, times, alpha</span>):</span><br><span class="line">    theta_0 = np.ones(x.shape[<span class="number">0</span>]).T</span><br><span class="line">    x = np.insert(x, <span class="number">0</span>, theta_0, axis=<span class="number">1</span>) <span class="comment"># 对原始数据加入一个全为1的列，方便后续计算</span></span><br><span class="line">    m = x.shape[<span class="number">0</span>] <span class="comment"># 行数</span></span><br><span class="line">    n = x.shape[<span class="number">1</span>] <span class="comment"># 列数</span></span><br><span class="line">    costs = np.zeros(times) <span class="comment"># 初始化损失数组</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(times): <span class="comment"># 循环迭代，计算梯度下降的值</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            theta[j] = theta[j] + (alpha/m) * np.<span class="built_in">sum</span>(y - np.dot(x,theta) * x[:,j].reshape(-<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        costs[num] = computeCost(x, y, theta)</span><br><span class="line">    <span class="keyword">return</span> costs <span class="comment"># 返回每次迭代计算的损失</span></span><br></pre></td></tr></table></figure><hr><h4 id="4-计算求得的直线"><a href="#4-计算求得的直线" class="headerlink" title="4. 计算求得的直线"></a>4. 计算求得的直线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x_orgin=x <span class="comment"># 分别取x，y这列的值</span></span><br><span class="line">y_orgin=y</span><br><span class="line"></span><br><span class="line">x1, avg, sstd = featureNormalize(x_orgin) <span class="comment"># 得到经特征归一化后的特征值x</span></span><br><span class="line"></span><br><span class="line">theta = np.zeros(x1.shape[<span class="number">1</span>]+<span class="number">1</span>).reshape(-<span class="number">1</span>,<span class="number">1</span>) <span class="comment"># 变为1列的列向量（2个theta值）</span></span><br><span class="line">times = <span class="number">600</span></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">costs = gradientDescent(x1, y_orgin, theta, times, alpha)</span><br><span class="line"></span><br><span class="line">plt.scatter(x1, y_orgin) <span class="comment"># x1是（-1~4）</span></span><br><span class="line">h_theta = theta[<span class="number">0</span>]+theta[<span class="number">1</span>]*x1 <span class="comment"># 预测的直线</span></span><br><span class="line">plt.plot(x1, h_theta, color= <span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291224464.png" alt="img-202304291224464"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;预测函数: y = %f + %f * x&#x27;</span> % (theta[<span class="number">0</span>], theta[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证，x=3时，y应该在23附近</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x=3, y = %f&#x27;</span> % (theta[<span class="number">0</span>] + <span class="number">3</span>*theta[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><pre><code>预测函数: y = 5.825092 + 5.884855 * xx=3, y = 23.479657</code></pre><hr><h4 id="5-画损失函数，损失随迭代次数变化的曲线"><a href="#5-画损失函数，损失随迭代次数变化的曲线" class="headerlink" title="5. 画损失函数，损失随迭代次数变化的曲线"></a>5. 画损失函数，损失随迭代次数变化的曲线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_times = np.linspace(<span class="number">1</span>,times,times)</span><br><span class="line">plt.plot(x_times, costs[<span class="number">0</span>:times], color=<span class="string">&quot;orange&quot;</span>,linewidth=<span class="number">3</span>) <span class="comment"># 纵坐标是损失值</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291224616.png" alt="img-202304291224616"></p><hr><h4 id="6-结果分析"><a href="#6-结果分析" class="headerlink" title="6. 结果分析"></a>6. 结果分析</h4><p><strong>分析可知，当迭代次数到200次左右时，损失函数趋于收敛损失值达到最小值，迭代次数太多，可能使得出现过拟合现象</strong></p><p><strong>alpha 越小时，即步长越小，使得训练过程中的变化速度较慢，但可能更易于损失函数收敛</strong></p><hr><h3 id="（4）参考资料"><a href="#（4）参考资料" class="headerlink" title="（4）参考资料"></a>（4）参考资料</h3><p><a href="https://pan.baidu.com/s/1jO2p0CSBQedb7QE7PkbJ3A?pwd=2023">data1.txt 数据集下载</a></p><p><a href="https://www.bilibili.com/video/BV1yf4y1o7A5/?spm_id_from=333.788&vd_source=29b001fc6ca0d80398a993dc92c03a9b">机器学习讲解-B站</a></p><p><a href="https://www.bilibili.com/video/BV1GZ4y1e7fK/?share_source=copy_web&vd_source=64863a79f6edd334371cb7b41a0df347">使用梯度下降法求解线性回归问题</a></p><p><a href="https://www.acwing.com/blog/content/25336/">Python机器学习笔记 - AcWing</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据挖掘与机器学习-线性回归设计-实训1&quot;&gt;&lt;a href=&quot;#数据挖掘与机器学习-线性回归设计-实训1&quot; class=&quot;headerlink&quot; title=&quot;数据挖掘与机器学习 线性回归设计 实训1&quot;&gt;&lt;/a&gt;数据挖掘与机器学习 线性回归设计 实训1&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="数据挖掘与机器学习" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Numpy" scheme="https://ariesfun.gitee.io/tags/Numpy/"/>
    
    <category term="Matplotlib" scheme="https://ariesfun.gitee.io/tags/Matplotlib/"/>
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 上机实践4（Matplotlib 数据可视化）</title>
    <link href="https://ariesfun.gitee.io/posts/1908.html"/>
    <id>https://ariesfun.gitee.io/posts/1908.html</id>
    <published>2023-04-30T07:30:51.829Z</published>
    <updated>2023-04-30T07:34:06.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-上机实践4（Matplotlib-数据可视化）"><a href="#数据分析与可视化-上机实践4（Matplotlib-数据可视化）" class="headerlink" title="数据分析与可视化 上机实践4（Matplotlib 数据可视化）"></a>数据分析与可视化 上机实践4（Matplotlib 数据可视化）</h2><h3 id="一、实践目的"><a href="#一、实践目的" class="headerlink" title="一、实践目的"></a>一、实践目的</h3><p><strong>1.了解matplotlib库的基本功能。</strong></p><p><strong>2.掌握matplotlib库的使用方法</strong>。 </p><hr><h3 id="二、数据集介绍"><a href="#二、数据集介绍" class="headerlink" title="二、数据集介绍"></a>二、数据集介绍</h3><p>食品偏好数据集统计了2019年不同国家人民对不同食物的偏好情况。数据共计288条，各数据字段含义如下表所示。</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301405896.png" alt="img-202304301405896"></p><p><a href="https://pan.baidu.com/s/1XowxkVb9QLds3itkLlL8HA?pwd=2023">food.csv 数据集下载</a></p><hr><h3 id="三、实践内容要求"><a href="#三、实践内容要求" class="headerlink" title="三、实践内容要求"></a>三、实践内容要求</h3><p>1、绘制正弦曲线，并设置标题、坐标轴名称和坐标轴范围；</p><p>2、同一坐标系下绘制多种曲线并通过样式、宽度和颜色加以区分；</p><p>3、对食品偏好数据集进行可视化处理。</p><p>（1）读取数据集，并显示前5行；</p><p>（2）删除无用特征Timestamp和Participant_ID；</p><p>（3）查看数据集的基本情况和统计信息；</p><p>（4）绘制不同国家参与者人数柱状图；</p><p>（5）利用饼形图分别绘制男性和女性对甜点的偏好；</p><p>（6）利用箱体图绘制不同年龄的人对果汁偏爱对比图；</p><p>（7）利用散点图绘制不同年龄的人对甜点的偏爱对比图（提示：年龄作为x轴，maybe，yes和no分别用0,1和-1来表示作为y轴，同时用不同颜色的散点表示Traditional Food和Western Food）；</p><p>（8）根据所绘制的图形，分析人们对不同食物的偏好情况。</p><hr><h3 id="四、完成情况"><a href="#四、完成情况" class="headerlink" title="四、完成情况"></a>四、完成情况</h3><h4 id="（1）简单绘制曲线"><a href="#（1）简单绘制曲线" class="headerlink" title="（1）简单绘制曲线"></a>（1）简单绘制曲线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、绘制正弦曲线，并设置标题、坐标轴名称和坐标轴范围；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>] </span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 可以正常显示中文</span></span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br><span class="line">data=np.arange(<span class="number">0</span>, np.pi*<span class="number">4</span>, <span class="number">0.01</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">4</span>,<span class="number">3</span>),dpi=<span class="number">120</span>)  </span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;sin(x) 正弦曲线&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>,np.pi*<span class="number">4</span>) <span class="comment"># x轴范围</span></span><br><span class="line">plt.ylim(-<span class="number">1</span>,<span class="number">1</span>) <span class="comment"># y轴范围</span></span><br><span class="line">plt.xticks([<span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi, np.pi*<span class="number">3</span>/<span class="number">2</span>, np.pi*<span class="number">2</span>, np.pi*<span class="number">5</span>/<span class="number">2</span>, np.pi*<span class="number">3</span>, np.pi*<span class="number">7</span>/<span class="number">2</span>, np.pi*<span class="number">4</span>]) <span class="comment"># 具体刻度</span></span><br><span class="line">plt.yticks([-<span class="number">1</span>,-<span class="number">0.5</span>,<span class="number">0</span>,<span class="number">0.5</span>,<span class="number">1</span>])</span><br><span class="line">plt.plot(data,np.sin(data)) <span class="comment"># 绘制正弦曲线</span></span><br><span class="line">plt.legend([<span class="string">&#x27;sin&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291817274.png" alt="img-202304291817274"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2、同一坐标系下绘制多种曲线并通过样式、宽度和颜色加以区分；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>] </span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  </span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">4</span>,<span class="number">4</span>),dpi=<span class="number">100</span>) </span><br><span class="line">data=np.arange(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.01</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;多种曲线样式&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">plt.xticks([<span class="number">0</span>,<span class="number">0.2</span>,<span class="number">0.4</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1</span>])</span><br><span class="line">plt.yticks([<span class="number">0</span>,<span class="number">0.2</span>,<span class="number">0.4</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.plot(data, <span class="number">2.5</span>*data, marker=<span class="string">&#x27;^&#x27;</span>)</span><br><span class="line">plt.plot(data, data**<span class="number">0.5</span>, linewidth=<span class="number">4</span>)</span><br><span class="line">plt.plot(data, data**<span class="number">3</span>, linewidth=<span class="number">3</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.legend([<span class="string">&#x27;y=2.5*x&#x27;</span>,<span class="string">&#x27;y=x^0.5&#x27;</span>, <span class="string">&#x27;y=x^3&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291817635.png" alt="img-202304291817635"></p><hr><h4 id="（2）对食品偏好数据集进行可视化处理"><a href="#（2）对食品偏好数据集进行可视化处理" class="headerlink" title="（2）对食品偏好数据集进行可视化处理"></a>（2）对食品偏好数据集进行可视化处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）读取数据集，并显示前5行；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">food=pd.read_csv(<span class="string">&#x27;food.csv&#x27;</span>)</span><br><span class="line">food.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291822462.jpg" alt="img-202304291822462"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）删除无用特征Timestamp和Participant_ID；</span></span><br><span class="line"></span><br><span class="line">food.drop([<span class="string">&#x27;Timestamp&#x27;</span>,<span class="string">&#x27;Participant_ID&#x27;</span>],axis=<span class="number">1</span>,inplace=<span class="literal">True</span>) <span class="comment"># 删除这两列，并替换原数据</span></span><br><span class="line">food.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291822300.jpg" alt="img-202304291822300" style="zoom: 50%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）查看数据集的基本情况和统计信息；</span></span><br><span class="line"></span><br><span class="line">food.info()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 288 entries, 0 to 287</span><br><span class="line">Data columns (total 6 columns):</span><br><span class="line"> #   Column       Non-Null Count  Dtype </span><br><span class="line">---  ------       --------------  ----- </span><br><span class="line"> 0   Gender       284 non-null    object</span><br><span class="line"> 1   Nationality  288 non-null    object</span><br><span class="line"> 2   Age          288 non-null    int64 </span><br><span class="line"> 3   Food         288 non-null    object</span><br><span class="line"> 4   Juice        288 non-null    object</span><br><span class="line"> 5   Dessert      288 non-null    object</span><br><span class="line">dtypes: int64(1), object(5)</span><br><span class="line">memory usage: 13.6+ KB</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">food.describe()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291822894.jpg" alt="003" style="zoom:50%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）绘制不同国家参与者人数柱状图；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">7</span>,<span class="number">6</span>),dpi=<span class="number">100</span>) </span><br><span class="line">data=food[<span class="string">&#x27;Nationality&#x27;</span>].value_counts() <span class="comment"># 统计不同国家参与者人数</span></span><br><span class="line">data.plot(kind=<span class="string">&#x27;bar&#x27;</span>,rot=<span class="number">30</span>) <span class="comment">#设置对应国家的列标签，并倾斜30度</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;国家&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;人数&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;不同国家参与者人数柱状图&#x27;</span>)</span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="built_in">len</span>( data)),data)</span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(data)),data):</span><br><span class="line">    plt.text(x,y,y,ha = <span class="string">&#x27;center&#x27;</span>,va = <span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291817131.png" alt="img-202304291817131" style="zoom: 80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）利用饼形图分别绘制男性和女性对甜点的偏好；</span></span><br><span class="line"></span><br><span class="line">food.groupby(<span class="string">&#x27;Dessert&#x27;</span>)[<span class="string">&#x27;Gender&#x27;</span>].value_counts() <span class="comment"># 统计不同性别对甜点偏好的情况</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Dessert  Gender</span><br><span class="line">Maybe    Female    72</span><br><span class="line">         Male      50</span><br><span class="line">No       Female    35</span><br><span class="line">         Male      17</span><br><span class="line">Yes      Female    58</span><br><span class="line">         Male      52</span><br><span class="line">Name: Gender, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">food[<span class="string">&#x27;Gender&#x27;</span>].value_counts() <span class="comment"># 统计不同性别对应的人数，方便后面绘制饼图</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Female    165</span><br><span class="line">Male      119</span><br><span class="line">Name: Gender, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">8</span>),dpi=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">labels=[<span class="string">&#x27;Maybe&#x27;</span>,<span class="string">&#x27;No&#x27;</span>,<span class="string">&#x27;Yes&#x27;</span>]</span><br><span class="line">x=[<span class="number">72</span>/<span class="number">165</span>, <span class="number">35</span>/<span class="number">165</span>, <span class="number">58</span>/<span class="number">165</span>]</span><br><span class="line">explode=(<span class="number">0.01</span>, <span class="number">0.01</span>, <span class="number">0.01</span>)</span><br><span class="line">plt.pie(x, labels=labels, explode=explode, startangle=<span class="number">60</span>, autopct=<span class="string">&#x27;%1.1f %%&#x27;</span>) <span class="comment"># 分别绘制男性和女性对甜点偏好的饼图</span></span><br><span class="line">plt.title(<span class="string">&#x27;男性对甜点的偏好&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">labels=[<span class="string">&#x27;Maybe&#x27;</span>,<span class="string">&#x27;No&#x27;</span>,<span class="string">&#x27;Yes&#x27;</span>]</span><br><span class="line">x=[<span class="number">50</span>/<span class="number">119</span>, <span class="number">17</span>/<span class="number">119</span>, <span class="number">52</span>/<span class="number">119</span>]</span><br><span class="line">explode=(<span class="number">0.01</span>, <span class="number">0.01</span>, <span class="number">0.01</span>) <span class="comment"># autopct=&#x27;％1.1f%%&#x27;参数表示在饼形图上显示每个部分的百分比</span></span><br><span class="line">plt.pie(x, labels=labels, explode=explode, startangle=<span class="number">60</span>, autopct=<span class="string">&#x27;%1.1f %%&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;女性对甜点的偏好&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291814755.png" alt="img-202304291814755" style="zoom:80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）利用箱体图绘制不同年龄的人对果汁偏爱对比图</span></span><br><span class="line"></span><br><span class="line">food.groupby(<span class="string">&#x27;Juice&#x27;</span>)[<span class="string">&#x27;Age&#x27;</span>].value_counts() <span class="comment"># 先按对果汁的偏爱分组，再统计各自年龄对应的人数</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Juice              Age</span><br><span class="line">Carbonated drinks  21     5</span><br><span class="line">                   23     4</span><br><span class="line">                   25     3</span><br><span class="line">                   22     2</span><br><span class="line">                   24     2</span><br><span class="line">                         ..</span><br><span class="line">Fresh Juice        60     1</span><br><span class="line">                   63     1</span><br><span class="line">                   65     1</span><br><span class="line">                   67     1</span><br><span class="line">                   74     1</span><br><span class="line">Name: Age, Length: 66, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">food[<span class="string">&#x27;Juice&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Fresh Juice          256</span><br><span class="line">Carbonated drinks     32</span><br><span class="line">Name: Juice, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">6</span>),dpi=<span class="number">90</span>)</span><br><span class="line"><span class="comment"># 为方便展示示例效果，这里使用seaborn库来绘制箱体图</span></span><br><span class="line"><span class="comment"># 生成一个水平方向的箱体图，其中每个箱子代表一种不同年龄段人群喜好某种果汁的程度</span></span><br><span class="line">sns.boxplot(x=food[<span class="string">&#x27;Age&#x27;</span>], y=food[<span class="string">&#x27;Juice&#x27;</span>], data=food, orient=<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置横纵坐标标签</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Age&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Juice&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291815783.png" alt="img-202304291815783" style="zoom: 80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）利用散点图绘制不同年龄的人对甜点的偏爱对比图（提示：年龄作为x轴，maybe，yes和no分别用0,1和-1来表示作为y轴，同时用不同颜色的散点表示Traditional Food和Western Food）。</span></span><br><span class="line"><span class="comment"># pd.set_option(&#x27;display.max_rows&#x27;, 100) # 让数据显示更全</span></span><br><span class="line"></span><br><span class="line">df=food.groupby(<span class="string">&#x27;Dessert&#x27;</span>)[<span class="string">&#x27;Age&#x27;</span>].value_counts() <span class="comment"># 统计不同年龄对甜点偏好的情况</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">4</span>),dpi=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(food[<span class="string">&#x27;Age&#x27;</span>], food[<span class="string">&#x27;Dessert&#x27;</span>], color=<span class="string">&#x27;green&#x27;</span>) <span class="comment"># 显示不同年龄，对应的甜品偏好情况</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291815498.png" alt="img-202304291815498" style="zoom: 80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">4</span>),dpi=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对原数据中对甜品的偏爱情况进行替换，y轴用这些来表示:Yes，Maybe和No分别用1，0和-1</span></span><br><span class="line">traditional_likes = food[food[<span class="string">&#x27;Food&#x27;</span>] == <span class="string">&#x27;Traditional food&#x27;</span>][<span class="string">&#x27;Dessert&#x27;</span>].replace(&#123;<span class="string">&#x27;Yes&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Maybe&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;No&#x27;</span>: -<span class="number">1</span>&#125;)</span><br><span class="line">western_likes = food[food[<span class="string">&#x27;Food&#x27;</span>] == <span class="string">&#x27;Western Food&#x27;</span>][<span class="string">&#x27;Dessert&#x27;</span>].replace(&#123;<span class="string">&#x27;Yes&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Maybe&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;No&#x27;</span>: -<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">age = food[<span class="string">&#x27;Age&#x27;</span>] <span class="comment"># x轴是在不同年龄下，人们对传统和西方食物的分布情况</span></span><br><span class="line">plt.scatter(age[food[<span class="string">&#x27;Food&#x27;</span>] == <span class="string">&#x27;Traditional food&#x27;</span>], traditional_likes, color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;Traditional food&#x27;</span>)</span><br><span class="line">plt.scatter(age[food[<span class="string">&#x27;Food&#x27;</span>] == <span class="string">&#x27;Western Food&#x27;</span>], western_likes, color=<span class="string">&#x27;blue&#x27;</span>, label=<span class="string">&#x27;Western Food&#x27;</span>) <span class="comment"># 西方美食对应 Western Food </span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Age&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Dessert&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()   </span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304291816686.png" alt="img-202304291816686" style="zoom:80%;" /><hr><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#（8）根据所绘制的图形，分析人们对不同食物的偏好情况。</span><br><span class="line"></span><br><span class="line"># 在该图中，红色表示传统美食的偏好程度，蓝色表示西方美食的偏好程度。可以得出结论，在所有年龄段中人们似乎更喜欢传统美食。</span><br><span class="line"># 其中在年龄20到40之间的人群对传统美食的偏爱程度较高，年龄在15到30之间的人群对西方美食偏爱程度较高。</span><br></pre></td></tr></table></figure><hr><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p><a href="https://pan.baidu.com/s/1XowxkVb9QLds3itkLlL8HA?pwd=2023">food.csv 数据集下载</a></p><p> (5), (6), (7)中的可视化处理参考了<strong>chatgpt</strong>提供的解题思路</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-上机实践4（Matplotlib-数据可视化）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-上机实践4（Matplotlib-数据可视化）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 上机实践4（Matplotlib 数据</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Matplotlib" scheme="https://ariesfun.gitee.io/tags/Matplotlib/"/>
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 上机实践3（Pandas 数据预处理）</title>
    <link href="https://ariesfun.gitee.io/posts/e26c.html"/>
    <id>https://ariesfun.gitee.io/posts/e26c.html</id>
    <published>2023-04-30T07:29:39.353Z</published>
    <updated>2023-04-30T07:34:01.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-上机实践3（Pandas-数据预处理）"><a href="#数据分析与可视化-上机实践3（Pandas-数据预处理）" class="headerlink" title="数据分析与可视化 上机实践3（Pandas 数据预处理）"></a>数据分析与可视化 上机实践3（Pandas 数据预处理）</h2><hr><h3 id="一、实践目的"><a href="#一、实践目的" class="headerlink" title="一、实践目的"></a>一、实践目的</h3><p>1.掌握数据预处理的思想和方法。<br><strong>2.进一步熟悉Pandas库的使用方法。</strong></p><hr><h3 id="二、数据集介绍"><a href="#二、数据集介绍" class="headerlink" title="二、数据集介绍"></a>二、数据集介绍</h3><p>Lending Club是一家美国P2P公司，投资者在平台中为融资方提供资金，并以此获得贷款利率收益。Lending Club为投资者与融资方提供平台。本实验使用Lending Club2015年公开数据集中截取的一小部分进行分析。数据分为三个部分：<br>（1）用户信息数据</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301433917.png" alt="img-202304301433917"></p><p>（2）用户历史数据</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301433211.png" alt="img-202304301433211"></p><p>（3）贷款交易数据</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301433303.png" alt="img-202304301433303"></p><p><a href="https://pan.baidu.com/s/1uu73xf2SVsJsAjBQceRfKA?pwd=2023">Lending Club2015年公开数据集下载</a></p><hr><h3 id="三、实践内容要求"><a href="#三、实践内容要求" class="headerlink" title="三、实践内容要求"></a>三、实践内容要求</h3><p>（1）导入三个数据表到DataFrame中；</p><p>（2）查看各数据表的前5行；</p><p>（3）查看数据基本情况，并对基本情况进行分析；</p><p>（4）利用“用户编号”这个公共变量，将用户信息数据和用户历史数据合并在一起，对比inner、outer、left和right连接的区别；</p><p>（5）将用户历史数据按账户平均存款排序；</p><p>（6）基于贷款交易数据，进行左连接，将三个数据合并在一起；</p><p>（7）删去用于合并的列名user_id，使用info查看数据缺失情况，删除缺失数据；</p><p>（8）将年收入进行离散化，分为高中低三档；</p><p>（9）贷款状态为”Charged Off”,”In Grace Period”, “Late (31-120 days)”的贷款有违约风险，视为不良贷款，将其值标记为1，其他贷款标记为0；</p><p>（10）将term、grade、emp_length、annual_inc、home_ownership、verification_status这些分类变量进行哑变量处理。</p><hr><h3 id="四、完成情况"><a href="#四、完成情况" class="headerlink" title="四、完成情况"></a>四、完成情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）导入三个数据表到DataFrame中；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">user = pd.read_csv(<span class="string">&#x27;user.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>) <span class="comment"># 读取文件</span></span><br><span class="line">history = pd.read_csv(<span class="string">&#x27;history.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>) </span><br><span class="line">loan = pd.read_csv(<span class="string">&#x27;loan.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）查看各数据表的前5行；</span></span><br><span class="line"></span><br><span class="line">user.head() <span class="comment"># 默认输出前5行数据</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301438980.jpg" alt="img-202304301438980" style="zoom: 60%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301438592.jpg" alt="img-202304301438592" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loan.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301438890.jpg" alt="img-202304301438890" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）查看数据基本情况，并对基本情况进行分析；</span></span><br><span class="line"></span><br><span class="line">user.info()</span><br><span class="line">history.info()</span><br><span class="line">loan.info()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 1707 entries, 0 to 1706</span><br><span class="line">Data columns (total 5 columns):</span><br><span class="line"> #   Column               Non-Null Count  Dtype  </span><br><span class="line">---  ------               --------------  -----  </span><br><span class="line"> 0   user_id              1707 non-null   int64  </span><br><span class="line"> 1   emp_length           1633 non-null   object </span><br><span class="line"> 2   home_ownership       1707 non-null   object </span><br><span class="line"> 3   annual_inc           1707 non-null   float64</span><br><span class="line"> 4   verification_status  1707 non-null   object </span><br><span class="line">dtypes: float64(1), int64(1), object(3)</span><br><span class="line">memory usage: 66.8+ KB</span><br><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 1648 entries, 0 to 1647</span><br><span class="line">Data columns (total 3 columns):</span><br><span class="line"> #   Column                Non-Null Count  Dtype  </span><br><span class="line">---  ------                --------------  -----  </span><br><span class="line"> 0   user                  1648 non-null   int64  </span><br><span class="line"> 1   acc_open_past_24mths  1648 non-null   int64  </span><br><span class="line"> 2   avg_cur_bal           1646 non-null   float64</span><br><span class="line">dtypes: float64(1), int64(2)</span><br><span class="line">memory usage: 38.8 KB</span><br><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 1269 entries, 0 to 1268</span><br><span class="line">Data columns (total 5 columns):</span><br><span class="line"> #   Column       Non-Null Count  Dtype </span><br><span class="line">---  ------       --------------  ----- </span><br><span class="line"> 0   user         1269 non-null   int64 </span><br><span class="line"> 1   term         1269 non-null   object</span><br><span class="line"> 2   int_rate     1269 non-null   object</span><br><span class="line"> 3   grade        1269 non-null   object</span><br><span class="line"> 4   loan_status  1269 non-null   object</span><br><span class="line">dtypes: int64(1), object(4)</span><br><span class="line">memory usage: 49.7+ KB</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）利用“用户编号”这个公共变量，将用户信息数据和用户历史数据合并在一起，对比inner、outer、left和right连接的区别；</span></span><br><span class="line"></span><br><span class="line">a1 = pd.merge(user, history, left_on=<span class="string">&#x27;user_id&#x27;</span>, right_on=<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a1)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">      user_id emp_length home_ownership  annual_inc verification_status  user  \</span><br><span class="line">0           1  10+ years           RENT     78000.0     Source Verified     1   </span><br><span class="line">1           2    8 years       MORTGAGE     58000.0        Not Verified     2   </span><br><span class="line">2           3  10+ years       MORTGAGE    125000.0            Verified     3   </span><br><span class="line">3           4  10+ years           RENT     69000.0     Source Verified     4   </span><br><span class="line">4           5   &lt; 1 year           RENT     50000.0     Source Verified     5   </span><br><span class="line">...       ...        ...            ...         ...                 ...   ...   </span><br><span class="line">1643     1644  10+ years            OWN     72000.0            Verified  1644   </span><br><span class="line">1644     1645    7 years       MORTGAGE     62000.0     Source Verified  1645   </span><br><span class="line">1645     1646    4 years           RENT     50000.0     Source Verified  1646   </span><br><span class="line">1646     1647     1 year           RENT     45000.0        Not Verified  1647   </span><br><span class="line">1647     1648    2 years            OWN     35000.0        Not Verified  1648   </span><br><span class="line"></span><br><span class="line">      acc_open_past_24mths  avg_cur_bal  </span><br><span class="line">0                        5      29828.0  </span><br><span class="line">1                        7       9536.0  </span><br><span class="line">2                        2      32727.0  </span><br><span class="line">3                        8       3214.0  </span><br><span class="line">4                        6       5857.0  </span><br><span class="line">...                    ...          ...  </span><br><span class="line">1643                     3       1676.0  </span><br><span class="line">1644                     4      21360.0  </span><br><span class="line">1645                     1       3180.0  </span><br><span class="line">1646                     8       3652.0  </span><br><span class="line">1647                     3       1586.0  </span><br><span class="line"></span><br><span class="line">[1648 rows x 8 columns]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）将用户历史数据按账户平均存款排序；</span></span><br><span class="line"></span><br><span class="line">a2 = history.sort_values(by = <span class="string">&#x27;avg_cur_bal&#x27;</span>)</span><br><span class="line">a2.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301439203.jpg" alt="img-202304301439203" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）基于贷款交易数据，进行左连接，将三个数据合并在一起；</span></span><br><span class="line"></span><br><span class="line">a3 = pd.merge(a1, loan, how=<span class="string">&#x27;left&#x27;</span>) <span class="comment"># 将三表进行左连接</span></span><br><span class="line"><span class="built_in">print</span>(a3)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">      user_id emp_length home_ownership  annual_inc verification_status  user  \</span><br><span class="line">0           1  10+ years           RENT     78000.0     Source Verified     1   </span><br><span class="line">1           2    8 years       MORTGAGE     58000.0        Not Verified     2   </span><br><span class="line">2           3  10+ years       MORTGAGE    125000.0            Verified     3   </span><br><span class="line">3           4  10+ years           RENT     69000.0     Source Verified     4   </span><br><span class="line">4           5   &lt; 1 year           RENT     50000.0     Source Verified     5   </span><br><span class="line">...       ...        ...            ...         ...                 ...   ...   </span><br><span class="line">1643     1644  10+ years            OWN     72000.0            Verified  1644   </span><br><span class="line">1644     1645    7 years       MORTGAGE     62000.0     Source Verified  1645   </span><br><span class="line">1645     1646    4 years           RENT     50000.0     Source Verified  1646   </span><br><span class="line">1646     1647     1 year           RENT     45000.0        Not Verified  1647   </span><br><span class="line">1647     1648    2 years            OWN     35000.0        Not Verified  1648   </span><br><span class="line"></span><br><span class="line">      acc_open_past_24mths  avg_cur_bal        term int_rate grade  \</span><br><span class="line">0                        5      29828.0   60 months   12.39%     C   </span><br><span class="line">1                        7       9536.0   36 months    6.99%     A   </span><br><span class="line">2                        2      32727.0   60 months   17.14%     D   </span><br><span class="line">3                        8       3214.0   36 months   13.66%     C   </span><br><span class="line">4                        6       5857.0   36 months   13.66%     C   </span><br><span class="line">...                    ...          ...         ...      ...   ...   </span><br><span class="line">1643                     3       1676.0         NaN      NaN   NaN   </span><br><span class="line">1644                     4      21360.0         NaN      NaN   NaN   </span><br><span class="line">1645                     1       3180.0         NaN      NaN   NaN   </span><br><span class="line">1646                     8       3652.0         NaN      NaN   NaN   </span><br><span class="line">1647                     3       1586.0         NaN      NaN   NaN   </span><br><span class="line"></span><br><span class="line">          loan_status  </span><br><span class="line">0          Fully Paid  </span><br><span class="line">1         Charged Off  </span><br><span class="line">2     In Grace Period  </span><br><span class="line">3          Fully Paid  </span><br><span class="line">4         Charged Off  </span><br><span class="line">...               ...  </span><br><span class="line">1643              NaN  </span><br><span class="line">1644              NaN  </span><br><span class="line">1645              NaN  </span><br><span class="line">1646              NaN  </span><br><span class="line">1647              NaN  </span><br><span class="line"></span><br><span class="line">[1648 rows x 12 columns]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）删去用于合并的列名user_id，使用info查看数据缺失情况，删除缺失数据；</span></span><br><span class="line"></span><br><span class="line">a3.drop(<span class="string">&#x27;user_id&#x27;</span>,axis = <span class="number">1</span>,inplace = <span class="literal">True</span>) <span class="comment"># axis=1，删除user_id这一列</span></span><br><span class="line"><span class="built_in">print</span>(a3)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">     emp_length home_ownership  annual_inc verification_status  user  \</span><br><span class="line">0     10+ years           RENT     78000.0     Source Verified     1   </span><br><span class="line">1       8 years       MORTGAGE     58000.0        Not Verified     2   </span><br><span class="line">2     10+ years       MORTGAGE    125000.0            Verified     3   </span><br><span class="line">3     10+ years           RENT     69000.0     Source Verified     4   </span><br><span class="line">4      &lt; 1 year           RENT     50000.0     Source Verified     5   </span><br><span class="line">...         ...            ...         ...                 ...   ...   </span><br><span class="line">1643  10+ years            OWN     72000.0            Verified  1644   </span><br><span class="line">1644    7 years       MORTGAGE     62000.0     Source Verified  1645   </span><br><span class="line">1645    4 years           RENT     50000.0     Source Verified  1646   </span><br><span class="line">1646     1 year           RENT     45000.0        Not Verified  1647   </span><br><span class="line">1647    2 years            OWN     35000.0        Not Verified  1648   </span><br><span class="line"></span><br><span class="line">      acc_open_past_24mths  avg_cur_bal        term int_rate grade  \</span><br><span class="line">0                        5      29828.0   60 months   12.39%     C   </span><br><span class="line">1                        7       9536.0   36 months    6.99%     A   </span><br><span class="line">2                        2      32727.0   60 months   17.14%     D   </span><br><span class="line">3                        8       3214.0   36 months   13.66%     C   </span><br><span class="line">4                        6       5857.0   36 months   13.66%     C   </span><br><span class="line">...                    ...          ...         ...      ...   ...   </span><br><span class="line">1643                     3       1676.0         NaN      NaN   NaN   </span><br><span class="line">1644                     4      21360.0         NaN      NaN   NaN   </span><br><span class="line">1645                     1       3180.0         NaN      NaN   NaN   </span><br><span class="line">1646                     8       3652.0         NaN      NaN   NaN   </span><br><span class="line">1647                     3       1586.0         NaN      NaN   NaN   </span><br><span class="line"></span><br><span class="line">          loan_status  </span><br><span class="line">0          Fully Paid  </span><br><span class="line">1         Charged Off  </span><br><span class="line">2     In Grace Period  </span><br><span class="line">3          Fully Paid  </span><br><span class="line">4         Charged Off  </span><br><span class="line">...               ...  </span><br><span class="line">1643              NaN  </span><br><span class="line">1644              NaN  </span><br><span class="line">1645              NaN  </span><br><span class="line">1646              NaN  </span><br><span class="line">1647              NaN  </span><br><span class="line"></span><br><span class="line">[1648 rows x 11 columns]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a3.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">emp_length               71</span><br><span class="line">home_ownership            0</span><br><span class="line">annual_inc                0</span><br><span class="line">verification_status       0</span><br><span class="line">user                      0</span><br><span class="line">acc_open_past_24mths      0</span><br><span class="line">avg_cur_bal               2</span><br><span class="line">term                    379</span><br><span class="line">int_rate                379</span><br><span class="line">grade                   379</span><br><span class="line">loan_status             379</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a3.dropna(axis = <span class="number">0</span>, inplace =<span class="literal">True</span>) <span class="comment"># 沿行删除所有数据</span></span><br><span class="line">a3.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">emp_length              0</span><br><span class="line">home_ownership          0</span><br><span class="line">annual_inc              0</span><br><span class="line">verification_status     0</span><br><span class="line">user                    0</span><br><span class="line">acc_open_past_24mths    0</span><br><span class="line">avg_cur_bal             0</span><br><span class="line">term                    0</span><br><span class="line">int_rate                0</span><br><span class="line">grade                   0</span><br><span class="line">loan_status             0</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （8）将年收入进行离散化，分为高中低三档；</span></span><br><span class="line"></span><br><span class="line">a3[<span class="string">&#x27;年收入&#x27;</span>] = pd.cut(a3[<span class="string">&#x27;annual_inc&#x27;</span>], bins=[<span class="number">0</span>, <span class="number">50000</span>, <span class="number">100000</span>, a3[<span class="string">&#x27;annual_inc&#x27;</span>].<span class="built_in">max</span>()], labels=[<span class="string">&#x27;低&#x27;</span>,<span class="string">&#x27;中&#x27;</span>, <span class="string">&#x27;高&#x27;</span>])</span><br><span class="line">a3.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301440474.jpg" alt="img-202304301440474"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（9）贷款状态为&quot;Charged Off&quot;,&quot;In Grace Period&quot;, &quot;Late (31-120 days)&quot;的贷款有违约风险，视为不良贷款，将其值标记为1，其他贷款标记为0；</span></span><br><span class="line"><span class="comment"># 使用字典方式进行替换</span></span><br><span class="line"></span><br><span class="line">a3.replace(to_replace=&#123;<span class="string">&#x27;loan_status&#x27;</span>:</span><br><span class="line">&#123;<span class="string">&#x27;Fully Paid&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;Current&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;Charged Off&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;In Grace Period&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;Late (31-120 days)&#x27;</span>:<span class="number">1</span>&#125;&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">a3.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一种方法</span></span><br><span class="line"><span class="comment"># df[&#x27;loan_status&#x27;].replace(to_replace=[&#x27;Fully Paid&#x27;,&#x27;Current&#x27;,&#x27;Charged Off&#x27;,&#x27;In Grace Period&#x27;,&#x27;Late (31-120 days)&#x27;],</span></span><br><span class="line"><span class="comment"># value=[0,0,1,1,1],inplace=True)</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301441270.jpg" alt="009"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（10）将term、grade、emp_length、annual_inc、home_ownership、verification_status这些分类变量进行哑变量处理。</span></span><br><span class="line"></span><br><span class="line">ss = [<span class="string">&#x27;term&#x27;</span>, <span class="string">&#x27;grade&#x27;</span>, <span class="string">&#x27;emp_length&#x27;</span>, <span class="string">&#x27;annual_inc&#x27;</span>, <span class="string">&#x27;home_ownership&#x27;</span>, <span class="string">&#x27;verification_status&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> ss:</span><br><span class="line">    dum_list = pd.get_dummies(a3[s], prefix = s)</span><br><span class="line">    <span class="built_in">print</span>(dum_list.head())</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">   term_ 36 months  term_ 60 months</span><br><span class="line">0                0                1</span><br><span class="line">1                1                0</span><br><span class="line">2                0                1</span><br><span class="line">3                1                0</span><br><span class="line">4                1                0</span><br><span class="line">   grade_A  grade_B  grade_C  grade_D  grade_E  grade_F  grade_G</span><br><span class="line">0        0        0        1        0        0        0        0</span><br><span class="line">1        1        0        0        0        0        0        0</span><br><span class="line">2        0        0        0        1        0        0        0</span><br><span class="line">3        0        0        1        0        0        0        0</span><br><span class="line">4        0        0        1        0        0        0        0</span><br><span class="line">   emp_length_1 year  emp_length_10+ years  emp_length_2 years  \</span><br><span class="line">0                  0                     1                   0   </span><br><span class="line">1                  0                     0                   0   </span><br><span class="line">2                  0                     1                   0   </span><br><span class="line">3                  0                     1                   0   </span><br><span class="line">4                  0                     0                   0   </span><br><span class="line"></span><br><span class="line">   emp_length_3 years  emp_length_4 years  emp_length_5 years  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   0   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   emp_length_6 years  emp_length_7 years  emp_length_8 years  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   1   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   emp_length_9 years  emp_length_&lt; 1 year  </span><br><span class="line">0                   0                    0  </span><br><span class="line">1                   0                    0  </span><br><span class="line">2                   0                    0  </span><br><span class="line">3                   0                    0  </span><br><span class="line">4                   0                    1  </span><br><span class="line">   annual_inc_16000.0  annual_inc_18000.0  annual_inc_18500.0  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   0   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   annual_inc_19000.0  annual_inc_19600.0  annual_inc_20000.0  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   0   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   annual_inc_21000.0  annual_inc_21600.0  annual_inc_22000.0  \</span><br><span class="line">0                   0                   0                   0   </span><br><span class="line">1                   0                   0                   0   </span><br><span class="line">2                   0                   0                   0   </span><br><span class="line">3                   0                   0                   0   </span><br><span class="line">4                   0                   0                   0   </span><br><span class="line"></span><br><span class="line">   annual_inc_22500.0  ...  annual_inc_280000.0  annual_inc_300000.0  \</span><br><span class="line">0                   0  ...                    0                    0   </span><br><span class="line">1                   0  ...                    0                    0   </span><br><span class="line">2                   0  ...                    0                    0   </span><br><span class="line">3                   0  ...                    0                    0   </span><br><span class="line">4                   0  ...                    0                    0   </span><br><span class="line"></span><br><span class="line">   annual_inc_300300.0  annual_inc_310000.0  annual_inc_335000.0  \</span><br><span class="line">0                    0                    0                    0   </span><br><span class="line">1                    0                    0                    0   </span><br><span class="line">2                    0                    0                    0   </span><br><span class="line">3                    0                    0                    0   </span><br><span class="line">4                    0                    0                    0   </span><br><span class="line"></span><br><span class="line">   annual_inc_350000.0  annual_inc_385000.0  annual_inc_450000.0  \</span><br><span class="line">0                    0                    0                    0   </span><br><span class="line">1                    0                    0                    0   </span><br><span class="line">2                    0                    0                    0   </span><br><span class="line">3                    0                    0                    0   </span><br><span class="line">4                    0                    0                    0   </span><br><span class="line"></span><br><span class="line">   annual_inc_550000.0  annual_inc_580000.0  </span><br><span class="line">0                    0                    0  </span><br><span class="line">1                    0                    0  </span><br><span class="line">2                    0                    0  </span><br><span class="line">3                    0                    0  </span><br><span class="line">4                    0                    0  </span><br><span class="line"></span><br><span class="line">[5 rows x 320 columns]</span><br><span class="line">   home_ownership_MORTGAGE  home_ownership_OWN  home_ownership_RENT</span><br><span class="line">0                        0                   0                    1</span><br><span class="line">1                        1                   0                    0</span><br><span class="line">2                        1                   0                    0</span><br><span class="line">3                        0                   0                    1</span><br><span class="line">4                        0                   0                    1</span><br><span class="line">   verification_status_Not Verified  verification_status_Source Verified  \</span><br><span class="line">0                                 0                                    1   </span><br><span class="line">1                                 1                                    0   </span><br><span class="line">2                                 0                                    0   </span><br><span class="line">3                                 0                                    1   </span><br><span class="line">4                                 0                                    1   </span><br><span class="line"></span><br><span class="line">   verification_status_Verified  </span><br><span class="line">0                             0  </span><br><span class="line">1                             0  </span><br><span class="line">2                             1  </span><br><span class="line">3                             0  </span><br><span class="line">4                             0  </span><br></pre></td></tr></table></figure><hr><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p><a href="https://pan.baidu.com/s/1uu73xf2SVsJsAjBQceRfKA?pwd=2023">Lending Club2015年公开数据集下载</a></p><p><a href="https://blog.csdn.net/weixin_46945026/article/details/116856574"> Lending Club贷款数据转换与融合</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-上机实践3（Pandas-数据预处理）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-上机实践3（Pandas-数据预处理）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 上机实践3（Pandas 数据预处理）&quot;&gt;&lt;/a&gt;数据</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="Pandas" scheme="https://ariesfun.gitee.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 上机实践2（Pandas 统计分析）</title>
    <link href="https://ariesfun.gitee.io/posts/54a7.html"/>
    <id>https://ariesfun.gitee.io/posts/54a7.html</id>
    <published>2023-04-30T07:28:18.294Z</published>
    <updated>2023-04-30T07:28:38.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-上机实践2（Pandas-统计分析）"><a href="#数据分析与可视化-上机实践2（Pandas-统计分析）" class="headerlink" title="数据分析与可视化 上机实践2（Pandas 统计分析）"></a>数据分析与可视化 上机实践2（Pandas 统计分析）</h2><hr><h3 id="一、实践目的"><a href="#一、实践目的" class="headerlink" title="一、实践目的"></a>一、实践目的</h3><p><strong>1.了解 Pandas 库的基本功能。</strong></p><p><strong>2.掌握 Pandas 库的使用方法。</strong></p><hr><h3 id="二、数据集介绍"><a href="#二、数据集介绍" class="headerlink" title="二、数据集介绍"></a>二、数据集介绍</h3><p>本实验使用酒品消耗量数据集，其记录了全球 193 个国家某年的各类酒品消<br>耗数据，主要数据集变量如下：</p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301523886.jpg" alt="img-202304301523886" style="zoom:67%;" /><p><a href="https://pan.baidu.com/s/1Mfwg9hICfGhxFHTnaXxmAg?pwd=2023">drinks.csv 数据集下载</a></p><hr><h3 id="三、实践内容要求"><a href="#三、实践内容要求" class="headerlink" title="三、实践内容要求"></a>三、实践内容要求</h3><ol><li>数据预处理</li></ol><p>（1）导入 excel 表格中的数据到 DataFrame 中；</p><p>（2）查看数据的前 5 行和后 8 行。</p><ol start="2"><li>数据操作</li></ol><p>（1）查看数据中各变量类型；</p><p>（2）将啤酒销量改成 object 类型；</p><p>（3）将列名的英文改为中文格式；</p><p>（4）初步查看数据类型和大小；</p><p>（5）查看数据数值统计情况；</p><p>（6）查看索引值；</p><p>（7）将索引值修改为所在的大洲；</p><p>（8）查看缺失值情况；</p><p>（9）采用恰当的方法对缺失值进行填充。</p><ol start="3"><li>饮酒情况对比</li></ol><p>（1）查找啤酒、烈酒和红酒的消耗量都高于相应酒种消耗量 75%分位数的<br>国家；</p><p>（2）统计（1）中各大洲国家的个数；</p><p>（3）统计各个大洲各类酒的消耗总量；</p><p>（4）计算各类酒占各大洲总消耗量的比重。</p><p>4．通过饮酒情况对比，对各大洲的饮酒习惯进行分析。</p><hr><h3 id="四、完成情况"><a href="#四、完成情况" class="headerlink" title="四、完成情况"></a>四、完成情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 数据预处理</span></span><br><span class="line"><span class="comment">#（1）导入 excel 表格中的数据到 DataFrame 中；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>,<span class="literal">True</span>)</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;drinks.csv&#x27;</span>, sep =<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">df.head()  <span class="comment"># 默认显示前5行</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111800278.jpg" alt="img-202304111800278"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail(<span class="number">8</span>) <span class="comment"># 查看数据的后8行</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111801331.jpg" alt="img-202304111801331"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 数据操作</span></span><br><span class="line"><span class="comment">#（1）查看数据中各变量类型；</span></span><br><span class="line"></span><br><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><pre><code>country                          objectbeer_servings                   float64spirit_servings                 float64wine_servings                   float64total_litres_of_pure_alcohol    float64continent                        objectdtype: object</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）将啤酒消耗量改成 object 类型；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;beer_servings&#x27;</span>] = df[<span class="string">&#x27;beer_servings&#x27;</span>].astype(<span class="built_in">object</span>)</span><br><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><pre><code>country                          objectbeer_servings                    objectspirit_servings                 float64wine_servings                   float64total_litres_of_pure_alcohol    float64continent                        objectdtype: object</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）将列名的英文改为中文格式；</span></span><br><span class="line"></span><br><span class="line">df.rename(columns = &#123;<span class="string">&#x27;country&#x27;</span>:<span class="string">&#x27;国家&#x27;</span>, <span class="string">&#x27;beer_servings&#x27;</span>:<span class="string">&#x27;啤酒消耗量&#x27;</span>, <span class="string">&#x27;spirit_servings&#x27;</span>:<span class="string">&#x27;烈酒消耗量&#x27;</span>, <span class="string">&#x27;wine_servings&#x27;</span>:<span class="string">&#x27;红酒消耗量&#x27;</span>, <span class="string">&#x27;total_litres_of_pure_alcohol&#x27;</span>:<span class="string">&#x27;总酒精消耗量&#x27;</span>, <span class="string">&#x27;continent&#x27;</span>:<span class="string">&#x27;所在大洲&#x27;</span>&#125;, inplace = <span class="literal">True</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111801050.jpg" alt="img-202304111801050"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）初步查看数据类型和大小；</span></span><br><span class="line"></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 193 entries, 0 to 192Data columns (total 6 columns): #   Column  Non-Null Count  Dtype  ---  ------  --------------  -----   0   国家      193 non-null    object  1   啤酒消耗量   190 non-null    object  2   烈酒消耗量   190 non-null    float64 3   红酒消耗量   190 non-null    float64 4   总酒精消耗量  193 non-null    float64 5   所在大洲    170 non-null    object dtypes: float64(3), object(3)memory usage: 9.2+ KB</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）查看数据数值统计情况；</span></span><br><span class="line"></span><br><span class="line">df[[<span class="string">&#x27;啤酒消耗量&#x27;</span>, <span class="string">&#x27;烈酒消耗量&#x27;</span>, <span class="string">&#x27;红酒消耗量&#x27;</span>, <span class="string">&#x27;总酒精消耗量&#x27;</span>]].describe()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111801126.jpg" alt="img-202304111801126" style="zoom: 80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）查看索引值；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list(df.index) # 行索引是0到192</span></span><br><span class="line"><span class="built_in">list</span>(df.columns)</span><br></pre></td></tr></table></figure><pre><code>[&#39;国家&#39;, &#39;啤酒消耗量&#39;, &#39;烈酒消耗量&#39;, &#39;红酒消耗量&#39;, &#39;总酒精消耗量&#39;, &#39;所在大洲&#39;]</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）将索引值修改为所在的大洲；</span></span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&#x27;所在大洲&#x27;</span>,drop=<span class="literal">False</span>)    <span class="comment"># 将列转化为行索引</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111802383.jpg" alt="img-202304111802383" style="zoom:80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（8）查看缺失值情况；</span></span><br><span class="line"></span><br><span class="line">df.isnull().<span class="built_in">sum</span>() <span class="comment"># 缺失值的统计</span></span><br></pre></td></tr></table></figure><pre><code>国家             0啤酒消耗量       3烈酒消耗量       3红酒消耗量       3总酒精消耗量     0所在大洲        23dtype: int64</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（9）采用恰当的方法对缺失值进行填充。</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;啤酒消耗量&#x27;</span>] = df[<span class="string">&#x27;啤酒消耗量&#x27;</span>].fillna(df[<span class="string">&#x27;啤酒消耗量&#x27;</span>].mean()) <span class="comment"># 对酒的消耗量缺失值用平均值填充</span></span><br><span class="line">df[<span class="string">&#x27;烈酒消耗量&#x27;</span>] = df[<span class="string">&#x27;烈酒消耗量&#x27;</span>].fillna(df[<span class="string">&#x27;烈酒消耗量&#x27;</span>].mean())</span><br><span class="line">df[<span class="string">&#x27;红酒消耗量&#x27;</span>] = df[<span class="string">&#x27;红酒消耗量&#x27;</span>].fillna(df[<span class="string">&#x27;红酒消耗量&#x27;</span>].mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对所在大洲的缺失值不做处理</span></span><br><span class="line">df.isnull().<span class="built_in">sum</span>() <span class="comment"># 缺失值的统计</span></span><br></pre></td></tr></table></figure><pre><code>国家             0啤酒消耗量       0烈酒消耗量       0红酒消耗量       0总酒精消耗量     0所在大洲        23dtype: int64</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 饮酒情况对比</span></span><br><span class="line"><span class="comment">#（1）查找啤酒、烈酒和红酒的消耗量都高于相应酒种消耗量 75%分位数的国家；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;啤酒消耗量&#x27;</span>].quantile(<span class="number">0.75</span>) <span class="comment"># 或者用des = df.describe(include=&quot;all&quot;) 和 des.loc[&#x27;75%&#x27;,&#x27;啤酒消耗量&#x27;] 来取出各类酒对75%分位数的值</span></span><br><span class="line"></span><br><span class="line">alcohol = df.loc[ (df[<span class="string">&#x27;啤酒消耗量&#x27;</span>]&gt;df[<span class="string">&#x27;啤酒消耗量&#x27;</span>].quantile(<span class="number">0.75</span>)) &amp; (df[<span class="string">&#x27;烈酒消耗量&#x27;</span>]&gt;df[<span class="string">&#x27;烈酒消耗量&#x27;</span>].quantile(<span class="number">0.75</span>)) &amp; (df[<span class="string">&#x27;红酒消耗量&#x27;</span>]&gt;df[<span class="string">&#x27;红酒消耗量&#x27;</span>].quantile(<span class="number">0.75</span>)) ]</span><br><span class="line">alcohol <span class="comment"># 显示满足条件的每行详细记录（含国家名，各类酒的消耗量，所在大洲）</span></span><br><span class="line"></span><br><span class="line">alcohol[<span class="string">&#x27;国家&#x27;</span>] <span class="comment"># 显示满足条件的国家</span></span><br></pre></td></tr></table></figure><pre><code>3                 Andorra25               Bulgaria44                 Cyprus45         Czech Republic60                Finland75                Hungary93                 Latvia99             Luxembourg141    Russian Federation151                Serbia155              Slovakia160                 Spain184                   USAName: 国家, dtype: object</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）统计（1）中各大洲国家的个数；</span></span><br><span class="line"></span><br><span class="line">alcohol[<span class="string">&#x27;所在大洲&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure><pre><code>EU    11AS     1Name: 所在大洲, dtype: int64</code></pre><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）统计各个大洲各类酒的消耗总量；</span></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;所在大洲&#x27;</span>).<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111803376.jpg" alt="img-202304111803376" style="zoom:80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）计算各类酒占各大洲总消耗量的比重。</span></span><br><span class="line"></span><br><span class="line">d = df.groupby(<span class="string">&#x27;所在大洲&#x27;</span>).<span class="built_in">sum</span>()</span><br><span class="line">d.drop(<span class="string">&#x27;总酒精消耗量&#x27;</span>,axis = <span class="number">1</span>,inplace = <span class="literal">True</span>) <span class="comment"># axis=1，删除总酒精消耗量这一列</span></span><br><span class="line">d.div(d.<span class="built_in">sum</span>(axis=<span class="number">1</span>), axis=<span class="number">0</span>) <span class="comment"># 按列（即投影到列）求和, 再按行（即投影到行）除法</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304111803314.jpg" alt="img-202304111803314" style="zoom:80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4．通过饮酒情况对比，对各大洲的饮酒习惯进行分析。</span></span><br><span class="line"></span><br><span class="line">d1 = df.groupby(<span class="string">&#x27;所在大洲&#x27;</span>).<span class="built_in">sum</span>()</span><br><span class="line">d1[<span class="string">&#x27;总酒精消耗量&#x27;</span>]</span><br><span class="line"><span class="comment"># 由上面（4）中的各类酒的占比分析及总酒精消耗量得知，</span></span><br><span class="line"><span class="comment"># 几乎所有大洲都对啤酒的消耗量较高，尤其是AF（非洲）；但对红酒的消耗量较低</span></span><br><span class="line"><span class="comment"># 同时EU（欧洲）人群对酒精的依赖度最高，OC（大洋洲）人群对酒精的依赖度最低</span></span><br></pre></td></tr></table></figure><pre><code>所在大洲AF    159.4AS     95.5EU    387.8OC     54.1SA     75.7Name: 总酒精消耗量, dtype: float64</code></pre><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p><a href="https://pan.baidu.com/s/1Mfwg9hICfGhxFHTnaXxmAg?pwd=2023">drinks.csv 数据集下载</a></p><p><a href="https://blog.csdn.net/HunGRy_FOOliSHhh/article/details/113762347">使用Pandas获取数据以及数据概览</a></p><p><a href="https://blog.csdn.net/u013177138/article/details/121689496">DataFrame的修改方法(值、列、索引)</a></p><p><a href="https://blog.csdn.net/dair6/article/details/121352283">Pandas中计算分位数的方法describe、quantile</a></p><p><a href="https://blog.csdn.net/weixin_46945026/article/details/116670239">Pandas进一步实战_酒品数据初步探索</a></p><p><a href="https://blog.csdn.net/baidu_34454863/article/details/100859928">Pandas入门_探索酒类消费数据</a></p><p><strong>遇到问题及解决方案</strong></p><p><a href="https://blog.csdn.net/weixin_37474682/article/details/121059702">Python报错解决：TypeError: Cannot interpret ‘＜attribute ‘dtype‘ of ‘numpy.generic‘objects＞‘as a data type</a></p><p>成功更新pandas后，问题得到解决</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301519590.jpg" alt="img-202304301519590"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-上机实践2（Pandas-统计分析）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-上机实践2（Pandas-统计分析）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 上机实践2（Pandas 统计分析）&quot;&gt;&lt;/a&gt;数据分析与</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="Pandas" scheme="https://ariesfun.gitee.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 上机实践1（Numpy 数值计算）</title>
    <link href="https://ariesfun.gitee.io/posts/8203.html"/>
    <id>https://ariesfun.gitee.io/posts/8203.html</id>
    <published>2023-04-30T07:03:17.825Z</published>
    <updated>2023-04-30T07:08:29.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-上机实践1（Numpy-数值计算）"><a href="#数据分析与可视化-上机实践1（Numpy-数值计算）" class="headerlink" title="数据分析与可视化 上机实践1（Numpy 数值计算）"></a>数据分析与可视化 上机实践1（Numpy 数值计算）</h2><h3 id="一、实践目的"><a href="#一、实践目的" class="headerlink" title="一、实践目的"></a>一、实践目的</h3><p><strong>1.掌握 Numpy 库的使用方法。</strong></p><p><strong>2.灵活应用 Numpy 库解决数值计算和图像处理的相关问题。</strong> </p><hr><h3 id="二、彩色向灰度图转换原理"><a href="#二、彩色向灰度图转换原理" class="headerlink" title="二、彩色向灰度图转换原理"></a>二、彩色向灰度图转换原理</h3><p>图像是由若干个像素组成，每个像素有明确的位置和被分配的颜色值。</p><p>一张图像就构成了一个像素矩阵。彩色图像的每个像素由 R、G、B 分量构成;分量值介于 0到255 之间。灰度图像是每个像素只有一个采样颜色的图像，显示为从最 暗黑色到最亮的白色的灰度，取值范围 0到255。</p><p>彩色图像向灰度图像转换的常用公式为：<br>Gray = R * 0.299 + G * 0.587 + B * 0.114<br>利用矩阵运算，即可将彩色图像转换为灰度图像。 </p><hr><h3 id="三、实践内容要求"><a href="#三、实践内容要求" class="headerlink" title="三、实践内容要求"></a>三、实践内容要求</h3><ol><li><p>数组的创建<br>（1）创建全 0 数组，全 1 数组，随机数数组； </p><p>（2）创建一个数值范围为 0~1，间隔为 0.01 的数组。</p></li><li><p>任意创建一个二维数组，对其维度进行操作 </p><p> （1）将数组的行变列； </p><p> （2）返回最后一个元素； </p><p> （3）返回第 2 到第 4 个元素； </p><p> （4）返回逆序数组。 </p></li><li><p>任意创建两个二维的数组 arr1、arr2，对两个数组进行四则运算：arr1+arr2、 arr1-arr2、arr1*arr2、arr1/arr2。 </p></li><li><p>创建数组 arr3=[3 6 9 3 1 5 7 2]，分别完成排序、去重、总和、累计和、均 值、标准差、方差、最小值和最大值的统计。</p></li><li><p>了解图像的构成，结合 Matplotlib 和 NumPy 实现彩色图像到灰色图像的 转换，将彩色图像转换为灰度图像。 </p></li><li><p>5 的实验步骤包括以下几个： 1. 导入 numpy 和 matplotlib 模块； 2. 读取彩色图像(plt.imread)； 3. 显示彩色图像(plt.imshow)； 4. 通过数组间的运算，计算灰度图像的像素值； 5. 显示灰度图像</p></li></ol><hr><h3 id="四、完成情况"><a href="#四、完成情况" class="headerlink" title="四、完成情况"></a>四、完成情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.数组的创建；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#（1）创建全 0 数组，全 1 数组，随机数数组；</span></span><br><span class="line">a = np.zeros((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = np.ones((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">c = np.random.random((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）创建一个数值范围为 0~1，间隔为 0.01 的数组。</span></span><br><span class="line">a = np.arange(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.01</span>) <span class="comment"># 第3个参数为间隔距离</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[[0. 0. 0.]</span><br><span class="line"> [0. 0. 0.]</span><br><span class="line"> [0. 0. 0.]]</span><br><span class="line">[[1. 1. 1.]</span><br><span class="line"> [1. 1. 1.]</span><br><span class="line"> [1. 1. 1.]]</span><br><span class="line">[[0.59795796 0.47702449 0.90950593]</span><br><span class="line"> [0.27112045 0.53074871 0.70262116]</span><br><span class="line"> [0.97665706 0.43174363 0.17952276]]</span><br><span class="line">[0.   0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1  0.11 0.12 0.13</span><br><span class="line"> 0.14 0.15 0.16 0.17 0.18 0.19 0.2  0.21 0.22 0.23 0.24 0.25 0.26 0.27</span><br><span class="line"> 0.28 0.29 0.3  0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4  0.41</span><br><span class="line"> 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5  0.51 0.52 0.53 0.54 0.55</span><br><span class="line"> 0.56 0.57 0.58 0.59 0.6  0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69</span><br><span class="line"> 0.7  0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8  0.81 0.82 0.83</span><br><span class="line"> 0.84 0.85 0.86 0.87 0.88 0.89 0.9  0.91 0.92 0.93 0.94 0.95 0.96 0.97</span><br><span class="line"> 0.98 0.99]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 任意创建一个二维数组，对其维度进行操作；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.T) <span class="comment"># 数组转置</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>, <span class="number">2</span>]) <span class="comment"># 返回最后一个元素值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>, <span class="number">2</span>]) <span class="comment"># 返回第2到第4个元素</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>, : <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[: : -<span class="number">1</span>, : : -<span class="number">1</span>]) <span class="comment"># 先对所有行处理返回逆序序列，再对列做逆序处理</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[[0 1 2]</span><br><span class="line"> [3 4 5]</span><br><span class="line"> [6 7 8]]</span><br><span class="line">[[0 3 6]</span><br><span class="line"> [1 4 7]</span><br><span class="line"> [2 5 8]]</span><br><span class="line">8</span><br><span class="line">2</span><br><span class="line">[3 4]</span><br><span class="line">[[8 7 6]</span><br><span class="line"> [5 4 3]</span><br><span class="line"> [2 1 0]]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.任意创建两个二维的数组 arr1、arr2，对两个数组进行四则运算：arr1+arr2、arr1-arr2、arr1*arr2、arr1/arr2；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>) <span class="comment"># 0~8的二维方阵</span></span><br><span class="line">b = np.ones( (<span class="number">3</span>, <span class="number">3</span>) ) <span class="comment"># 全1的方阵</span></span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="built_in">print</span>(a - b)</span><br><span class="line"><span class="built_in">print</span>(a * b)</span><br><span class="line"><span class="built_in">print</span>(a / b)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[[1. 2. 3.]</span><br><span class="line"> [4. 5. 6.]</span><br><span class="line"> [7. 8. 9.]]</span><br><span class="line">[[-1.  0.  1.]</span><br><span class="line"> [ 2.  3.  4.]</span><br><span class="line"> [ 5.  6.  7.]]</span><br><span class="line">[[0. 1. 2.]</span><br><span class="line"> [3. 4. 5.]</span><br><span class="line"> [6. 7. 8.]]</span><br><span class="line">[[0. 1. 2.]</span><br><span class="line"> [3. 4. 5.]</span><br><span class="line"> [6. 7. 8.]]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 创建数组 arr3=[3 6 9 3 1 5 7 2]，分别完成排序、去重、总和、累计和、均值、标准差、方差、最小值和最大值的统计。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(np.sort(a)) <span class="comment"># 升序排列</span></span><br><span class="line"><span class="built_in">print</span>(np.unique(a)) <span class="comment"># 去重</span></span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">sum</span>()) <span class="comment"># 求总和</span></span><br><span class="line"><span class="built_in">print</span>(a.mean()) <span class="comment"># 求均值</span></span><br><span class="line"><span class="built_in">print</span>(a.std()) <span class="comment"># 求标准差</span></span><br><span class="line"><span class="built_in">print</span>(a.var()) <span class="comment"># 求方差</span></span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">min</span>()) <span class="comment"># 求最小值</span></span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">max</span>()) <span class="comment"># 求最大值</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[1 2 3 3 5 6 7 9]</span><br><span class="line">[1 2 3 5 6 7 9]</span><br><span class="line">36</span><br><span class="line">4.5</span><br><span class="line">2.5495097567963922</span><br><span class="line">6.5</span><br><span class="line">1</span><br><span class="line">9</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5.将彩色图像转换为灰度图像 RGB to GRAY</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># matplotlib.pyplot.imread(path)用于读取一张图片，将图像数据变成数组array.</span></span><br><span class="line">img = plt.imread(<span class="string">&#x27;logo.png&#x27;</span>) <span class="comment"># plt读取的通道顺序为R、G、B</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用subplot展示</span></span><br><span class="line">plt.figure(figsize = (<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">image1 = plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">image1.set_title(<span class="string">&#x27;Raw Image&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gray转化公式，red*0.299 + green*0.587 + blue*0.114</span></span><br><span class="line">img1 = <span class="number">0.2989</span> * img[:,:,<span class="number">0</span>] + <span class="number">0.5870</span> * img[:,:,<span class="number">1</span>] + <span class="number">0.114</span> * img[:,:,<span class="number">2</span>]</span><br><span class="line">image2 = plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">image2.set_title(<span class="string">&#x27;Gray Image&#x27;</span>)</span><br><span class="line">plt.imshow(img1, cmap = <span class="string">&#x27;gray&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301449380.png" alt="img-202304301449380"></p><hr><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p><a href="https://ariesfun.gitee.io/posts/85c6.html">计算机视觉 上机实践一 图像的基本操作 </a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-上机实践1（Numpy-数值计算）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-上机实践1（Numpy-数值计算）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 上机实践1（Numpy 数值计算）&quot;&gt;&lt;/a&gt;数据分析与可视化</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="NumPy" scheme="https://ariesfun.gitee.io/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 实践基础练习六（Pandas）</title>
    <link href="https://ariesfun.gitee.io/posts/1c4c.html"/>
    <id>https://ariesfun.gitee.io/posts/1c4c.html</id>
    <published>2023-04-30T05:53:25.597Z</published>
    <updated>2023-04-30T05:55:14.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习六-（Pandas）"><a href="#数据分析与可视化-实践基础练习六-（Pandas）" class="headerlink" title="数据分析与可视化 实践基础练习六 （Pandas）"></a>数据分析与可视化 实践基础练习六 （Pandas）</h2><h3 id="一、本节需要掌握的Pandas相关函数或属性"><a href="#一、本节需要掌握的Pandas相关函数或属性" class="headerlink" title="一、本节需要掌握的Pandas相关函数或属性"></a>一、本节需要掌握的Pandas相关函数或属性</h3><ol><li><p>数据清洗：<strong>缺失值处理、重复值处理、异常值处理</strong></p></li><li><p>数据标准化方法：<strong>离差标准化、标准差标准化、小数定标标准化</strong></p></li><li><p>数据转换：<strong>类别型数据的亚变量处理、连续变量的离散化</strong></p></li></ol><hr><h3 id="二、实训案例"><a href="#二、实训案例" class="headerlink" title="二、实训案例"></a>二、实训案例</h3><h4 id="1-本数据集为一个包含30000个样本的美国高中生社交网络信息数据集。"><a href="#1-本数据集为一个包含30000个样本的美国高中生社交网络信息数据集。" class="headerlink" title="1. 本数据集为一个包含30000个样本的美国高中生社交网络信息数据集。"></a>1. 本数据集为一个包含30000个样本的美国高中生社交网络信息数据集。</h4><p>数据均匀采样于2006年到2009年，每个样本包含40个变量，其中gradyear、gender、age和friends四个变量代表高中生的毕业年份、性别、年龄和好友数等基本信息，剩余36个关键词代表了高中生的5大兴趣类：课外活动、时尚、宗教、浪漫和反社会行为，具体描述如下：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301347552.png" alt="img-202304301347552"></p><p><a href="https://pan.baidu.com/s/16NFEosBYX3F_o-oP5Vdpeg?pwd=2023">teenager 数据集下载</a></p><hr><h4 id="2-结合数据集完成以下操作。"><a href="#2-结合数据集完成以下操作。" class="headerlink" title="2. 结合数据集完成以下操作。"></a>2. 结合数据集完成以下操作。</h4><p>（1）读取数据并查看数据的前5行；</p><p>（2）查看数据集整体情况；</p><p>（3）查看缺失值的统计性描述分布情况；</p><p>（4）假设青少年的年龄范围为13-20岁，我们将不在此范围的数据记为缺失值，重新统计缺失值数目；</p><p>（5）选取年龄的均值填充年龄缺失值；</p><p>（6）统计性别缺失值并将其删除；</p><p>（7）采用箱线图对friend列数据进行异常值检测；</p><p>（8）删除异常值（规定：超过上四分位+1.5倍IQR距离，或者下四分位-1.5倍IQR距离的点为异常值，四分位距(IQR)就是上四分位与下四分位的差值，我们以IQR的1.5倍为标准）</p><p>（9）采用箱线图查看异常值剔除后的数据分布情况；</p><p>（10）对friend列进行标准差标准化处理；</p><p>（11）对gender列进行One-Hot编码；</p><p>（12）采用等距离散化方法对friends进行划分。</p><hr><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）读取数据并查看数据的前5行；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;teenager_sns.csv&#x27;</span>, sep = <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">df.head(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211857175.jpg" alt="img-202304211857175"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（2）查看数据集整体情况；</span></span><br><span class="line"></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 30000 entries, 0 to 29999</span><br><span class="line">Data columns (total 40 columns):</span><br><span class="line"> #   Column        Non-Null Count  Dtype  </span><br><span class="line">---  ------        --------------  -----  </span><br><span class="line"> 0   gradyear      30000 non-null  int64  </span><br><span class="line"> 1   gender        27276 non-null  object </span><br><span class="line"> 2   age           24914 non-null  float64</span><br><span class="line"> 3   friends       30000 non-null  int64  </span><br><span class="line"> 4   basketball    30000 non-null  int64  </span><br><span class="line"> 5   football      30000 non-null  int64  </span><br><span class="line"> 6   soccer        30000 non-null  int64  </span><br><span class="line"> 7   softball      30000 non-null  int64  </span><br><span class="line"> 8   volleyball    30000 non-null  int64  </span><br><span class="line"> 9   swimming      30000 non-null  int64  </span><br><span class="line"> 10  cheerleading  30000 non-null  int64  </span><br><span class="line"> 11  baseball      30000 non-null  int64  </span><br><span class="line"> 12  tennis        30000 non-null  int64  </span><br><span class="line"> 13  sports        30000 non-null  int64  </span><br><span class="line"> 14  cute          30000 non-null  int64  </span><br><span class="line"> 15  sex           30000 non-null  int64  </span><br><span class="line"> 16  sexy          30000 non-null  int64  </span><br><span class="line"> 17  hot           30000 non-null  int64  </span><br><span class="line"> 18  kissed        30000 non-null  int64  </span><br><span class="line"> 19  dance         30000 non-null  int64  </span><br><span class="line"> 20  band          30000 non-null  int64  </span><br><span class="line"> 21  marching      30000 non-null  int64  </span><br><span class="line"> 22  music         30000 non-null  int64  </span><br><span class="line"> 23  rock          30000 non-null  int64  </span><br><span class="line"> 24  god           30000 non-null  int64  </span><br><span class="line"> 25  church        30000 non-null  int64  </span><br><span class="line"> 26  jesus         30000 non-null  int64  </span><br><span class="line"> 27  bible         30000 non-null  int64  </span><br><span class="line"> 28  hair          30000 non-null  int64  </span><br><span class="line"> 29  dress         30000 non-null  int64  </span><br><span class="line"> 30  blonde        30000 non-null  int64  </span><br><span class="line"> 31  mall          30000 non-null  int64  </span><br><span class="line"> 32  shopping      30000 non-null  int64  </span><br><span class="line"> 33  clothes       30000 non-null  int64  </span><br><span class="line"> 34  hollister     30000 non-null  int64  </span><br><span class="line"> 35  abercrombie   30000 non-null  int64  </span><br><span class="line"> 36  die           30000 non-null  int64  </span><br><span class="line"> 37  death         30000 non-null  int64  </span><br><span class="line"> 38  drunk         30000 non-null  int64  </span><br><span class="line"> 39  drugs         30000 non-null  int64  </span><br><span class="line">dtypes: float64(1), int64(38), object(1)</span><br><span class="line">memory usage: 9.2+ MB</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）查看缺失值的统计性描述分布情况；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;gender&#x27;</span>].describe()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">count     27276</span><br><span class="line">unique        2</span><br><span class="line">top           F</span><br><span class="line">freq      22054</span><br><span class="line">Name: gender, dtype: object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;age&#x27;</span>].describe()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count    24914.000000</span><br><span class="line">mean        17.993949</span><br><span class="line">std          7.858054</span><br><span class="line">min          3.086000</span><br><span class="line">25%         16.312000</span><br><span class="line">50%         17.287000</span><br><span class="line">75%         18.259000</span><br><span class="line">max        106.927000</span><br><span class="line">Name: age, dtype: float64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）假设青少年的年龄范围为13-20岁，我们将不在此范围的数据记为缺失值，重新统计缺失值数目；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;age&#x27;</span>].isnull().<span class="built_in">sum</span>() <span class="comment"># 先统计年龄的缺失值数目；</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5086</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将不在此范围的数据记为缺失值(np.nan)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df[<span class="string">&#x27;age&#x27;</span>] = df.apply(<span class="keyword">lambda</span> x : np.nan <span class="keyword">if</span> (x[<span class="string">&#x27;age&#x27;</span>]&lt;<span class="number">13.0</span>) | (x[<span class="string">&#x27;age&#x27;</span>]&gt;<span class="number">20.0</span>) <span class="keyword">else</span> x[<span class="string">&#x27;age&#x27;</span>], axis = <span class="number">1</span>) </span><br><span class="line">df[<span class="string">&#x27;age&#x27;</span>].isnull().<span class="built_in">sum</span>() <span class="comment"># 再次统计值</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5523</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）选取年龄的均值填充年龄缺失值；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># df[&#x27;fill_age&#x27;]=df[&#x27;age&#x27;].fillna(df[&#x27;age&#x27;].mean()) # 增加了新列,使用均值来填充缺失值</span></span><br><span class="line">df.insert(<span class="number">3</span>, <span class="string">&#x27;fill_age&#x27;</span>, df[<span class="string">&#x27;age&#x27;</span>].fillna(df[<span class="string">&#x27;age&#x27;</span>].mean())) <span class="comment"># 插到age这列后面</span></span><br><span class="line">df.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211857172.jpg" alt="img-202304211857172"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）统计性别缺失值并将其删除；</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;gender&#x27;</span>].isnull().<span class="built_in">sum</span>() <span class="comment"># 2724</span></span><br><span class="line">df.dropna(subset=[<span class="string">&#x27;gender&#x27;</span>], inplace=<span class="literal">True</span>) <span class="comment"># subset[&#x27;col&#x27;],即丢子列&#x27;col&#x27;中含有缺失值的行</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;gender&#x27;</span>].isnull().<span class="built_in">sum</span>() <span class="comment"># 性别的缺失值变为0</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）采用箱线图对friend列数据进行异常值检测；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>,<span class="number">6</span>)) <span class="comment"># 只对friends这列进行处理</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.boxplot(x = df.friends) <span class="comment"># 画箱体图</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;friends&#x27;</span>, fontsize = <span class="number">14</span>) <span class="comment"># 横坐标名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Count&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分布情况</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.hist(df.friends, bins = <span class="number">15</span>) <span class="comment"># 画直方图</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;friends&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Count&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211858295.jpg" alt="img-202304211858295"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（8）删除异常值（规定：超过上四分位+1.5倍IQR距离，或者下四分位-1.5倍IQR距离的点为异常值，四分位距(IQR)就是上四分位与下四分位的差值，我们以IQR的1.5倍为标准）</span></span><br><span class="line"></span><br><span class="line">IQR = df[<span class="string">&#x27;friends&#x27;</span>].quantile(<span class="number">0.75</span>) - df[<span class="string">&#x27;friends&#x27;</span>].quantile(<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">up = df[<span class="string">&#x27;friends&#x27;</span>].quantile(<span class="number">0.75</span>) + IQR*<span class="number">1.5</span> <span class="comment"># 表示上限，最大值</span></span><br><span class="line">down = df[<span class="string">&#x27;friends&#x27;</span>].quantile(<span class="number">0.25</span>) - IQR*<span class="number">1.5</span> <span class="comment"># 表示下限，最低值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对friends的这列进行判断，为真的会保留，其余的都是异常值</span></span><br><span class="line">teenager = df[ (df[<span class="string">&#x27;friends&#x27;</span>] &gt; down) &amp; (df[<span class="string">&#x27;friends&#x27;</span>] &lt; up)] </span><br><span class="line">teenager[<span class="string">&#x27;friends&#x27;</span>].describe()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count    26122.000000</span><br><span class="line">mean        25.409425</span><br><span class="line">std         24.951122</span><br><span class="line">min          0.000000</span><br><span class="line">25%          4.000000</span><br><span class="line">50%         19.000000</span><br><span class="line">75%         40.000000</span><br><span class="line">max        103.000000</span><br><span class="line">Name: friends, dtype: float64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（9）采用箱线图查看异常值剔除后的数据分布情况；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>,<span class="number">6</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.boxplot(x = teenager.friends) <span class="comment"># 画箱体图</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;friends&#x27;</span>, fontsize = <span class="number">14</span>) <span class="comment"># 横坐标名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Count&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分布情况</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.hist(teenager.friends, bins = <span class="number">15</span>) <span class="comment"># 直方图</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;friends&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Count&#x27;</span>, fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211852442.png" alt="img-202304211852442"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（10）对friend列进行标准差标准化处理；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">StandarScaler</span>(<span class="params">data</span>):</span><br><span class="line">    data=(data - data.mean()) / data.std() <span class="comment"># 标准差标准化转化公式</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增一列表示标准差标准化处理后的结果</span></span><br><span class="line">teenager.insert(<span class="number">4</span>, <span class="string">&#x27;firStd&#x27;</span>, StandarScaler(teenager[<span class="string">&#x27;friends&#x27;</span>]))</span><br><span class="line">teenager.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211858472.jpg" alt="img-202304211858472"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（11）对gender列进行One-Hot编码；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行哑变量变换，变为数值型</span></span><br><span class="line">pd.get_dummies(teenager).head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211859905.jpg" alt="img-202304211859905"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（12）采用等距离散化方法对friends进行划分。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等距离散化,在friends后新增一列</span></span><br><span class="line">col_new = <span class="string">&#x27;group&#x27;</span></span><br><span class="line">teenager.insert(<span class="number">4</span>, col_new, pd.cut(teenager[<span class="string">&#x27;friends&#x27;</span>], <span class="number">3</span>, labels = [<span class="string">&#x27;好友少&#x27;</span>, <span class="string">&#x27;好友正常&#x27;</span>, <span class="string">&#x27;好友多&#x27;</span>])) <span class="comment"># 按从小到大等距排列，分为三组（自定义标签名）</span></span><br><span class="line">teenager.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211859133.jpg" alt="img-202304211859133"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">teenager[<span class="string">&#x27;group&#x27;</span>].value_counts() <span class="comment"># 统计各个分组的数量</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">好友少     18226</span><br><span class="line">好友正常     5847</span><br><span class="line">好友多      2049</span><br><span class="line">Name: group, dtype: int64</span><br></pre></td></tr></table></figure><hr><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://pan.baidu.com/s/16NFEosBYX3F_o-oP5Vdpeg?pwd=2023">teenager 数据集下载</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-实践基础练习六-（Pandas）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-实践基础练习六-（Pandas）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 实践基础练习六 （Pandas）&quot;&gt;&lt;/a&gt;数据分析与可视化 实践</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="Pandas" scheme="https://ariesfun.gitee.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 实践基础练习五（Pandas）</title>
    <link href="https://ariesfun.gitee.io/posts/1aee.html"/>
    <id>https://ariesfun.gitee.io/posts/1aee.html</id>
    <published>2023-04-30T05:26:56.650Z</published>
    <updated>2023-04-30T05:44:40.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习五-（Pandas）"><a href="#数据分析与可视化-实践基础练习五-（Pandas）" class="headerlink" title="数据分析与可视化 实践基础练习五 （Pandas）"></a>数据分析与可视化 实践基础练习五 （Pandas）</h2><h3 id="一、本节需要掌握的Pandas相关函数或属性"><a href="#一、本节需要掌握的Pandas相关函数或属性" class="headerlink" title="一、本节需要掌握的Pandas相关函数或属性"></a>一、本节需要掌握的Pandas相关函数或属性</h3><ol><li><p>Pandas数据运算    </p></li><li><p>Pandas常用的汇总与统计性方法</p></li><li><p>数据分组<strong>df.groupby( )</strong>   </p><p> 参数by：可以是函数，字典，Series; axis=0是按列，1是按行</p></li><li><p>数据聚合<strong>agg()、apply()、transform()</strong>     </p><p> agg(): 可对分组后的数据进行一系列的操作包含求和求最值，均值等</p><p> apply(): 可自定义面向分组的聚合函数（Series对象是对每个元素处理，DataFrame对象是对一行或一列处理，groupby对象是对一个分组进行处理）</p><p> transfrom(): 不对数据进行聚合输出，而只是对每一行记录提供了相应的聚合结果（输出结果有冗余）</p></li></ol><h3 id="二、实训案例"><a href="#二、实训案例" class="headerlink" title="二、实训案例"></a>二、实训案例</h3><h4 id="1-行星数据集记录了2014年之前发现的行星的信息，数据中主要特征有："><a href="#1-行星数据集记录了2014年之前发现的行星的信息，数据中主要特征有：" class="headerlink" title="1.行星数据集记录了2014年之前发现的行星的信息，数据中主要特征有："></a>1.行星数据集记录了2014年之前发现的行星的信息，数据中主要特征有：</h4><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304301300306.png" alt="img-202304301300306" style="zoom: 80%;" /><p><a href="https://pan.baidu.com/s/1joADk3p2taeNvDEhrkkLgg?pwd=2023">planets.csv 数据集下载</a></p><h4 id="2-结合数据集完成以下操作。"><a href="#2-结合数据集完成以下操作。" class="headerlink" title="2. 结合数据集完成以下操作。"></a>2. 结合数据集完成以下操作。</h4><p>（1）读取planets.csv文件；</p><p>（2）查看数据前5行；</p><p>（3）查看数据基本情况；</p><p>（4）按method特征对数据进行分组，并将新数据记为grouped；</p><p>（5）将数据按发现年份在2000年前和2000年后进行分组；</p><p>（6）求2000年前和2000年后的分组均值；</p><p>（7）查看不同方法发现的行星与地球距离的中位数；</p><p>（8）按发现行星的方法和发现的年代进行分组，并统计相应分组下发现的行星的总数；</p><p>（9）计算不同方法发现的行星在各特征上的极差；</p><p>（10）分别计算各种方法发现的行星的距离的均值和发现的数量之和。</p><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）读取planets.csv文件,导入行星数据表到DataFrame中；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;planets.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）查看数据前5行；</span></span><br><span class="line"></span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211841741.jpg" alt="img-202304211841741" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）查看数据基本情况；</span></span><br><span class="line"></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 1035 entries, 0 to 1034</span><br><span class="line">Data columns (total 6 columns):</span><br><span class="line"> #   Column          Non-Null Count  Dtype  </span><br><span class="line">---  ------          --------------  -----  </span><br><span class="line"> 0   method          1035 non-null   object </span><br><span class="line"> 1   number          1035 non-null   int64  </span><br><span class="line"> 2   orbital_period  992 non-null    float64</span><br><span class="line"> 3   mass            513 non-null    float64</span><br><span class="line"> 4   distance        808 non-null    float64</span><br><span class="line"> 5   year            1035 non-null   int64  </span><br><span class="line">dtypes: float64(3), int64(2), object(1)</span><br><span class="line">memory usage: 48.6+ KB</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（4）按method特征对数据进行分组，并将新数据记为grouped；</span></span><br><span class="line"></span><br><span class="line">grouped = df.groupby(<span class="string">&#x27;method&#x27;</span>)</span><br><span class="line">grouped.head(<span class="number">3</span>) <span class="comment">#对每个分组后的数据显示前3行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grouped.size() # 可统计每个分组的数量 </span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211842491.jpg" alt="img-202304211842491" style="zoom: 67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（5）将数据按发现年份在2000年前和2000年后进行分组；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行分段分组</span></span><br><span class="line">col_new = <span class="string">&#x27;Before 2000&#x27;</span> <span class="comment"># true就是在2000年前发现的</span></span><br><span class="line">df.insert(<span class="number">6</span>, col_new, df[<span class="string">&#x27;year&#x27;</span>] &lt; <span class="number">2000</span>) <span class="comment"># insert()用于插入列</span></span><br><span class="line"></span><br><span class="line">group = df.groupby(<span class="string">&#x27;Before 2000&#x27;</span>)</span><br><span class="line">group.head() <span class="comment"># 查看分组后各自前5行数据</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211843859.jpg" alt="img-202304211843859" style="zoom:80%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（6）求2000年前和2000年后的分组均值；</span></span><br><span class="line"></span><br><span class="line">group.mean() <span class="comment"># 用于求按按年份分组后数据的均值</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211843676.jpg" alt="img-20230421184367"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（7）查看不同方法发现的行星与地球距离的中位数；</span></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;method&#x27;</span>)[<span class="string">&#x27;distance&#x27;</span>].median() <span class="comment"># 先按methood分组，取&#x27;distance&#x27;的这列数据再求中位数</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">method</span><br><span class="line">Astrometry                         17.875</span><br><span class="line">Eclipse Timing Variations         315.360</span><br><span class="line">Imaging                            40.395</span><br><span class="line">Microlensing                     3840.000</span><br><span class="line">Orbital Brightness Modulation    1180.000</span><br><span class="line">Pulsar Timing                    1200.000</span><br><span class="line">Pulsation Timing Variations           NaN</span><br><span class="line">Radial Velocity                    40.445</span><br><span class="line">Transit                           341.000</span><br><span class="line">Transit Timing Variations         855.000</span><br><span class="line">Name: distance, dtype: float64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（8）按发现行星的方法和发现的年代进行分组，并统计相应分组下发现的行星的总数；</span></span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="number">40</span>) <span class="comment"># 为了让数据更全显示，可指定最大显示的行数</span></span><br><span class="line">df.groupby([<span class="string">&#x27;method&#x27;</span>, <span class="string">&#x27;year&#x27;</span>])[<span class="string">&#x27;number&#x27;</span>].<span class="built_in">sum</span>() <span class="comment"># 先对数据按&#x27;method&#x27;和&#x27;year&#x27;来分组</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">method                     year</span><br><span class="line">Astrometry                 2010     1</span><br><span class="line">                           2013     1</span><br><span class="line">Eclipse Timing Variations  2008     4</span><br><span class="line">                           2009     1</span><br><span class="line">                           2010     4</span><br><span class="line">                                   ..</span><br><span class="line">Transit                    2014    93</span><br><span class="line">Transit Timing Variations  2011     2</span><br><span class="line">                           2012     2</span><br><span class="line">                           2013     2</span><br><span class="line">                           2014     3</span><br><span class="line">Name: number, Length: 69, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（9）计算不同方法发现的行星在各特征上的极差；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在上面的（5）中引入了一列布尔值变量，为了便于数值计算此时可将该列删掉</span></span><br><span class="line">df.drop(<span class="string">&#x27;Before 2000&#x27;</span>, axis = <span class="number">1</span>, inplace = <span class="literal">True</span>) <span class="comment"># 确认替换原数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保证分组数据grouped不含boolean类型</span></span><br><span class="line">grouped.apply(<span class="keyword">lambda</span> x: x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>()) <span class="comment"># apply可自定义面向分组的聚合函数，对每一列计算极差函数（相当于grouped.max() - grouped.min()）</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211844285.jpg" alt="img-20230421184428" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（10）分别计算各种方法发现的行星的距离的均值和发现的数量之和。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用聚合函数</span></span><br><span class="line">grouped.agg(&#123;<span class="string">&#x27;distance&#x27;</span>: [np.mean], <span class="string">&#x27;number&#x27;</span>: [np.<span class="built_in">sum</span>]&#125;) <span class="comment"># 使用字典作为参数,来求距离的均值和数量之和</span></span><br><span class="line">                                                         <span class="comment"># 也可使用grouped[&#x27;distance&#x27;].mean() 和 grouped[&#x27;number&#x27;].sum()</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304211844643.jpg" alt="img-202304211844643" style="zoom: 50%;" /><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://pan.baidu.com/s/1joADk3p2taeNvDEhrkkLgg?pwd=2023">planets.csv 数据集下载</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-实践基础练习五-（Pandas）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-实践基础练习五-（Pandas）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 实践基础练习五 （Pandas）&quot;&gt;&lt;/a&gt;数据分析与可视化 实践</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="Pandas" scheme="https://ariesfun.gitee.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>春季每日一题2023 已完结</title>
    <link href="https://ariesfun.gitee.io/posts/3f57.html"/>
    <id>https://ariesfun.gitee.io/posts/3f57.html</id>
    <published>2023-04-22T02:15:55.087Z</published>
    <updated>2023-05-22T11:44:01.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AcWing-春季每日一题2023-已完结"><a href="#AcWing-春季每日一题2023-已完结" class="headerlink" title="AcWing 春季每日一题2023 (已完结)"></a>AcWing 春季每日一题2023 (已完结)</h2><h3 id="打卡题目（内容有疑问或错误，欢迎随时询问或指正哈-）"><a href="#打卡题目（内容有疑问或错误，欢迎随时询问或指正哈-）" class="headerlink" title="打卡题目（内容有疑问或错误，欢迎随时询问或指正哈~）"></a>打卡题目（内容有疑问或错误，欢迎随时询问或指正哈~）</h3><hr><p><strong>Day17: 05/08</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3483/">【棋盘游戏】</a>    考查知识点： <u>单源最短路径，SPFA，图论</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6419849/">AcWing 3480. 棋盘游戏</a></p><hr><p><strong>Day16: 05/07</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/description/3485/">【大数运算】</a>    考查知识点： <u>高精度，符号判断，模板题</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6414963/">AcWing 3482. 大数运算</a></p><hr><p><strong>Day15: 05/06</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3500/">【质数】</a>    考查知识点： <u>筛质数，线性筛法，埃氏筛法，模板题</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9193593/">AcWing 3497. 质数</a></p><hr><p><strong>Day14: 05/05</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3515/">【最短距离总和】</a>    考查知识点： <u>最短距离总和，Floyd，DP</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9182517/">AcWing 3512. 最短距离总和</a></p><p>题目：<a href="https://www.acwing.com/problem/content/856/">【 Floyd求最短路】</a>    考查知识点： <u> 最短路，Floyd，求每一对顶点的最短距离，模板题</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6399816/">AcWing 854. Floyd求最短路</a></p><hr><p><strong>Day13: 05/03</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3501/">【日期差值】</a>    考查知识点： <u>模拟题，日期计算</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6388230/">AcWing 3498. 日期差值</a></p><hr><p><strong>Day12: 05/02</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3476/">【鸡兔同笼】</a>    考查知识点： <u>直接模拟，贪心</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6383154/">AcWing 3473. 鸡兔同笼</a></p><hr><p><strong>Day11: 05/01</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3454/">【 字符串排序II】</a>    考查知识点： <u>对字符排序，cmp函数，pair排序</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9155991/">AcWing 3451. 字符串排序II</a></p><p>题目：<a href="https://www.acwing.com/problem/content/3428/">【 小白鼠排队】</a>    考查知识点： <u>sort() 排序，pair二元组排序</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9155751/">AcWing 3425. 小白鼠排队</a></p><hr><p><strong>Day10: 04/30</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/description/3398/">【 10进制 VS 2进制】</a>    考查知识点： <u>C++高精度处理，进位制</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6373717/">AcWing 3395. 10进制 VS 2进制 </a></p><p>题目：<a href="https://www.acwing.com/problem/content/3478/">【 简单密码】</a>    考查知识点： <u>模拟题，字符串处理</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6372935/">AcWing 3475. 简单密码 </a></p><hr><p><strong>Day9: 04/29</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3579/">【 分组统计】</a>    考查知识点： <u>模拟题，数组去重</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6370000/">AcWing 3576. 分组统计 </a></p><hr><p><strong>Day8: 04/28</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3546/">【 三元组】</a>    考查知识点： <u>简单模拟，(考研机试题)</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6362210/">AcWing 3543. 三元组 </a></p><hr><p><strong>Day7: 04/27</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/3511/">【最长公共子串】</a>    考查知识点： <u>最长公共子串问题，二分，字符串哈希，哈希表(STL)</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9132682/">AcWing 3508. 最长公共子串 </a></p><hr><p><strong>Day6: 04/26</strong> </p><p>题目：<a href="https://www.acwing.com/problem/content/3449/">【整数奇偶排序】</a>    考查知识点： <u>模拟题，简单排序</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9126853/">AcWing 3446. 整数奇偶排序</a></p><p>题目：<a href="https://www.acwing.com/problem/content/3434/">【skew数】</a>    考查知识点： <u>模拟题，字符串处理</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9126817/">AcWing 3431. skew数 </a></p><hr><p><strong>Day5: 04/25（补）</strong> 很有思维难度，写了好久呜呜~~</p><p>题目：<a href="https://www.acwing.com/problem/content/4967/">【子矩阵】</a>    考查知识点： <u>（二维）单调队列，滑动窗口拓展</u></p><p>题解：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/9122007/">AcWing 4964. 子矩阵 </a></p><hr><p><strong>Day4: 04/22</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/4961/">【接龙数列】</a>    考查知识点： <u>动态规划，线性DP，最长上升子序列变形</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6320641/">AcWing 4958. 接龙数列</a></p><hr><p><strong>Day3: 04/12</strong> </p><p>题目：<a href="https://www.acwing.com/problem/content/4960/">【飞机降落】</a>    考查知识点： <u>DFS，全排列，(状态压缩DP)</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6260091/">AcWing 4957. 飞机降落</a></p><hr><p><strong>Day2: 04/11</strong></p><p>题目：<a href="https://www.acwing.com/problem/content/4959/">【冶炼金属】</a>    考查知识点： <u>二分，推公式，整除性质</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6254141/">AcWing 4956. 冶炼金属</a></p><hr><p><strong>Day1: 04/09</strong> </p><p>题目：<a href="https://www.acwing.com/problem/content/description/3387/">【二叉树遍历】</a>    考查知识点： <u>DFS，树的遍历(前中后)，递归搜索树</u></p><p>题解：<a href="https://www.acwing.com/activity/content/code/content/6237121/">AcWing 3384. 二叉树遍历</a></p><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>活动地址：<a href="https://www.acwing.com/activity/content/introduction/3166/">AcWing-春季每日一题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;AcWing-春季每日一题2023-已完结&quot;&gt;&lt;a href=&quot;#AcWing-春季每日一题2023-已完结&quot; class=&quot;headerlink&quot; title=&quot;AcWing 春季每日一题2023 (已完结)&quot;&gt;&lt;/a&gt;AcWing 春季每日一题2023 (已完</summary>
      
    
    
    
    <category term="每日一题打卡" scheme="https://ariesfun.gitee.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%89%93%E5%8D%A1/"/>
    
    
    <category term="C/C++" scheme="https://ariesfun.gitee.io/tags/C-C/"/>
    
    <category term="每日一题" scheme="https://ariesfun.gitee.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="经典算法" scheme="https://ariesfun.gitee.io/tags/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"/>
    
    <category term="刷题记录" scheme="https://ariesfun.gitee.io/tags/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础 第三讲 Shell语法</title>
    <link href="https://ariesfun.gitee.io/posts/1e1a.html"/>
    <id>https://ariesfun.gitee.io/posts/1e1a.html</id>
    <published>2023-04-20T13:08:25.999Z</published>
    <updated>2023-05-01T08:20:52.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux基础-第三讲-shell语法"><a href="#Linux基础-第三讲-shell语法" class="headerlink" title="Linux基础 第三讲 shell语法"></a>Linux基础 第三讲 shell语法</h2><h2 id="1-shell语法"><a href="#1-shell语法" class="headerlink" title="1. shell语法"></a>1. shell语法</h2><h3 id="1-概论"><a href="#1-概论" class="headerlink" title="(1) 概论"></a>(1) 概论</h3><p><strong>shell是我们通过命令行与操作系统沟通的语言。</strong></p><p>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。<br><code>AC Terminal</code>中的命令行可以看成是一个“<strong>shell脚本在逐行执行</strong>”。</p><p>Linux中常见的shell脚本有很多种，常见的有：</p><ul><li><p>Bourne Shell(/usr/bin/sh或/bin/sh)</p></li><li><p><strong>Bourne Again Shell(/bin/bash)</strong></p></li><li><p>C Shell(/usr/bin/csh)</p></li><li><p>K Shell(/usr/bin/ksh)</p></li><li><p>zsh</p></li><li><p>…</p></li></ul><p><strong>Linux系统中一般默认使用bash</strong>，所以接下来讲解bash中的语法。<br>文件开头需要写<code>#! /bin/bash</code>，指明bash为脚本解释器。</p><p><strong>学习技巧</strong><br><strong>不要死记硬背，遇到含糊不清的地方，可以在AC Terminal里实际运行一遍。</strong></p><p><strong>脚本示例</strong><br>新建一个<code>test.sh</code>文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash  <span class="comment"># 指明解释器</span></span></span><br><span class="line">echo &quot;Hello World!&quot; # echo表示输出</span><br></pre></td></tr></table></figure><p><strong>运行方式</strong></p><ul><li><p>用解释器执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bash + 脚本文件名</span></span><br><span class="line"></span><br><span class="line">bash test.sh</span><br><span class="line">Hello World!  # 脚本输出</span><br></pre></td></tr></table></figure></li><li><p>作为可执行文件运行</p></li></ul><p><code>ls -l filename</code> 查看文件权限</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/image-20230201125236717.png" alt="image-20230201125236717"></p><p>每组共三个权限<strong>rwx</strong>,即读写执行权限（上图都无可执行权限）</p><p>有三组：1 作者本身的权限， 2  同组的权限， 3 其他用户的权限</p><p><code>chmod +x test.sh</code>  <strong>使脚本具有可执行权限</strong>（增加权限），同时文件名颜色从白到绿色</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./test.sh # 当前路径下执行</span><br><span class="line">Hello World! # 脚本输出</span><br><span class="line"></span><br><span class="line">/home/acs/test.sh  # 绝对路径下执行</span><br><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">~/test.sh  # 家目录路径下执行</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h3 id="2-注释"><a href="#2-注释" class="headerlink" title="(2) 注释"></a>(2) 注释</h3><p><strong>单行注释</strong><br>每行中<code>#</code>之后的内容均是注释。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一行注释</span></span><br><span class="line">echo &#x27;Hello World&#x27;  # 这也是注释</span><br></pre></td></tr></table></figure><p><strong>多行注释</strong></p><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;EOF   # 注意冒号也可以不用加</span><br><span class="line">第一行注释</span><br><span class="line">第二行注释</span><br><span class="line">第三行注释</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其中EOF可以换成其它任意字符串。 EOF == abc == !</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="(3) 变量"></a>(3) 变量</h3><p><strong>定义变量</strong><br>定义变量，不需要加<code>$</code>符号，例如：</p><p>ps: 定义变量时，赋值时<strong>等号两边</strong>不能有空格。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name1=&#x27;ariesfun&#x27;  # 单引号定义字符串，</span><br><span class="line">name2=&quot;ariesfun&quot;  # 双引号定义字符串</span><br><span class="line">name3=ariesfun    # 也可以不加引号，同样表示字符串</span><br></pre></td></tr></table></figure><p><strong>使用变量</strong><br>使用变量，需要加上<code>$</code>符号，或者<code>$&#123;&#125;</code>符号。花括号是可选的，主要为了<strong>帮助解释器识别变量边界</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun</span><br><span class="line">echo $name  # 输出ariesfun</span><br><span class="line">echo $&#123;name&#125; # 输出ariesfun</span><br><span class="line">echo $&#123;name&#125;hhhh  # 输出ariesfunhhhh</span><br></pre></td></tr></table></figure><p>定义变量的时候变量都是字符串，但当变量需要是整数时，会自动把变量转换成整数。</p><p><strong>只读变量</strong><br>使用<code>readonly</code>或者<code>declare</code>可以将变量<strong>变为只读</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun</span><br><span class="line">readonly name</span><br><span class="line">declare -r name  # 两种写法均可</span><br><span class="line">name=abc  # 会报错，因为此时name只读</span><br></pre></td></tr></table></figure><p><strong>删除变量</strong><br><code>unset</code>可以删除变量。</p><p>同时被声明为只读的变量无法被unset删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun</span><br><span class="line">unset name</span><br><span class="line">echo $name  # 输出空行</span><br></pre></td></tr></table></figure><p><strong>变量类型</strong></p><p>配环境会用到。</p><p><strong>1)</strong> 自定义变量（<strong>局部变量</strong>）<br>    子进程不能访问的变量</p><p><strong>2)<strong>环境变量（</strong>全局变量</strong>）<br>    子进程可以访问的变量</p><p>自定义变量改成全局变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun  # 定义变量</span><br><span class="line">export name  # 第一种方法，只在当前bash中有效</span><br><span class="line">declare -x name # 第二种方法</span><br></pre></td></tr></table></figure><p>环境变量改为局部变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export name=ariesfun  # 定义环境变量</span><br><span class="line">declare +x name  # 改为自定义变量</span><br></pre></td></tr></table></figure><p><strong>字符串</strong><br>字符串可以用单引号或双引号，也可以不用引号。</p><p>单引号与双引号的区别：</p><ul><li>单引号中的内容会原样输出，不会执行、不会取变量；</li><li><strong>双引号中的内容可以执行、可以取变量；</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=ariesfun  # 不用引号</span><br><span class="line">echo &#x27;hello, $name \&quot;hh\&quot;&#x27;  # 单引号字符串，输出 hello, $name \&quot;hh\&quot;</span><br><span class="line">echo &quot;hello, $name \&quot;hh\&quot;&quot;  # 双引号字符串，输出 hello, ariesfun &quot;hh&quot;</span><br></pre></td></tr></table></figure><p><strong>获取字符串长度</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;ariesfun&quot;</span><br><span class="line">echo $&#123;#name&#125;  # 输出8</span><br></pre></td></tr></table></figure><p><strong>提取子串</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;hello, ariesfun&quot;</span><br><span class="line">echo $&#123;name:0:5&#125;  # 提取从0开始的5个字符(类python中的切片，左闭右开)</span><br></pre></td></tr></table></figure><p>ps : </p><p><code>top</code>输出正在执行的进程，按<code>q</code>退出</p><p><code>type+命令</code>可以解释该命令的来源（内嵌命令、第三方命令等）</p><p><code>bash</code>可以用来开一个新的进程(原进程会休眠)，输入<code>exit</code>或按<code>ctrl+d</code>退出新的<code>bash</code></p><p><code>bash</code>：开启子进程，<code>exit</code>或<code>ctrl+d</code> : 退出子进程<br><code>export</code>变为环境变量，<code>declare +x</code>变为自定义变量</p><hr><h3 id="4-默认变量"><a href="#4-默认变量" class="headerlink" title="(4) 默认变量"></a>(4) 默认变量</h3><p><strong>文件参数变量</strong><br>在执行shell脚本时，可以向脚本传递参数。<code>$1</code>是第一个参数，<code>$2</code>是第二个参数，以此类推。</p><p>特殊的，**$0是文件名（包含路径）**。</p><p>其实就是我们输入的第一段，输入<strong>绝对路径</strong>就显示绝对路径，输入<strong>相对路径</strong>就显示相对路径</p><p>eg. 创建文件<code>test.sh</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;文件名：&quot;$0</span><br><span class="line">echo &quot;参数一：&quot;$1</span><br><span class="line">echo &quot;参数二：&quot;$2</span><br><span class="line">echo &quot;参数三：&quot;$3</span><br><span class="line">echo &quot;参数四：&quot;$4  #echo $&#123;10&#125; 多位参数需要加大括号</span><br></pre></td></tr></table></figure><p>然后执行该脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./test.sh 1 2 3 4</span><br><span class="line">文件名：./test.sh</span><br><span class="line">参数一：1</span><br><span class="line">参数二：2</span><br><span class="line">参数三：3</span><br><span class="line">参数四：4</span><br></pre></td></tr></table></figure><p><strong>其它参数相关变量</strong></p><table><thead><tr><th align="left">参数</th><th>说明</th></tr></thead><tbody><tr><td align="left"><code>$#</code></td><td>代表文件传入的参数个数，如上例中值为4</td></tr><tr><td align="left"><code>$*</code></td><td>由所有参数构成的用空格隔开的字符串，如上例中值为<code>&quot;$1 $2 $3 $4&quot;</code></td></tr><tr><td align="left"><code>$@</code></td><td>每个参数分别用双引号括起来的字符串，如上例中值为<code>&quot;$1&quot; &quot;$2&quot; &quot;$3&quot; &quot;$4&quot;</code></td></tr><tr><td align="left"><code>$$</code></td><td>脚本当前运行的进程ID</td></tr><tr><td align="left"><code>$?</code></td><td>返回上一条命令的<strong>退出状态</strong>（注意不是stdout，而是<strong>exit code</strong>）,<strong>0表示正常退出</strong>，其他值表示错误</td></tr><tr><td align="left"><code>$(command)</code></td><td>获取标准输出，返回<code>command</code>这条命令的stdout<strong>（可嵌套，能实现多个命令）</strong></td></tr><tr><td align="left">command，用``包起来（键盘左上角）</td><td>返回<code>command</code>这条命令的stdout（不可嵌套）</td></tr></tbody></table><p>ps:</p><p><code>$* </code> 会把几个参数合并成一个参数,<br><code>&amp;@</code> 结果出来的这几个参数仍然是独立的。</p><hr><h3 id="5-数组"><a href="#5-数组" class="headerlink" title="(5) 数组"></a>(5) 数组</h3><p>数组中可以存放多个不同类型的值，</p><p><strong>只支持一维数组，初始化时不需要指明数组大小, 数组下标从0开始。</strong></p><p><strong>定义</strong><br><u>数组用小括号表示，元素之间用空格隔开</u>。例如：</p><p><code>array=(1 abc &quot;def&quot; yyy)</code><br>也可以直接定义数组中某个元素的值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array[0]=1</span><br><span class="line">array[1]=abc</span><br><span class="line">array[2]=&quot;def&quot;</span><br><span class="line">array[3]=yyy</span><br></pre></td></tr></table></figure><p><strong>读取数组中某个元素的值</strong><br>格式：</p><p><code>$&#123;array[index]&#125;</code></p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yyy)</span><br><span class="line">echo $&#123;array[0]&#125;</span><br><span class="line">echo $&#123;array[1]&#125;</span><br><span class="line">echo $&#123;array[2]&#125;</span><br><span class="line">echo $&#123;array[3]&#125;</span><br></pre></td></tr></table></figure><p><strong>读取整个数组, 并输出</strong><br>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yyy)</span><br><span class="line"></span><br><span class="line">echo $&#123;array[@]&#125;  # 第一种写法</span><br><span class="line">echo $&#123;array[*]&#125;  # 第二种写法</span><br></pre></td></tr></table></figure><p><strong>数组长度</strong><br>类似于字符串,使用<code>#</code>号</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yyy)</span><br><span class="line"></span><br><span class="line">echo $&#123;#array[@]&#125;  # 第一种写法</span><br><span class="line">echo $&#123;#array[*]&#125;  # 第二种写法</span><br></pre></td></tr></table></figure><p>ps: 注意<br><strong>在读取整个数组时，未定义的部分就不会显示</strong>。比如定义了<code>a[0] a[1] a[2] a[1000]</code>,</p><p>利用<code>echo $&#123;a[@]&#125;</code>输出时，只会显示定义的数组那4个元素的值</p><p>对上例求长度时，结果是4，而不是1000</p><hr><h3 id="6-expr命令"><a href="#6-expr命令" class="headerlink" title="(6) expr命令"></a>(6) expr命令</h3><p><strong>expr命令用于求表达式的值</strong>，格式为：<code>expr 表达式</code></p><p><strong>expr可以用<code>$()</code>和``来取返回值。</strong></p><p><strong>乘号和括号都需要转义才能使用,因为单个符号有自己含义</strong></p><p><strong>表达式说明：</strong></p><ul><li><p>用空格隔开每一项</p></li><li><p>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可试试转义）</p></li><li><p>对包含空格和其他特殊字符的字符串要用引号括起来</p></li><li><p>expr会在<code>stdout</code>中输出结果。如果为<strong>逻辑关系表达式</strong>，则结果为真时，<code>stdout</code>输出1，否则输出0。</p></li><li><p>expr的<code>exit code</code>：如果为<strong>逻辑关系表达式</strong>，则结果为真时，<code>exit code</code>为0，否则为1。</p></li></ul><p>例如：（非重点）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr 3 &#x27;&gt;&#x27; 2 # 结果为真，stdout输出1，exit code为0 </span><br><span class="line">expr 3 &#x27;&lt;&#x27; 2 # 结果为假，stdout输出0，exit code为1</span><br></pre></td></tr></table></figure><p><strong>字符串表达式</strong></p><ul><li><p><code>length STRING</code> ps: 取得得字符串要<strong>加双引号</strong>,以防中间含有空格<br>  返回<code>STRING</code>的<strong>长度</strong></p></li><li><p><code>index STRING CHARSET</code><br>  <code>CHARSET</code>中任意单个字符在STRING中<strong>最前面的字符位置</strong>，<strong>下标从1开始</strong>。</p><p>  如果在STRING中完全不存在<code>CHARSET</code>中的字符，则返回0。</p></li><li><p><code>substr STRING POSITION LENGTH</code><br>  返回<code>STRING</code>字符串中从<code>POSITION</code>开始，长度最大为<code>LENGTH</code>的子串, <strong>截取子串</strong></p><p>  如果<code>POSITION</code>或<code>LENGTH</code>为负数，0或非数值，则返回空字符串。</p></li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;Hello World!&quot;</span><br><span class="line"></span><br><span class="line">echo `expr length &quot;$str&quot;`  # ``不是单引号，表示执行该命令，会输出12</span><br><span class="line">echo `expr index &quot;$str&quot; aWd`  # 输出7，下标从1开始</span><br><span class="line">echo `expr substr &quot;$str&quot; 2 3`  # 输出 ell</span><br></pre></td></tr></table></figure><p><strong>整数表达式</strong><br><code>expr</code>支持普通的算术操作，<u>算术表达式优先级低于字符串表达式，高于逻辑关系表达式</u>。</p><ul><li><code>+ - </code><br>加减运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><ul><li><p><code>* / %</code><br>乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</p><p>求n的m次幂 ： <code>echo $[n**m]</code> </p></li></ul><ul><li><code>()</code> 可以改变优先级，但<strong>需要用反斜杠转义</strong>。</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一行注释</span></span><br><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a + $b`  # 输出7</span><br><span class="line">echo `expr $a - $b`  # 输出-1</span><br><span class="line">echo `expr $a \* $b`  # 输出12，*需要转义(加单引号也可)</span><br><span class="line">echo `expr $a / $b`  # 输出0，整除</span><br><span class="line">echo `expr $a % $b` # 输出3</span><br><span class="line">echo $( expr \( $a + 1 \) \* \( $b + 1 \) )</span><br><span class="line">echo `expr \( $a + 1 \) \* \( $b + 1 \)`     # 输出20，值为(a +1) * (b + 1)</span><br></pre></td></tr></table></figure><p><strong>逻辑关系表达式</strong></p><ul><li><p><code>|</code><br>  如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。</p></li><li><p><code>&amp;</code><br>  如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</p></li><li><p><code>&lt; &lt;= = == != &gt;= &gt;</code><br>  比较两端的参数，如果为true，则返回1，否则返回0。”==”是”=”的同义词。</p><p>  <code>expr</code>首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</p></li><li><p><code>()</code> 可以改变优先级，但需要<strong>用反斜杠转义</strong>。</p></li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a \&gt; $b`  # 输出0，&gt;需要转义</span><br><span class="line">echo `expr $a &#x27;&lt;&#x27; $b`  # 输出1，也可以将特殊字符用引号引起来</span><br><span class="line">echo `expr $a &#x27;&gt;=&#x27; $b`  # 输出0</span><br><span class="line">echo `expr $a \&lt;\= $b`  # 输出1</span><br><span class="line"></span><br><span class="line">c=0</span><br><span class="line">d=5</span><br><span class="line"></span><br><span class="line">echo `expr $c \&amp; $d`  # 输出0</span><br><span class="line">echo `expr $a \&amp; $b`  # 输出3</span><br><span class="line">echo `expr $c \| $d`  # 输出5</span><br><span class="line">echo `expr $a \| $b`  # 输出3</span><br></pre></td></tr></table></figure><hr><h3 id="7-read命令"><a href="#7-read命令" class="headerlink" title="(7) read命令"></a>(7) read命令</h3><p><code>read</code>命令用于<strong>从标准输入中读取单行数据</strong>。当读到文件结束符时，<strong>exit code为1</strong>，否则为0。</p><p><strong>参数说明</strong></p><ul><li><code>-p</code>: 后面可以接提示信息<br>  <code>-t</code>: 后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</li></ul><p>实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">read name  # 读入name的值</span><br><span class="line">acwing yyy  # 标准输入</span><br><span class="line">echo $name  # 输出name的值</span><br><span class="line">acwing yyy  # 标准输出 </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;Please input your name: &quot; -t 5 name  # 读入name的值，等待时间5秒</span><br><span class="line">  # -t 和 -p 的顺序不影响实际效果</span><br><span class="line">Please input your name: acwing yyy  # 标准输入</span><br><span class="line">echo $name  # 输出name的值</span><br><span class="line">acwing yyy  # 标准输出</span><br></pre></td></tr></table></figure><hr><h3 id="8-echo命令"><a href="#8-echo命令" class="headerlink" title="(8) echo命令"></a>(8) echo命令</h3><p><strong><code>echo</code> 输出变量</strong>时需要加上<code>$</code>, 输出常量时不要加<code>$</code>.</p><p><strong><code>echo</code>用于输出字符串</strong>。命令格式：<code>echo STRING</code></p><p>ps: 查看命令用法<code>help commond</code>, eg.<code>help echo</code></p><p><strong>显示普通字符串</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello AC Terminal&quot;</span><br><span class="line">echo Hello AC Terminal  # 引号可以省略</span><br></pre></td></tr></table></figure><p><strong>显示转义字符</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;\&quot;Hello AC Terminal\&quot;&quot;  # 注意只能使用双引号，如果使用单引号，则不转义</span><br><span class="line">echo \&quot;Hello AC Terminal\&quot;  # 也可以省略双引号</span><br></pre></td></tr></table></figure><p><strong>显示变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=yyy</span><br><span class="line">echo &quot;My name is $name&quot;  # 输出 My name is yyy</span><br></pre></td></tr></table></figure><p><strong>显示换行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hi\n&quot;  # -e 开启转义</span><br><span class="line">echo &quot;acwing&quot;</span><br><span class="line">输出结果：</span><br><span class="line">Hi</span><br><span class="line"></span><br><span class="line">acwing</span><br></pre></td></tr></table></figure><p><strong>显示不换行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hi \c&quot; # -e 开启转义 \c 不换行</span><br><span class="line">echo &quot;acwing&quot;</span><br><span class="line">输出结果：</span><br><span class="line">Hi acwing</span><br></pre></td></tr></table></figure><p><strong>显示结果定向至文件</strong></p><p><code>echo &quot;Hello World&quot; &gt; output.txt  # 将内容以覆盖的方式输出到output.txt中</code></p><p><strong>原样输出字符串，不进行转义或取变量(用单引号)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=acwing</span><br><span class="line">echo &#x27;$name\&quot;&#x27;</span><br><span class="line">输出结果:</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">name\&quot;</span></span><br></pre></td></tr></table></figure><p><strong>显示命令的执行结果</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo `date`</span><br><span class="line">输出结果：</span><br><span class="line"></span><br><span class="line">Wed Sep 1 11:45:33 CST 2021</span><br></pre></td></tr></table></figure><hr><h3 id="9-printf命令"><a href="#9-printf命令" class="headerlink" title="(9) printf命令"></a>(9) printf命令</h3><p><strong>printf命令用于格式化输出</strong>，类似于C/C++中的printf函数。</p><p><u>默认不会在字符串末尾添加换行符。</u></p><p><strong>命令格式：</strong></p><p><code>printf format-string [arguments...]</code></p><p><strong>用法示例</strong><br>脚本文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%10d.\n&quot; 123  # 占10位，右对齐</span><br><span class="line">printf &quot;%-10.2f.\n&quot; 123.123321  # 占10位，保留2位小数（不完全的四舍五入），左对齐</span><br><span class="line">printf &quot;My name is %s\n&quot; &quot;yyy&quot;  # 格式化输出字符串</span><br><span class="line">printf &quot;%d * %d = %d\n&quot;  2 3 `expr 2 \* 3` # 表达式的值作为参数</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   123.</span><br><span class="line">   123.12    .</span><br><span class="line">My name is yyy</span><br><span class="line">2 * 3 = 6</span><br></pre></td></tr></table></figure><hr><h3 id="10-test命令与判断符号"><a href="#10-test命令与判断符号" class="headerlink" title="(10) test命令与判断符号[]"></a>(10) test命令与判断符号[]</h3><p><strong>短路原则</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A | B</span><br><span class="line">A非0非空，直接返回A,不计算B</span><br><span class="line">A为0，返回B</span><br><span class="line"></span><br><span class="line">A &amp; B    </span><br><span class="line">A，B有0或空， 就是0</span><br><span class="line">A非0，返回A, 忽略B (短路原则)</span><br></pre></td></tr></table></figure><p><strong>逻辑运算符<code>&amp;&amp;</code>和<code>||</code></strong></p><ul><li><p><code>&amp;&amp;</code> 表示与，<code>|| </code>表示或</p></li><li><p>二者具有短路原则：</p><p>  <code>expr1 &amp;&amp; expr2</code>：当<code>expr1</code>为假时，直接忽略<code>expr2</code></p><p>  <code>expr1 || expr2</code>：当<code>expr1</code>为真时，直接忽略<code>expr2</code></p></li><li><p>表达式的<code>exit code</code><strong>为0，表示真</strong>；为非零，表示假。（与<code>C/C++</code>中的定义相反）</p></li></ul><p><strong><code>test</code>命令</strong><br>在命令行中输入<code>help test</code>，可以查看<code>test</code>命令的用法。</p><p><strong><code>test</code>命令用于判断文件类型，以及对变量做比较。</strong></p><p><strong><code>test</code>命令用<code>exit code</code>返回结果</strong>，而不是使用<code>stdout</code>。<strong>0表示真</strong>，非0表示假。</p><p><code>if</code>也是返回真的时候可以执行。<code>exit code</code>为0表示真，所以可以执行。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test 2 -lt 3  # 为真，返回值为0</span><br><span class="line">echo $?  # 输出上个命令的返回值，输出0</span><br><span class="line">ls  # 列出当前目录下的所有文件</span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line"></span><br><span class="line">test -e test.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">exist  # test.sh 文件存在</span><br><span class="line">test -e test2.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">Not exist  # testh2.sh 文件不存在</span><br></pre></td></tr></table></figure><p><strong>文件类型判断</strong></p><p>命令格式：</p><p><code>test -e filename  # 判断文件是否存在</code></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-e</td><td>文件是否存在</td></tr><tr><td>-f</td><td>是否为文件</td></tr><tr><td>-d</td><td>是否为目录</td></tr></tbody></table><p><strong>文件权限判断</strong></p><p>命令格式：</p><p><code>test -r filename  # 判断文件是否可读</code></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-r</td><td>文件是否可读</td></tr><tr><td>-w</td><td>文件是否可写</td></tr><tr><td>-x</td><td>文件是否可执行</td></tr><tr><td>-s</td><td>是否为非空文件</td></tr></tbody></table><p><strong>整数间的比较</strong></p><p>命令格式：</p><p><code>test $a -eq $b  # a是否等于b</code></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-eq</td><td>a是否等于b</td></tr><tr><td>-ne</td><td>a是否不等于b</td></tr><tr><td>-gt</td><td>a是否大于b</td></tr><tr><td>-lt</td><td>a是否小于b</td></tr><tr><td>-ge</td><td>a是否大于等于b</td></tr><tr><td>-le</td><td>a是否小于等于b</td></tr></tbody></table><p><strong>字符串比较</strong></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>test <strong>-z</strong> STRING</td><td>判断STRING<strong>是否为空</strong>，如果为空，则返回true</td></tr><tr><td>test <strong>-n</strong> STRING</td><td>判断STRING<strong>是否非空</strong>，如果非空，则返回true（-n可以省略）</td></tr><tr><td>test str1 == str2</td><td>判断str1是否<strong>等于</strong>str2</td></tr><tr><td>test str1 != str2</td><td>判断str1是否不<strong>等于</strong>str2</td></tr></tbody></table><p>​    </p><p><strong>多重条件判定</strong></p><p>命令格式：</p><p><code>test -r filename -a -x filename</code></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-a</td><td>两条件<strong>是否同时成立</strong></td></tr><tr><td>-o</td><td>两条件<strong>是否至少一个成立</strong></td></tr><tr><td>!</td><td><strong>取反</strong>。如 test ! -x file，当file不可执行时，返回true</td></tr></tbody></table><p>​<br><strong>判断符号[]</strong><br><code>[]</code>与<code>test</code>用法几乎一模一样，更常用于<code>if</code>语句中。另外<code>[[]]</code>是<code>[]</code>的加强版，支持的特性更多。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ 2 -lt 3 ]  # 为真，返回值为0</span><br><span class="line">echo $?  # 输出上个命令的返回值，输出0</span><br><span class="line"></span><br><span class="line">ls  # 列出当前目录下的所有文件</span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line">[ -e test.sh ] &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">exist  # test.sh 文件存在</span><br><span class="line">[ -e test2.sh ] &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">Not exist  # test2.sh 文件不存在</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>[]</code>内的<strong>每一项都要用空格隔开</strong></li><li>中括号内的<strong>变量，最好用双引号括起来</strong></li><li>中括号内的<strong>常数，最好用单或双引号括起来</strong></li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;acwing yyy&quot;</span><br><span class="line">[ $name == &quot;acwing yyy&quot; ]  # 错误，等价于 [ acwing yxc == &quot;acwing yyy&quot; ]，参数太多</span><br><span class="line">[ &quot;$name&quot; == &quot;acwing yyy&quot; ]  # 正确</span><br></pre></td></tr></table></figure><hr><h3 id="11-判断语句"><a href="#11-判断语句" class="headerlink" title="(11) 判断语句"></a>(11) 判断语句</h3><p><strong>if…then形式</strong><br>类似于<code>C/C++</code>中的<code>if-else</code>语句。</p><p>ps: 当条件<code>condition</code>的<code>exit code</code>退出状态为0，表示为真时才会执行<code>then</code>后边的语句</p><hr><p><strong>单层if</strong><br>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">if [ &quot;$a&quot; -lt &quot;$b&quot; ] &amp;&amp; [ &quot;$a&quot; -gt 2 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;在范围内</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>3在范围内</code></p><hr><p><strong>单层if-else</strong><br>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">else</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">if ! [ &quot;$a&quot; -lt &quot;$b&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;不小于$&#123;b&#125;</span><br><span class="line">else</span><br><span class="line">    echo $&#123;a&#125;小于$&#123;b&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>3小于4</code></p><hr><p><strong>多层if-elif-elif-else</strong><br>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">elif condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">elif condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">else</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line">if [ $a -eq 1 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于1</span><br><span class="line">elif [ $a -eq 2 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于2</span><br><span class="line">elif [ $a -eq 3 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;等于3</span><br><span class="line">else</span><br><span class="line">    echo 其他</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>其他</code></p><hr><p><strong>case…esac形式</strong><br>类似于<code>C/C++</code>中的<code>switch</code>语句。</p><p>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case $变量名称 in</span><br><span class="line">    值1)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;  # 类似于C/C++中的break</span><br><span class="line">    值2)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">    *)  # 类似于C/C++中的default</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line">case $a in</span><br><span class="line">    1)</span><br><span class="line">        echo $&#123;a&#125;等于1</span><br><span class="line">        ;;  </span><br><span class="line">    2)</span><br><span class="line">        echo $&#123;a&#125;等于2</span><br><span class="line">        ;;  </span><br><span class="line">    3)                                                </span><br><span class="line">        echo $&#123;a&#125;等于3</span><br><span class="line">        ;;  </span><br><span class="line">    *)</span><br><span class="line">        echo 其他</span><br><span class="line">        ;;  </span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>其他</code></p><hr><h3 id="12-循环语句"><a href="#12-循环语句" class="headerlink" title="(12) 循环语句"></a>(12) 循环语句</h3><p><strong>for…in…do…done</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for var in val1 val2 val3</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例1，输出a 2 cc，<strong>每个元素一行</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in a 2 cc</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例2，输出当前路径下的所有文件名，<strong>每个文件名一行</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for file in `ls`</span><br><span class="line">do</span><br><span class="line">    echo $file</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例3，输出1-10</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in $(seq 1 10)  # seq只支持数字遍历，可产生左闭右闭的区间的所有整数</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例4，<strong>使用{1..10} 或者 {a..z}</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;a..z&#125;</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p><strong>for ((…;…;…)) do…done</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for ((expression; condition; expression))</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，输出1-10，每个数占一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1; i&lt;=10; i++))</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p><strong>while…do…done循环</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，文件结束符为<code>ctrl+d</code>，输入文件结束符后<code>read</code>指令返回false。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while read name</span><br><span class="line">do</span><br><span class="line">    echo $name</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p><strong>until…do…done循环</strong><br><strong>当条件为真时结束。</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，当用户输入yes或者YES时结束，否则一直等待读入。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ &quot;$&#123;word&#125;&quot; == &quot;yes&quot; ] || [ &quot;$&#123;word&#125;&quot; == &quot;YES&quot; ]</span><br><span class="line">do</span><br><span class="line">    read -p &quot;Please input yes/YES to stop this program: &quot; word</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p><strong>break命令</strong><br><u>跳出当前一层循环</u>，<strong>注意与C/C++不同的是：break不能跳出case语句</strong>。</p><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">while read name</span><br><span class="line">do</span><br><span class="line">    for ((i=1;i&lt;=10;i++))</span><br><span class="line">    do</span><br><span class="line">        case $i in</span><br><span class="line">            8)</span><br><span class="line">                break</span><br><span class="line">                ;;</span><br><span class="line">            *)</span><br><span class="line">                echo $i</span><br><span class="line">                ;;</span><br><span class="line">        esac</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>该示例每读入非EOF的字符串，会输出一遍1-7。<br>该程序可以输入<code>ctrl+d</code>文件结束符来结束，也可以直接用<code>ctrl+c</code>杀掉该进程。</p><hr><p><code>continue命令</code><br>跳出当前循环。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1;i&lt;=10;i++))</span><br><span class="line">do</span><br><span class="line">    if [ `expr $i % 2` -eq 0 ]</span><br><span class="line">    then</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>该程序输出1-10中的所有奇数。</p><hr><p><strong>死循环的处理方式</strong><br>如果<code>AC Terminal</code>可以打开该程序，则输入<code>ctrl+c</code>即可。</p><p>否则可以直接关闭进程：</p><ul><li>使用<code>top</code>命令找到进程的PID（按q可以退出）,  <code>ps aux</code>可查看当前所有的进程</li><li>输入<code>kill -9 PID</code>即可关掉此进程</li></ul><hr><h3 id="13-函数"><a href="#13-函数" class="headerlink" title="(13) 函数"></a>(13) 函数</h3><p><code>bash</code>中的函数类似于<code>C/C++</code>中的函数，但return的返回值与C/C++不同，<strong>返回的是exit code，取值为0-255</strong>，<strong>0表示正常结束。</strong></p><p>如果想获取函数的输出结果，可以通过<code>echo</code>输出到<code>stdout</code>中，然后通过<code>$(function_name)</code>来获取<code>stdout</code>中的结果。</p><p><strong>函数的<code>return值</code>可以通过<code>$?</code>来获取。</strong></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[function] func_name() &#123;  # function关键字可以省略</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>不获取 return值和 stdout值</strong><br>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;</span><br><span class="line">    name=yyy</span><br><span class="line">    echo &quot;Hello $name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>Hello yyy</code></p><hr><p><strong>获取 return值和stdout值</strong><br>不写<code>return</code>时，默认<code>return 0</code>。</p><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;</span><br><span class="line">    name=yyy</span><br><span class="line">    echo &quot;Hello $name&quot;</span><br><span class="line"></span><br><span class="line">    return 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output=$(func)</span><br><span class="line">ret=$?</span><br><span class="line"></span><br><span class="line">echo &quot;output = $output&quot;</span><br><span class="line">echo &quot;return = $ret&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>output = Hello yyy</code><br><code>return = 123</code></p><hr><p><strong>函数的输入参数</strong><br>在函数内，<code>$1</code>表示第一个输入参数，<code>$2</code>表示第二个输入参数，依此类推。</p><p>注意：<strong>函数内的<code>$0</code>仍然是文件名</strong>，而不是函数名。</p><p>ps: <code>$()</code>会读取函数的<code>stdout</code>，而不会直接输出来，导致屏幕上没输出</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;  # 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span><br><span class="line">    word=&quot;&quot;</span><br><span class="line">    while [ &quot;$&#123;word&#125;&quot; != &#x27;y&#x27; ] &amp;&amp; [ &quot;$&#123;word&#125;&quot; != &#x27;n&#x27; ]</span><br><span class="line">    do</span><br><span class="line">        read -p &quot;要进入func($1)函数吗？请输入y/n：&quot; word</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    if [ &quot;$word&quot; == &#x27;n&#x27; ]</span><br><span class="line">    then</span><br><span class="line">        echo 0</span><br><span class="line">        return 0</span><br><span class="line">    fi  </span><br><span class="line">    </span><br><span class="line">    if [ $1 -le 0 ] </span><br><span class="line">    then</span><br><span class="line">        echo 0</span><br><span class="line">        return 0</span><br><span class="line">    fi  </span><br><span class="line">    </span><br><span class="line">    sum=$(func $(expr $1 - 1))</span><br><span class="line">    echo $(expr $sum + $1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo $(func 10)</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>55</code></p><hr><p><strong>函数内的局部变量</strong><br>可以在函数内定义局部变量，作用范围仅在当前函数内。</p><p>可以在递归函数中定义局部变量。</p><p>命令格式：</p><p><code>local 变量名=变量值</code><br>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">func() &#123;</span><br><span class="line">    local name=yyy</span><br><span class="line">    echo $name</span><br><span class="line">&#125;</span><br><span class="line">func</span><br><span class="line"></span><br><span class="line">echo $name</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>yyy</code></p><p>第一行为函数内的name变量，<strong>第二行为函数外调用name变量</strong>，会发现此时该变量不存在。</p><hr><h3 id="14-exit命令"><a href="#14-exit命令" class="headerlink" title="(14) exit命令"></a>(14) exit命令</h3><p><strong>使用exit会结束整个shell脚本</strong></p><p><code>exit</code>命令用来退出当前<code>shell</code>进程，并返回一个退出状态；使用<code>$?</code>可以接收这个退出状态。</p><p><code>exit</code>命令可以接受一个整数值作为参数，代表退出状态。<strong>如果不指定，默认状态值是 0</strong>。</p><p><code>exit</code>退出状态只能是一个介于 <strong>0~255 之间的整数</strong>，其中<strong>只有 0 表示成功</strong>，其它值都表示失败。</p><p>示例：</p><p>创建脚本<code>test.sh</code>，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $# -ne 1 ]  # 如果传入参数个数等于1，则正常退出；否则非正常退出。</span><br><span class="line">then</span><br><span class="line">    echo &quot;arguments not valid&quot;</span><br><span class="line">    exit 1</span><br><span class="line">else</span><br><span class="line">    echo &quot;arguments valid&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行该脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh </span><br><span class="line">./test.sh acwing</span><br><span class="line">arguments valid</span><br><span class="line"></span><br><span class="line">echo $?  # 传入一个参数，则正常退出，exit code为0</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">./test.sh </span><br><span class="line">arguments not valid</span><br><span class="line">echo $?  # 传入参数个数不是1，则非正常退出，exit code为1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><hr><h3 id="15-文件重定向"><a href="#15-文件重定向" class="headerlink" title="(15) 文件重定向"></a>(15) 文件重定向</h3><p>每个进程默认打开3个文件描述符：</p><ul><li><p><code>stdin</code>标准输入，从命令行读取数据，文件描述符为0</p></li><li><p><code>stdout</code>标准输出，向命令行输出数据，文件描述符为1</p></li><li><p><code>stderr</code>标准错误输出，向命令行输出数据，文件描述符为2</p></li></ul><p>可以用文件重定向将这三个文件重定向到其他文件中。</p><hr><p><strong>重定向命令列表</strong></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>command &gt; file</code></td><td>将<code>stdout</code>重定向到<code>file</code>中</td></tr><tr><td><code>command &lt; file</code></td><td>将<code>stdin</code>重定向到<code>file</code>中</td></tr><tr><td><code>command &gt;&gt; file</code></td><td>将<code>stdout</code>以<strong>追加方式</strong>重定向到<code>file</code>中</td></tr><tr><td><code>command n&gt; file</code></td><td>将文件描述符<code>n</code>重定向到<code>file</code>中</td></tr><tr><td><code>command n&gt;&gt; file</code></td><td>将文件描述符<code>n</code>以追加方式重定向到<code>file</code>中</td></tr></tbody></table><hr><p><strong>输入和输出重定向</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hello \c&quot; &gt; output.txt  # 将stdout重定向到output.txt中</span><br><span class="line">echo &quot;World&quot; &gt;&gt; output.txt  # 将字符串追加到output.txt中</span><br><span class="line"></span><br><span class="line">read str &lt; output.txt  # 从output.txt中读取字符串</span><br><span class="line"></span><br><span class="line">echo $str  # 输出结果：Hello World</span><br></pre></td></tr></table></figure><hr><p><strong>同时重定向stdin和stdout</strong><br>创建bash脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line"></span><br><span class="line">read a</span><br><span class="line">read b</span><br><span class="line"></span><br><span class="line">echo $(expr &quot;$a&quot; + &quot;$b&quot;)</span><br></pre></td></tr></table></figure><p>创建input.txt，里面的内容为：</p><p>3<br>4</p><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh  # 添加可执行权限</span><br><span class="line">./test.sh &lt; input.txt &gt; output.txt  # 从input.txt中读取内容，将输出写入output.txt中</span><br><span class="line">cat output.txt  # 查看output.txt中的内容</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p>ps: (补充内容)<br>1.<code>ls -l &gt;文件 </code>（列表的内容写入文件a.txt中 覆盖写）</p><p>2.<code>ls -al &gt;&gt;文件</code> （列表的内容文件追加到文件aa.txt的末尾）</p><p>3.<code>cat 文件1 &gt;文件2</code> （将文件1的内容覆盖到文件2）</p><p>4.<code>echo “内容” &gt;&gt;文件</code> (将echo的内容追加到文件末尾)</p><hr><h3 id="16-引入外部脚本"><a href="#16-引入外部脚本" class="headerlink" title="(16) 引入外部脚本"></a>(16) 引入外部脚本</h3><p>类似于<code>C/C++</code>中的<code>include</code>操作，**<code>bash</code>也可以引入其他文件中的代码**。</p><p>语法格式：</p><p><code>. filename </code>  注意点和文件名之间有一个空格</p><p><code>source filename</code>  这里<strong>会将filename执行一遍</strong></p><p>示例<br>创建<code>test1.sh</code>，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">name=yyy  # 定义变量name</span><br></pre></td></tr></table></figure><p>然后创建test2.sh，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">source test1.sh # 或 . test1.sh</span><br><span class="line"></span><br><span class="line">echo My name is: $name  # 可以使用test1.sh中的变量</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test2.sh </span><br><span class="line">./test2.sh </span><br><span class="line">My name is: yyy</span><br></pre></td></tr></table></figure><p>ps:</p><p><code>ll</code>等价于<code>ls -a</code>查看隐藏文件</p><hr><h2 id="2-创建作业-amp-测试作业的正确性"><a href="#2-创建作业-amp-测试作业的正确性" class="headerlink" title="2.创建作业 &amp; 测试作业的正确性"></a>2.创建作业 &amp; 测试作业的正确性</h2><pre><code>homework 3 create 可以重新创建所有lesson_3的作业homework 3 create id 可以单独创建lesson_3的第id个作业.e.g.homework 3 create 0 可以只重新创建lesson_3的第0个作业homework 3 test 可以评测lesson_3的所有作业</code></pre><hr><h2 id="3-章节作业"><a href="#3-章节作业" class="headerlink" title="3.章节作业"></a>3.章节作业</h2><p>创建好作业后，先进入文件夹<code>/home/acs/homework/lesson_3/</code>，然后：</p><h3 id="homework-0"><a href="#homework-0" class="headerlink" title="homework_0:"></a>homework_0:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(0) 进入homework_0文件夹，编写自动完成lesson_1作业的脚本helper.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含helper.sh</span><br><span class="line">    [2] helper.sh具有可执行权限</span><br><span class="line">    [3] 在任意路径依次执行下列命令后，lesson_1的作业可以得到满分：</span><br><span class="line">        1) homework 1 create</span><br><span class="line">        2) /home/acs/homework/lesson_3/homework_0/helper.sh</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-0"><a href="#作业笔记：homework-0" class="headerlink" title="作业笔记：homework_0"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6296012/">homework_0</a></h4><hr><h3 id="homework-1"><a href="#homework-1" class="headerlink" title="homework_1:"></a>homework_1:</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(1) 进入homework_1文件夹，编写脚本check_file.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含check_file.sh。</span><br><span class="line">    [2] check_file.sh具有可执行权限。</span><br><span class="line">    [3] check_file.sh接收一个传入参数。格式为 ./check_file.sh file</span><br><span class="line">    [4] 判断传递参数，分别在标准输出中输出如下内容（不包括双引号）：</span><br><span class="line">    1) 如果传入参数个数不是1，则输出一行：&quot;arguments not valid&quot;，然后退出，退出状态等于1。</span><br><span class="line">    2) 如果file文件不存在，则输出一行：&quot;not exist&quot;，然后退出，退出状态等于2。</span><br><span class="line">    3) 如果file文件存在，则输出分别进行如下5个判断，然后退出，退出状态等于0。</span><br><span class="line">        1] 如果file为普通文件，则输出一行：&quot;regular file&quot;</span><br><span class="line">        2] 如果file为目录（文件夹），则输出一行：&quot;directory&quot;</span><br><span class="line">        3] 如果file具有可读权限，则输出一行：&quot;readable&quot;</span><br><span class="line">        4] 如果file具有可写权限，则输出一行：&quot;writable&quot;</span><br><span class="line">        5] 如果file具有可执行权限，则输出一行：&quot;executable&quot;</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-1"><a href="#作业笔记：homework-1" class="headerlink" title="作业笔记：homework_1"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6310307/">homework_1</a></h4><hr><h3 id="homework-2"><a href="#homework-2" class="headerlink" title="homework_2:"></a>homework_2:</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(2) 进入homework_2文件夹，编写脚本main.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含main.sh</span><br><span class="line">    [2] main.sh具有可执行权限</span><br><span class="line">    [3] 该文件从stdin(标准输入)中读取一个整数n</span><br><span class="line">    [4] 在stdout(标准输出)输出斐波那契数列的第n项。即：a[0] = 1, a[1] = 1, a[i] = a[i - 1] + a[i - 2], 求a[n]。</span><br><span class="line">    [5] 数据保证 0 &lt;= n &lt;= 20，脚本不需要判断n的合法性。</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-2"><a href="#作业笔记：homework-2" class="headerlink" title="作业笔记：homework_2"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6310364/">homework_2</a></h4><hr><h3 id="homework-3"><a href="#homework-3" class="headerlink" title="homework_3:"></a>homework_3:</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(3) 进入homework_3文件夹，编写脚本main.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含main.sh</span><br><span class="line">    [2] main.sh具有可执行权限</span><br><span class="line">    [3] 该文件从stdin(标准输入)中读取两行整数n和m</span><br><span class="line">    [4] 在stdout(标准输出)中输出1~n的按字典序从小到大的顺序数第m个全排列，输出一行，用空格隔开所有数，行末可以有多余空格。</span><br><span class="line">    [5] 数据保证 1 &lt;= n &lt;= 10, 1 &lt;= m &lt;= min(100, n!)，脚本不需要判断数据的合法性。</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-3"><a href="#作业笔记：homework-3" class="headerlink" title="作业笔记：homework_3"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6310370/">homework_3</a></h4><hr><h3 id="homework-4"><a href="#homework-4" class="headerlink" title="homework_4:"></a>homework_4:</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(4) 进入homework_4文件夹，编写脚本main.sh。要求：</span><br><span class="line">    [1] 当前目录下仅包含main.sh</span><br><span class="line">    [2] main.sh具有可执行权限</span><br><span class="line">    [3] main.sh接收两个传入参数。格式为 ./main.sh input_file output_file</span><br><span class="line">    [4] 从input_file中读取一个正整数n，然后将前n个正整数的平方和写入output_file中</span><br><span class="line">    [5] 数据保证 1 &lt;= n &lt;= 100，脚本不需要判断所有数据的合法性。</span><br></pre></td></tr></table></figure><h4 id="作业笔记：homework-4"><a href="#作业笔记：homework-4" class="headerlink" title="作业笔记：homework_4"></a>作业笔记：<a href="https://www.acwing.com/activity/content/code/content/6310385/">homework_4</a></h4><hr><h2 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4.参考资料"></a>4.参考资料</h2><p>讲义整理自Linux基础课讲义，及评论区的问答整理</p><p><a href="https://www.acwing.com/activity/content/57/">Linux基础课程-AcWing</a></p><p><a href="https://www.acwing.com/activity/content/57/">https://www.acwing.com/activity/content/57/</a>)</p><p>章节作业打卡笔记：</p><p><a href="https://www.acwing.com/activity/content/code/content/6296012/">homework_0</a>    <a href="https://www.acwing.com/activity/content/code/content/6310307/">homework_1</a>    <a href="https://www.acwing.com/activity/content/code/content/6310364/">homework_2</a><br><a href="https://www.acwing.com/activity/content/code/content/6310370/">homework_3</a>    <a href="https://www.acwing.com/activity/content/code/content/6310385/">homework_4</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux基础-第三讲-shell语法&quot;&gt;&lt;a href=&quot;#Linux基础-第三讲-shell语法&quot; class=&quot;headerlink&quot; title=&quot;Linux基础 第三讲 shell语法&quot;&gt;&lt;/a&gt;Linux基础 第三讲 shell语法&lt;/h2&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="Linux基础知识" scheme="https://ariesfun.gitee.io/categories/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Linux" scheme="https://ariesfun.gitee.io/tags/Linux/"/>
    
    <category term="shell语法" scheme="https://ariesfun.gitee.io/tags/shell%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>AcWing-周赛 第97场题解</title>
    <link href="https://ariesfun.gitee.io/posts/420.html"/>
    <id>https://ariesfun.gitee.io/posts/420.html</id>
    <published>2023-04-02T18:38:55.951Z</published>
    <updated>2023-04-02T18:39:22.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AcWing-周赛-第97场题解"><a href="#AcWing-周赛-第97场题解" class="headerlink" title="AcWing-周赛 第97场题解"></a>AcWing-周赛 第97场题解</h2><h3 id="T1-AcWing-4944-热身计算"><a href="#T1-AcWing-4944-热身计算" class="headerlink" title="T1: AcWing 4944. 热身计算"></a>T1: AcWing 4944. 热身计算</h3><p>给定两个正整数 a, b，请你分别计算 min(a,b) 以及 ⌊|a−b|/2⌋的值。⌊|a−b|/2⌋表示不大于 |a−b|/2的最大整数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含两个正整数 a,b。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，输出两个整数，分别表示 min(a,b)以及 ⌊|a−b|/2⌋。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>所有测试点满足 1 ≤ a, b ≤ 100。</p><h4 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h4><p>3  1</p><h4 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h4><p>1  1</p><h4 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h4><p>2  3</p><h4 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h4><p>2  0</p><h4 id="输入样例3"><a href="#输入样例3" class="headerlink" title="输入样例3"></a>输入样例3</h4><p>7  3</p><h4 id="输出样例3："><a href="#输出样例3：" class="headerlink" title="输出样例3："></a>输出样例3：</h4><p>3  2</p><hr><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">min</span>(a, b) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="built_in">abs</span>(a - b) / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="T2-AcWing-4945-比大小"><a href="#T2-AcWing-4945-比大小" class="headerlink" title="T2: AcWing 4945. 比大小"></a>T2: AcWing 4945. 比大小</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个 n 位 bx 进制数 X 和一个 m位 by进制数 Y。</p><p>X 和 Y 都为正整数，且都不含前导 0。</p><p>请你比较它们的大小。</p><h4 id="输入格式。"><a href="#输入格式。" class="headerlink" title="输入格式。"></a>输入格式。</h4><p>第一行包含两个整数 n, bx。</p><p>第二行包含 n 个整数 x1,x2,…,x，表示 X的各位数字，它们按照从最高有效位到最低有效位的顺序给出。</p><p>第三行包含两个整数 m,by。</p><p>第四行包含 m 个整数 y1,y2,…,y，表示 Y 的各位数字，它们按照从最高有效位到最低有效位的顺序给出。</p><p>X 和 Y 的各位数字在输入中均按十进制表示给出。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行：</p><ul><li><p>如果 X &lt; Y，则输出 <code>&lt;</code>。</p></li><li><p>如果 X &gt; Y，则输出 <code>&gt;</code>。</p></li><li><p>如果 X = Y，则输出 <code>=</code>。</p></li></ul><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 6 个测试点满足 2 ≤ bx, by ≤ 16。<br>所有测试点满足 1 ≤ n, m ≤ 1，2 ≤ bx, by ≤ 40，bx ≠ by，0 ≤ xi &lt; bx，0 ≤ yi&lt; by。</p><h4 id="输入样例1-1"><a href="#输入样例1-1" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">1 0 1 1 1 1</span><br><span class="line">2 10</span><br><span class="line">4 7</span><br></pre></td></tr></table></figure><h4 id="输出样例1-1"><a href="#输出样例1-1" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=</span><br></pre></td></tr></table></figure><h4 id="输入样例2-1"><a href="#输入样例2-1" class="headerlink" title="输入样例2"></a>输入样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 0 2</span><br><span class="line">2 5</span><br><span class="line">2 4</span><br></pre></td></tr></table></figure><h4 id="输出样例2-1"><a href="#输出样例2-1" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;</span><br></pre></td></tr></table></figure><h4 id="输入样例3-1"><a href="#输入样例3-1" class="headerlink" title="输入样例3"></a>输入样例3</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7 16</span><br><span class="line">15 15 4 0 0 7 10</span><br><span class="line">7 9</span><br><span class="line">4 8 0 3 1 5 0</span><br></pre></td></tr></table></figure><h4 id="输出样例3"><a href="#输出样例3" class="headerlink" title="输出样例3"></a>输出样例3</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p><strong>直接模拟，快速幂计算</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, bx, x, m, by, y;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; bx;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> X = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n --)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x; <span class="comment">// 共循读n次（n-1 ~ 0）</span></span><br><span class="line">        X += <span class="built_in">pow</span>(bx, n) * x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; m &gt;&gt; by;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> Y = <span class="number">0</span>; <span class="comment">// 最大到40^9级别（会爆int）</span></span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; y;</span><br><span class="line">        Y += <span class="built_in">pow</span>(by, m) * y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(X &lt; Y) <span class="built_in">puts</span>(<span class="string">&quot;&lt;&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; Y) <span class="built_in">puts</span>(<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>秦九韶算法，数学公式推导</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long LL;</span><br><span class="line"></span><br><span class="line">LL get()</span><br><span class="line">&#123;</span><br><span class="line">    int n, b;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; b;</span><br><span class="line">    LL res = 0;</span><br><span class="line">    while(n --) // n最大是10位</span><br><span class="line">    &#123;</span><br><span class="line">        int x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        res = res * b + x; // 秦九韶算法，数学公式推导</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    LL x = get();</span><br><span class="line">    LL y = get();</span><br><span class="line"></span><br><span class="line">    if(x &gt; y) puts(&quot;&gt;&quot;);</span><br><span class="line">    else if(x &lt; y) puts(&quot;&lt;&quot;);</span><br><span class="line">    else puts(&quot;=&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="T3-AcWing-4946-叶子节点"><a href="#T3-AcWing-4946-叶子节点" class="headerlink" title="T3: AcWing 4946. 叶子节点"></a>T3: AcWing 4946. 叶子节点</h3><p>给定一棵 n 个节点的树，节点编号 1 ∼ n。</p><p>1号节点为树的根节点。</p><p>每个节点要么是黑色的，要么是白色的。</p><p>对于一个叶子节点，如果从该节点到根节点的路径（包括两端节点）中有超过 m 个</p><p>黑色节点连续的排列在一起，则称该节点为无效叶子节点。</p><p>有效叶子节点数量 = 总叶子节点数量 - 无效叶子节点数量</p><p>请你统计，给定树中有效叶子节点的数量。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n, m。</p><p>第二行包含 n 个整数 a1, a2, …, an，其中 ai表示第 i 个节点的颜色，1 表示黑色，0 表示白色。</p><p>接下来 n−1 行，每行包含两个整数 x, y，表示节点 x 和节点 y 之间存在一条无向边。</p><p>保证输入给定的是一棵树。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，表示给定树中<strong>有效</strong>叶子节点的数量。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 66 个测试点满足 2 ≤ n ≤ 10。<br>所有测试点满足 2 ≤ n ≤ 10e5，1 ≤ m ≤ n，0 ≤ ai ≤ 1，1 ≤ x, y ≤ n，x ≠ y。</p><h4 id="输入样例1-2"><a href="#输入样例1-2" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 1</span><br><span class="line">1 1 0 0</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure><h4 id="输出样例1-2"><a href="#输出样例1-2" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="输入样例2-2"><a href="#输入样例2-2" class="headerlink" title="输入样例2"></a>输入样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7 1</span><br><span class="line">1 0 1 1 0 0 0</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">2 5</span><br><span class="line">3 6</span><br><span class="line">3 7</span><br></pre></td></tr></table></figure><h4 id="输出样例2-2"><a href="#输出样例2-2" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><hr><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">2</span> * N; <span class="comment">// 无向边，需存两次 10万范围O(N)或O（nlogn）</span></span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx; <span class="comment">// 定义邻接表</span></span><br><span class="line"><span class="type">int</span> c[N]; <span class="comment">// 存结点颜色</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">// 加边，头插法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa, <span class="type">int</span> cnt, <span class="type">bool</span> vaild)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c[u]) cnt ++;</span><br><span class="line">    <span class="keyword">else</span> cnt = <span class="number">0</span>; <span class="comment">// 不连续就清零</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt &gt; m) vaild = <span class="literal">false</span>; <span class="comment">// 无效叶子结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, sons = <span class="number">0</span>; <span class="comment">// 存子节点数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i]) <span class="comment">// 树的遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == fa) <span class="keyword">continue</span>; <span class="comment">// j是父结点，继续遍历</span></span><br><span class="line">        <span class="keyword">else</span> sons ++; <span class="comment">// 是子结点</span></span><br><span class="line">        <span class="comment">// j是当前结点, u是父结点</span></span><br><span class="line">        res += <span class="built_in">dfs</span>(j, u, cnt, vaild); <span class="comment">// 递归下一个节点，加上子树中满足有效子节点数量 </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!sons &amp;&amp; vaild) res ++; <span class="comment">// 若sons为0则代表没有子节点，即叶子节点</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]); <span class="comment">// 颜色数组c[]下标1开始读</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h); <span class="comment">// 初始化头结点,加&lt;cstring&gt;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a, b), <span class="built_in">add</span>(b, a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化dfs, 第4个参数表示该叶子结点是有效的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="literal">true</span>)); <span class="comment">// 树的深度优先遍历</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.acwing.com/video/4679/">题目讲解 - y总</a></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/8883176/">单链表题目</a></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/8854336/">类似题型 - 树的重心（树与图的深度优先遍历DFS）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;AcWing-周赛-第97场题解&quot;&gt;&lt;a href=&quot;#AcWing-周赛-第97场题解&quot; class=&quot;headerlink&quot; title=&quot;AcWing-周赛 第97场题解&quot;&gt;&lt;/a&gt;AcWing-周赛 第97场题解&lt;/h2&gt;&lt;h3 id=&quot;T1-AcWing</summary>
      
    
    
    
    <category term="AcWing周赛" scheme="https://ariesfun.gitee.io/categories/AcWing%E5%91%A8%E8%B5%9B/"/>
    
    
    <category term="C/C++" scheme="https://ariesfun.gitee.io/tags/C-C/"/>
    
    <category term="AcWing" scheme="https://ariesfun.gitee.io/tags/AcWing/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化 实践基础练习四（Pandas）</title>
    <link href="https://ariesfun.gitee.io/posts/341a.html"/>
    <id>https://ariesfun.gitee.io/posts/341a.html</id>
    <published>2023-04-01T12:08:48.513Z</published>
    <updated>2023-04-30T04:47:51.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分析与可视化-实践基础练习四-（Pandas）"><a href="#数据分析与可视化-实践基础练习四-（Pandas）" class="headerlink" title="数据分析与可视化 实践基础练习四 （Pandas）"></a>数据分析与可视化 实践基础练习四 （Pandas）</h2><hr><h3 id="一、本节需掌握的Pandas相关函数或属性"><a href="#一、本节需掌握的Pandas相关函数或属性" class="headerlink" title="一、本节需掌握的Pandas相关函数或属性"></a>一、本节需掌握的Pandas相关函数或属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Series和DataFrame数据类型的创建</span><br><span class="line"></span><br><span class="line"><span class="comment"># Series创建（可以是列表，标量值，字典，ndarray，其他函数），index是行索引</span></span><br><span class="line">pd.Series(data=<span class="literal">None</span>, index=<span class="literal">None</span>, dtype=<span class="literal">None</span>, name=<span class="literal">None</span>, copy=<span class="literal">False</span>, fastpath)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DataFrame创建（有行索引和列索引，其类型可以是列表，字典，元组或Series，n维的ndarray）</span></span><br><span class="line">eg. pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> Series的基本操作（类似ndarray，字典类型的操作）</span><br><span class="line">可通过自定义索引列表来切片，自定义索引访问，get()方法</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> DataFrame数据查找、增加、删除和修改</span><br><span class="line"></span><br><span class="line">d[ [<span class="string">&#x27;col_1&#x27;</span>,<span class="string">&#x27;col_2&#x27;</span>] ] <span class="comment"># 通过列索引或以属性的方式可单独或取DataFrame的列数据 </span></span><br><span class="line">d[<span class="number">0</span>:<span class="number">2</span>] <span class="comment"># 切片方式，取0到1行</span></span><br><span class="line"></span><br><span class="line">head(),tail() <span class="comment"># 获取连续的数据</span></span><br><span class="line">loc(),iloc() <span class="comment"># 一个是跟行/列索引名（或是条件查询）loc的切片方式是闭区间，一个是跟行/列索引下标</span></span><br><span class="line"></span><br><span class="line">append() <span class="comment"># 增加一行数据</span></span><br><span class="line">insert() <span class="comment"># 可插入新的一列数据</span></span><br><span class="line"></span><br><span class="line">drop() <span class="comment">#删除， ！！！稍微特殊：axis为1是按列删，0是按行删</span></span><br><span class="line">set_index() <span class="comment">#更换索引</span></span><br><span class="line"></span><br><span class="line">直接修改是对DataFrame数据修改</span><br><span class="line">replace() <span class="comment"># 对数据进行替换,以字典形式</span></span><br><span class="line">rename() <span class="comment"># 修改列名，需传入需要修改列名的字典</span></span><br><span class="line">eg. d.rename(colmus=&#123;<span class="string">&#x27;城市&#x27;</span>:<span class="string">&#x27;city&#x27;</span>&#125;),inplace=<span class="literal">True</span>) <span class="comment"># 将右值赋给左值，加上布尔值是否要替换</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> DataFrame索引重建reindex( )  </span><br><span class="line">.reindex(index=<span class="literal">None</span>, columns=<span class="literal">None</span>, fill_value...) <span class="comment">#可进行新的自定义索引，填充指定值</span></span><br></pre></td></tr></table></figure><hr><h3 id="二、实训案例"><a href="#二、实训案例" class="headerlink" title="二、实训案例"></a>二、实训案例</h3><h4 id="1-Pokemon宠物小精灵数据初步探索。"><a href="#1-Pokemon宠物小精灵数据初步探索。" class="headerlink" title="1. Pokemon宠物小精灵数据初步探索。"></a>1. Pokemon宠物小精灵数据初步探索。</h4><p><a href="https://pan.baidu.com/s/1T6mHGFvxg6W7RRX3JMq-Mg?pwd=2023">Pokemon数据集下载</a></p><p>案例中使用宠物小精灵的相关数据进行分析，其中各列的列名意义为：</p><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011253221.jpg" alt="img-202304011253221"></p><p>·    name：宠物小精灵的名称</p><p>·    Type 1：宠物小精灵的第一类型    Type 2：宠物小精灵的第二类型</p><p>·    Total：综合能力（生命点数、攻击强度、防御强度、特殊攻击强度、特殊防御强度和速度的总和）</p><p>·    HP：生命点数</p><p>·    Attack：攻击强度          Defense：防御强度</p><p>·    Sp.Atk：特殊攻击强度        Sp.Def：特殊防御强度</p><p>·    Speed：速度            Generation：世代数</p><p>·    Lengendary：True表示为传奇小精灵，False表示非传奇小精灵</p><hr><h4 id="2-结合数据集完成以下相关操作。"><a href="#2-结合数据集完成以下相关操作。" class="headerlink" title="2. 结合数据集完成以下相关操作。"></a>2. 结合数据集完成以下相关操作。</h4><p>（1）读取Pokemon.csv文件；</p><p>（2）展示数据前10行；</p><p>（3）删除名为“#”的列；</p><p>（4）将各列名改为中文, 参数inplace设置替换原数据；</p><p>（5）分别查看数据表的行、列索引；</p><p>（6）查看第一类型的唯一值；</p><p>（7）查看行标签为2、4小精灵的名称和综合能力；</p><p>（8）查看行标签为5到10小精灵的名称和综合能力；</p><p>（9）通过切片方式查看前6个小精灵的数据；</p><p>（10）查看攻击强度大于160的小精灵的所有数据；</p><p>（11）查看传奇小精灵的数据，只展示前十行数据；</p><p>（12）创建新列“能力600”，插入到综合能力一列的后面，该列显示综合能力大于等于600的为True，小于600为False；</p><p>（13）创建新列“世代456”，插入到最后一列，该列显示世代数为4、5和6的小精灵为True, 其他为False，随机选取10行数据进行展示。</p><hr><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （1）读取Pokemon.csv文件；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">d = pd.read_csv(<span class="string">&#x27;Pokemon.csv&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>) <span class="comment"># 读取文件</span></span><br><span class="line">d.head() <span class="comment"># 默认输出前5行数据</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011925325.jpg" alt="001"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （2）展示数据前10行；</span></span><br><span class="line"></span><br><span class="line">d.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011925442.jpg" alt="002"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （3）删除名为“#”的列；</span></span><br><span class="line"></span><br><span class="line">d.drop(<span class="string">&#x27;#&#x27;</span>, axis = <span class="number">1</span>, inplace = <span class="literal">True</span>) <span class="comment"># 确认替换原数据</span></span><br><span class="line">d.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011925979.jpg" alt="003"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （4）将各列名改为中文, 参数inplace设置替换原数据；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入字典类型值</span></span><br><span class="line">d.rename(columns=&#123;<span class="string">&#x27;Name&#x27;</span>:<span class="string">&#x27;名称&#x27;</span>, <span class="string">&#x27;Type 1&#x27;</span>:<span class="string">&#x27;第一类型&#x27;</span>, <span class="string">&#x27;Type 2&#x27;</span>:<span class="string">&#x27;第一类型&#x27;</span>, <span class="string">&#x27;Total&#x27;</span>:<span class="string">&#x27;综合能力&#x27;</span>, <span class="string">&#x27;HP&#x27;</span>:<span class="string">&#x27;生命点数&#x27;</span>, <span class="string">&#x27;Attack&#x27;</span>:<span class="string">&#x27;攻击强度&#x27;</span>, <span class="string">&#x27;Defense&#x27;</span>:<span class="string">&#x27;防御强度&#x27;</span>, <span class="string">&#x27;Sp.Atk&#x27;</span>:<span class="string">&#x27;特殊攻击强度&#x27;</span>, <span class="string">&#x27;Sp.Def&#x27;</span>:<span class="string">&#x27;特殊攻击强度&#x27;</span>, <span class="string">&#x27;Speed&#x27;</span>:<span class="string">&#x27;速度&#x27;</span>, <span class="string">&#x27;Generation&#x27;</span>:<span class="string">&#x27;世代数&#x27;</span>, <span class="string">&#x27;Legendary&#x27;</span>:<span class="string">&#x27;传奇小精灵&#x27;</span>, &#125;, inplace = <span class="literal">True</span>)</span><br><span class="line">d.head()</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011926259.jpg" alt="004"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （5）分别查看数据表的行、列索引；</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(d.index) <span class="comment"># 共800行</span></span><br><span class="line"><span class="built_in">list</span>(d.columns) <span class="comment"># 输出列索引</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;名称&#x27;,</span><br><span class="line">    &#x27;第一类型&#x27;,</span><br><span class="line">    &#x27;第一类型&#x27;,</span><br><span class="line">    &#x27;综合能力&#x27;,</span><br><span class="line">    &#x27;生命点数&#x27;,</span><br><span class="line">    &#x27;攻击强度&#x27;,</span><br><span class="line">    &#x27;防御强度&#x27;,</span><br><span class="line">    &#x27;Sp. Atk&#x27;,</span><br><span class="line">    &#x27;Sp. Def&#x27;,</span><br><span class="line">    &#x27;速度&#x27;,</span><br><span class="line">    &#x27;世代数&#x27;,</span><br><span class="line">    &#x27;传奇小精灵&#x27;]</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （6）查看第一类型的唯一值；</span></span><br><span class="line"></span><br><span class="line">d[<span class="string">&#x27;第一类型&#x27;</span>].nunique() </span><br><span class="line"><span class="comment"># nunique统计去重后元素的个数（过滤掉nan，但会统计空字符串）</span></span><br><span class="line"><span class="comment"># unique统计去重后所有元素（包含nan以及空字符串）</span></span><br><span class="line"><span class="comment"># value_counts()是Series拥有的方法，一般在DataFrame中使用时，需要指定对哪一列或行</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一类型    18</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （7）查看行标签为2、4小精灵的名称和综合能力；</span></span><br><span class="line"></span><br><span class="line">d.loc[ [<span class="number">2</span>, <span class="number">4</span>], [<span class="string">&#x27;名称&#x27;</span>, <span class="string">&#x27;综合能力&#x27;</span>] ]</span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011927577.jpg" alt="007" style="zoom: 67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （8）查看行标签为5到10小精灵的名称和综合能力；</span></span><br><span class="line"></span><br><span class="line">d.iloc[ <span class="number">5</span>:<span class="number">11</span>, [<span class="number">0</span>, <span class="number">3</span>] ] <span class="comment"># 名称和综合能力分别在第0列和第3列</span></span><br></pre></td></tr></table></figure><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011927045.jpg" alt="008" style="zoom:67%;" /><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （9）通过切片方式查看前6个小精灵的数据；</span></span><br><span class="line"></span><br><span class="line">d.loc[<span class="number">0</span>:<span class="number">5</span>] <span class="comment"># 索引值是闭区间</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011928939.jpg" alt="009"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （10）查看攻击强度大于160的小精灵的所有数据；</span></span><br><span class="line"></span><br><span class="line">d.loc[d[<span class="string">&#x27;攻击强度&#x27;</span>] &gt; <span class="number">160</span>] <span class="comment"># 条件查询，返回结果为True的那些行</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011928156.jpg" alt="010"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  （11）查看传奇小精灵的数据，只展示前十行数据；</span></span><br><span class="line"></span><br><span class="line">d1 = d.loc[d[<span class="string">&#x27;传奇小精灵&#x27;</span>] == <span class="literal">True</span>]</span><br><span class="line">d1.head(<span class="number">10</span>) <span class="comment"># 或者 d[d[&#x27;传奇小精灵&#x27;] == True].head(10)</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011929780.jpg" alt="011"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （12）创建新列“能力600”，插入到综合能力一列的后面，该列显示综合能力大于等于600的为True，小于600为False；</span></span><br><span class="line"></span><br><span class="line">col_new = <span class="string">&#x27;能力600&#x27;</span></span><br><span class="line">d.insert(<span class="number">4</span>, col_new, d[<span class="string">&#x27;综合能力&#x27;</span>] &gt; <span class="number">600</span>) <span class="comment"># insert()用于插入列（参数跟插入列后的位置，列索引名，插入的值）</span></span><br><span class="line">d</span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011932776.jpg" alt="012"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （13）创建新列“世代456”，插入到最后一列，该列显示世代数为4、5和6的小精灵为True, 其他为False，随机选取10行数据进行展示。</span></span><br><span class="line"></span><br><span class="line">col_new1 = <span class="string">&#x27;世代456&#x27;</span></span><br><span class="line">d.insert(<span class="number">13</span>, col_new1, d[<span class="string">&#x27;世代数&#x27;</span>].isin([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]) ) <span class="comment"># 最后一列的下标是12, isin()接受一个列表，来判断该列中元素是否在列表中</span></span><br><span class="line">d.sample(<span class="number">10</span>) <span class="comment"># sample()用于从DataFrame中随机选择行或列</span></span><br></pre></td></tr></table></figure><p><img src="https://imgbed-funblog.oss-cn-chengdu.aliyuncs.com/img/202304011929160.jpg" alt="013"></p><hr><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p><a href="https://pan.baidu.com/s/1T6mHGFvxg6W7RRX3JMq-Mg?pwd=2023">Pokemon数据集</a></p><p><a href="https://blog.csdn.net/m0_49705298/article/details/119142523">Pandas统计函数count，unique，nunique的区别</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分析与可视化-实践基础练习四-（Pandas）&quot;&gt;&lt;a href=&quot;#数据分析与可视化-实践基础练习四-（Pandas）&quot; class=&quot;headerlink&quot; title=&quot;数据分析与可视化 实践基础练习四 （Pandas）&quot;&gt;&lt;/a&gt;数据分析与可视化 实践</summary>
      
    
    
    
    <category term="数据分析与可视化" scheme="https://ariesfun.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="学习记录" scheme="https://ariesfun.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Python" scheme="https://ariesfun.gitee.io/tags/Python/"/>
    
    <category term="Pandas" scheme="https://ariesfun.gitee.io/tags/Pandas/"/>
    
  </entry>
  
</feed>
